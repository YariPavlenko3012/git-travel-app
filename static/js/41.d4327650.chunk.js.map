{"version":3,"sources":["pages/admin/pages/Generate/Place/components/PlaceTypes/index.module.scss","enums/GenerationType.js","pages/admin/pages/Generate/Place/components/AutomaticContent/index.jsx","pages/admin/pages/Generate/Place/components/ManualContent/index.jsx","pages/admin/pages/Generate/Place/components/PlaceTypes/index.jsx","pages/admin/pages/Generate/Place/components/CustomContent/index.jsx","pages/admin/pages/Generate/Place/components/RadioGenerationType/index.jsx","enums/PlaceTypeSquare.js","pages/admin/pages/Generate/Place/index.jsx","services/admin/city.service.js","enums/ExcursionRouteType.js","services/admin/generationPlace.service.js","utils/GoogleClient.js","model/currency.model.js","model/Country/language.model.js","model/Country/country.model.js","services/admin/country.service.js"],"names":["module","exports","GenerationTypeEnums","AutomaticContent","generatePlacesByCity","typeColor","countryId","generationFinishCity","dictionary","useContext","DictionaryContext","startAutomaticGenerate","GenerationPlaceService","cityWhiteList","country_id","type","automatic","per_page","data","console","log","dataSort","filter","id","i","length","city","place_types","map","value","failed","style","display","gap","alignItems","onClick","width","flexDirection","marginTop","Object","keys","height","backgroundColor","PlaceTypeTranslate","getTranslateForType","ManualContent","mapRef","useState","setCity","cityList","setCityList","getCity","cityId","CityService","show","getCityList","manual","label","name","startManualGenerate","useEffect","GoogleClient","getRectangle","current","north","geometry","south","east","west","marginBottom","disabled","margin","size","placeholder","options","showSearch","minWidth","filterOption","text","textLowerCase","trim","toLowerCase","labelLowerCase","valueLowerCase","toString","includes","onChange","Park","setPlaceTypes","placeTypes","places","className","styles","typeWrapper","typeWrapper__type","active","PlaceTypeEnum","amusement_park","aquarium","tourist_attraction","zoo","restaurant","setGeometry","rectangle","useRef","timeOutId","allGeneratedSquare","generateSquareByGeometry","drawSquareByPlaceType","forEach","square","setMap","generatedSquare","eq","center","getCenter","squareSize","lat","maxHorizontalDif","lng","maxVerticalDif","draggable","editable","addListener","clearTimeout","setTimeout","bounds","getBounds","centerHorizontalLat","centerVerticalLng","newGeometry","parseBounds","errorDifHorizontal","errorDifVertical","setOptions","list","RadioGenerationType","generationType","setGenerationType","Group","e","target","defaultValue","custom","PlaceTypeSquareEnum","campground","embassy","art_gallery","museum","GeneratePlace","useParams","country","setCountry","mapBlockRef","squareRef","mapInit","opt","zoom","restriction","latLngBounds","strictBounds","window","google","maps","Map","currentI","currentJ","forLoop","_","currentType","countStep","generation_count_of_squares","placeHeightCoordinate","placeWidthCoordinate","stepHorizontal","stepVertical","Promise","resolve","message","city_id","indexI","indexJ","getPlaces","service","PlacesService","lastType","placesToDB","requestNearbySearch","types","json","reject","nearbySearch","status","pagination","create","currentPlace","getPlaceDetails","place_id","placeDetail","place","placeToBd","website","international_phone_number","sight_name","original_name","formatted_address","google_place_id","files_ids","check_coordinates","place_type","opening_hours","parseOpeningHours","periods","location","getPhotosId","photos","latitude","longitude","formattedTypeColor","getMarker","generateCustomMarker","hasNextPage","nextPage","SightService","createBatch","finish","getCountry","CountryService","ref","paddingTop","params","axios","get","API_ADMIN_CITY_LIST","paramsSerializer","QueryString","stringify","CityModel","API_MAKE_ADMIN_CITY_SHOW","post","API_ADMIN_CITY_CREATE","delete","API_MAKE_ADMIN_CITY_DELETE","put","API_MAKE_ADMIN_CITY_EDIT","API_MAKE_ADMIN_CITY_TAXI_CREATE","cabId","API_MAKE_ADMIN_CITY_TAXI_EDIT","translateId","API_MAKE_ADMIN_CITY_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_CITY_CHANGE_STATUS","work_status","ExcursionRouteTypeEnum","ADMIN_CREATE_SQUARE_GENERATE_PLACE","url","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE","fetch","this","key","then","res","results","viewport","northeast","southwest","photo_ref","downloadImage","file","photosList","filesIds","shortPhotosList","index","photoReference","photo_reference","getPhotoFile","placeId","fields","defaultFields","requestDetailPlace","join","result","catch","error","currentParams","direction","LatLngBounds","extend","LatLng","position","icon","props","Marker","color","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getNorthEast","path","Polyline","geodesic","pinSVGFilled","labelOriginFilled","Point","anchor","scale","labelOrigin","getSouthWest","openingHours","days","formatOpeningHours","undefined","close","reduce","day","open","openHour","time","slice","process","CurrencyModel","currency_code","CountryLanguageModel","country_description","country_name","language","LanguageModel","portraitImage","landscapeImage","CountryModel","country_code_in_iso_3166_1_format","population","official_language","capital","currency","languages","description","ambulance_number","has_seas","has_mountains","landscape_image","MediaModel","portrait_image","happiness_rating","highest_point","country_area","safety_index","images","image","API_ADMIN_COUNTRY_LIST","countryList","API_MAKE_ADMIN_COUNTRY_SHOW","API_ADMIN_COUNTRY_CREATE","API_MAKE_ADMIN_COUNTRY_UPDATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT","API_MAKE_ADMIN_COUNTRY_DELETE"],"mappings":"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","file":"static/js/41.d4327650.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeWrapper\":\"PlaceTypes_typeWrapper__3CJs2\",\"typeWrapper__type\":\"PlaceTypes_typeWrapper__type__2qvtC\",\"active\":\"PlaceTypes_active__1sive\"};","export default class GenerationTypeEnums{\n    static get automatic(){ return \"automatic\" }\n    static get manual(){ return \"manual\" }\n    static get custom(){ return \"custom\" }\n}\n","/**\n * external libs\n */\nimport React, {useContext} from 'react';\nimport {Button} from 'antd';\n/**\n * services\n */\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\n\n\nexport default function AutomaticContent({ generatePlacesByCity, typeColor, countryId, generationFinishCity }){\n    const {dictionary} = useContext(DictionaryContext)\n\n    const startAutomaticGenerate = async () => {\n        const {data} = await GenerationPlaceService.cityWhiteList({\n            country_id: countryId,\n            type: GenerationTypeEnums.automatic,\n            per_page: 1000000\n        })\n        console.log(data, \"dataSort\")\n\n\n        const dataSort = data.filter(({id}) => 454 === id)\n\n        for (let i = 0; i < dataSort.length; i++) {\n            const city = dataSort[i];\n\n            const {failed} = await generatePlacesByCity(city, dictionary.place_types.automatic.map(({value}) => value))\n\n            if (failed) {\n                console.log('failed END')\n                return;\n            }\n\n            console.log('FINISH')\n            await generationFinishCity(city.id, GenerationTypeEnums.automatic, dictionary.place_types.automatic.map(({value}) => value))\n        }\n\n        console.log(\"END\")\n\n        return;\n    }\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\"}}>\n                <Button type=\"primary\" onClick={() => startAutomaticGenerate(1)} style={{width: \"100%\"}}>Automatic generation</Button>\n\n            </div>\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginTop: 10}}>\n                {Object.keys(typeColor).map(type => {\n                    return (\n                        <div style={{display: \"flex\", alignItems: \"center\"}}>\n                            <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                            <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, { useState, useEffect, useContext } from 'react';\nimport {Button, Select} from 'antd';\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n/**\n * services\n */\nimport CityService from \"../../../../../../../services/admin/city.service\";\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\nimport GoogleClient from \"../../../../../../../utils/GoogleClient\";\n\nexport default function ManualContent({ generatePlacesByCity, countryId, typeColor, generationFinishCity, mapRef }){\n    const [city, setCity] = useState(null)\n    const [cityList, setCityList] = useState(null)\n    const {dictionary} = useContext(DictionaryContext)\n\n    const getCity = async (cityId) => {\n        setCity(await CityService.show(cityId))\n    }\n\n    const getCityList = async () => {\n        const { data } = await GenerationPlaceService.cityWhiteList({\n            country_id: countryId,\n            type: GenerationTypeEnums.manual,\n            per_page: 1000000\n        })\n\n        setCityList(data.map(({id, name}) => ({value: id, label: name})));\n    }\n\n    const startManualGenerate = async () => {\n        if(!city){\n            return;\n        }\n\n        const {failed} = await generatePlacesByCity(city, dictionary.place_types.manual.map(({value}) => value))\n\n        if (failed) {\n            console.log('failed END')\n            return;\n        }\n\n        await generationFinishCity(city.id, GenerationTypeEnums.manual, dictionary.place_types.manual.map(({value}) => value))\n    }\n\n    useEffect(() => {\n        if (!city) {\n            return\n        }\n\n\n        GoogleClient.getRectangle(\n            mapRef.current,\n            {\n                north: city.geometry.north, //noth lat\n                south: city.geometry.south, //south lat\n                east: city.geometry.east, //noth lng\n                west: city.geometry.west, //south lng\n            },\n            \"#001529\"\n        )\n    }, [city])\n\n    useEffect(() => {\n        getCityList()\n    }, [])\n\n\n    if(!cityList){\n        return null\n    }\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\", marginBottom: -10}}>\n                <Button type=\"primary\" onClick={startManualGenerate} disabled={city === null} style={{width: \"100%\"}}>Manual generation</Button>\n            </div>\n            <div style={{margin: \"20px 0\"}}>\n                <Select\n                    size=\"large\"\n                    placeholder={\"Select city\"}\n                    options={cityList}\n                    showSearch={true}\n                    style={{minWidth: \"100%\"}}\n                    filterOption={(text, {value, label}) => {\n                        const textLowerCase = text.trim().toLowerCase()\n                        const labelLowerCase = label.toLowerCase()\n                        const valueLowerCase = value.toString().toLowerCase()\n                        return labelLowerCase.includes(textLowerCase) || valueLowerCase.includes(text)\n                    }}\n                    onChange={getCity}\n                />\n            </div>\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginBottom: 10}}>\n                {Object.keys(typeColor).map(type => (\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                        <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useState} from 'react';\n/**\n * styles\n */\nimport styles from \"./index.module.scss\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n\nexport default function Park({setPlaceTypes, placeTypes, places}) {\n    return (\n        <div className={styles.typeWrapper}>\n            {places.map( type => (\n                <div className={`${styles.typeWrapper__type} ${placeTypes === type && styles.active}`} onClick={() => setPlaceTypes(type)}>\n                    {PlaceTypeTranslate.getTranslateForType(type)}\n                </div>\n            ))}\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useContext, useRef, useState} from 'react';\nimport {Button, Form, Radio} from 'antd';\n/**\n * components\n */\nimport PlaceType from \"../PlaceTypes\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\nimport GoogleClient from \"../../../../../../../utils/GoogleClient\";\n/**\n * services\n */\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport PlaceTypeEnum from \"../../../../../../../enums/PlaceType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\n\nconst typeColor = {\n    [PlaceTypeEnum.amusement_park]: \"green\",\n    [PlaceTypeEnum.aquarium]: \"red\",\n    [PlaceTypeEnum.tourist_attraction]: \"gray\",\n    [PlaceTypeEnum.zoo]: \"black\",\n    [PlaceTypeEnum.restaurant]: \"blue\",\n}\n\nexport default function AutomaticContent({ getRectangle, countryId, mapRef }){\n    const {dictionary} = useContext(DictionaryContext)\n    const [placeTypes, setPlaceTypes] = useState(null)\n    const [geometry, setGeometry] = useState(null)\n    const rectangle = useRef(null)\n    const timeOutId = useRef(null)\n    const allGeneratedSquare = useRef([])\n\n    const generateSquareByGeometry = async () => {\n        //KIYV\n        GoogleClient.getRectangle(\n            mapRef.current,\n            {\n                north: 50.590798, //noth lat\n                south: 50.213273, //south lat\n                east: 30.825941, //noth lng\n                west: 30.2394401, //south lng\n            }\n        )\n\n        // const {failed, message, type} = await getRectangle(\n        //     {\n        //         geometry,\n        //         cityId: null,\n        //         placeTypes: placeTypes\n        //     }\n        // )\n        //\n        // if (failed) {\n        //     // socket.emit('pushLog', {\n        //     //     success: false,\n        //     //     cityId: city.id,\n        //     //     geometry_square: {\n        //     //       ...geometry\n        //     //     },\n        //     //     message,\n        //     //     type,\n        //     // });\n        //\n        //     return {failed: true}\n        // }\n\n        // rectangle.current.setOptions({\n        //     editable: false,\n        //     draggable: false,\n        // })\n    }\n\n    const  drawRec = () => {\n        const center =  mapRef.current.getCenter();\n        const maxHorizontalDif  = 0.4;\n        const maxVerticalDif = 0.6;\n\n        const squareSize = {\n            north: center.lat() + maxHorizontalDif / 2, //noth lat\n            south: center.lat() - maxHorizontalDif / 2, //south lat\n            east: center.lng() + maxVerticalDif / 2, //noth lng = 0.05\n            west: center.lng() - maxVerticalDif / 2, //south lng = 0.05\n        };\n\n        rectangle.current = GoogleClient.getRectangle(\n            mapRef.current,\n            squareSize,\n            \"blue\",\n            {\n                draggable: true,\n                editable: true,\n            }\n        )\n\n        rectangle.current.addListener(\"bounds_changed\", () => {\n            clearTimeout(timeOutId.current);\n            timeOutId.current = setTimeout(() => {\n                const bounds = rectangle.current.getBounds()\n                const center = bounds.getCenter();\n                const centerHorizontalLat = center.lat();\n                const centerVerticalLng = center.lng();\n\n                let newGeometry = GoogleClient.parseBounds(bounds)\n\n                if(geometry && geometry.north === newGeometry.north && geometry.east === newGeometry.east && geometry.west === newGeometry.west && geometry.south === newGeometry.south){\n                    return;\n                }\n\n                const difHorizontal = newGeometry.north - newGeometry.south;\n                const difVertical = newGeometry.east - newGeometry.west;\n\n                const errorDifHorizontal = maxHorizontalDif < difHorizontal;\n                const errorDifVertical = maxVerticalDif < difVertical;\n\n                if(errorDifHorizontal){\n                    newGeometry = {\n                        ...newGeometry,\n                        north: centerHorizontalLat - maxHorizontalDif / 2,\n                        south: centerHorizontalLat + maxHorizontalDif / 2,\n                    }\n                }\n                if(errorDifVertical){\n                    newGeometry = {\n                        ...newGeometry,\n                        west: centerVerticalLng - maxVerticalDif / 2,\n                        east: centerVerticalLng + maxVerticalDif / 2,\n                    }\n                }\n\n                if(errorDifHorizontal || errorDifVertical){\n                    setGeometry(newGeometry)\n                    rectangle.current.setOptions({\n                        bounds: newGeometry\n                    })\n                }\n            },500);\n        });\n    }\n\n    const  close = () => {\n\n    }\n\n    const drawSquareByPlaceType = async () => {\n        if(!placeTypes){\n            return;\n        }\n\n        allGeneratedSquare.current.forEach(( square ) => {\n            square.setMap(null)\n        })\n\n        const {data} = await GenerationPlaceService.generatedSquare({\n            eq: {\n                country_id: [countryId],\n                type: [placeTypes]\n            },\n            per_page: 1000000,\n        });\n\n\n        allGeneratedSquare.current = data.map(({geometry}) => (\n            GoogleClient.getRectangle(\n                mapRef.current,\n                geometry\n            )\n        ))\n    }\n\n    useEffect(() => {\n       drawSquareByPlaceType()\n    }, [placeTypes])\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\"}}>\n                <Button type=\"primary\" onClick={generateSquareByGeometry} style={{width: \"100%\"}}>Custom generation</Button>\n                <Button type=\"primary\" onClick={drawRec} style={{width: \"100%\"}}>Draw</Button>\n                <Button type=\"primary\" onClick={close} style={{width: \"100%\"}}>close</Button>\n            </div>\n            <PlaceType places={dictionary.place_types.list.map(({value}) => value)}\n                       setPlaceTypes={setPlaceTypes}\n                       placeTypes={placeTypes}\n            />\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginBottom: 10}}>\n                {Object.keys(typeColor).map(type => (\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                        <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, { useState } from 'react';\nimport { Radio } from 'antd';\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\n\nexport default function RadioGenerationType({generationType, setGenerationType}){\n    return (\n        <Radio.Group onChange={e => setGenerationType(e.target.value)} defaultValue={generationType}>\n            <Radio value={GenerationTypeEnums.automatic}>Automatic</Radio>\n            <Radio value={GenerationTypeEnums.manual}>Manual</Radio>\n            <Radio value={GenerationTypeEnums.custom}>Custom</Radio>\n        </Radio.Group>\n    )\n}\n","export default class PlaceTypeSquareEnum{\n    static get amusement_park() {return 1}\n    static get art_gallery() {return 2}\n    static get campground() {return 2}\n    static get church() {return 1}\n    static get city_hall() {return 1}\n    static get mosque() {return 1}\n    static get embassy() {return 2}\n    static get park() {return 1}\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useContext, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\n/**\n * components\n */\nimport AutomaticContent from './components/AutomaticContent'\nimport ManualContent from './components/ManualContent'\nimport CustomContent from './components/CustomContent'\nimport RadioGenerationType from './components/RadioGenerationType'\n/**\n * enums\n */\nimport PlaceTypeEnum from '../../../../../enums/PlaceType'\nimport GenerationTypeEnums from \"../../../../../enums/GenerationType\";\nimport PlaceTypeSquareEnum from \"../../../../../enums/PlaceTypeSquare\";\n/**\n * service\n */\nimport GenerationPlaceService from \"../../../../../services/admin/generationPlace.service\";\nimport SightService from \"../../../../../services/admin/sight.service\";\nimport CountryService from \"../../../../../services/admin/country.service\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../context/dictionary.context\";\nimport GoogleClient from \"../../../../../utils/GoogleClient\";\n\n\nconst typeColor = {\n    [GenerationTypeEnums.automatic]: {\n        [PlaceTypeEnum.campground]: \"red\",\n        [PlaceTypeEnum.embassy]: \"#650abf\",\n        [PlaceTypeEnum.art_gallery]: \"green\",\n        [PlaceTypeEnum.museum]: \"#ff8600\",\n    },\n    [GenerationTypeEnums.manual]: {\n        [PlaceTypeEnum.amusement_park]: \"green\",\n        [PlaceTypeEnum.aquarium]: \"red\",\n        [PlaceTypeEnum.tourist_attraction]: \"gray\",\n        [PlaceTypeEnum.zoo]: \"black\",\n        [PlaceTypeEnum.restaurant]: \"blue\",\n    }\n}\n\nexport default function GeneratePlace() {\n    const {dictionary} = useContext(DictionaryContext)\n    const {countryId} = useParams();\n    const [generationType, setGenerationType] = useState(GenerationTypeEnums.automatic)\n    const [country, setCountry] = useState(null)\n    const mapBlockRef = useRef(null);\n    const squareRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const mapInit = async (geometry = {}) => {\n        const opt = {\n            center: {lat: 51.514316, lng: -0.129761},\n            zoom: 4,\n            restriction: {\n                latLngBounds: {\n                    ...geometry\n                },\n                strictBounds: true\n            },\n        }\n\n\n        mapRef.current = new window.google.maps.Map(mapBlockRef.current, opt)\n    }\n\n    const generatePlacesByCity = async (city, placeTypes = []) => {\n        if (!city.geometry || !placeTypes.length) {\n            return {failed: false};\n        }\n\n        let currentI = 1;\n        let currentJ = 1;\n\n        const forLoop = async _ => {\n            for (let i = 0; i < placeTypes.length; i++) {\n                const currentType = placeTypes[i];\n\n                //Берем колл-во квадратов по которым ходим. Есть значения захардкодженые, а есть с базы\n                let countStep = PlaceTypeSquareEnum[currentType] || city.generation_count_of_squares;\n\n                //Ширина и Высота квадрата по которому идем (сити геометрия)\n                const placeHeightCoordinate = city.geometry.north - city.geometry.south;\n                const placeWidthCoordinate = city.geometry.east - city.geometry.west;\n\n                //Делим этот квадрат (сити геометрию) на колл-во шагов\n                const stepHorizontal = placeWidthCoordinate / countStep;\n                const stepVertical = placeHeightCoordinate / countStep;\n\n                currentI = 1;\n                for (currentI; currentI <= countStep; currentI++) {\n                    currentJ = 1;\n                    for (currentJ; currentJ <= countStep; currentJ++) {\n                        console.log(`index: ${currentI}; jndex ${currentJ}`)\n\n                        await new Promise(resolve => setTimeout(resolve, 500))\n\n                        //Берем один текузий квадрат\n                        const {failed, message, type} = await getRectangle(\n                            {\n                                geometry: {\n                                    north: city.geometry.south + (stepVertical * currentI),\n                                    east: city.geometry.west + (stepHorizontal * currentJ),\n                                    south: city.geometry.south + (stepVertical * (currentI - 1)),\n                                    west: city.geometry.west + (stepHorizontal * (currentJ - 1)),\n                                },\n                                cityId: city.id,\n                                type: currentType,\n                            }\n                        )\n\n                        if (failed) {\n                            return {failed: true}\n                        }\n                    }\n                }\n            }\n\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            return {failed: false}\n        }\n\n        try {\n            return await forLoop()\n        } catch (e) {\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            return {\n                failed: true,\n                city_id: city.id,\n                message: e.message,\n                type: null,\n                indexI: currentI,\n                indexJ: currentJ,\n            };\n        }\n    }\n    const getRectangle = async ({geometry, cityId, type}) => {\n        try {\n            //Получение геометрии квадрата, его отрисовка на UI\n            const {north, south, east, west} = geometry;\n            const bounds = GoogleClient.getBounds(north, south, east, west)\n\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            squareRef.current = GoogleClient.getRectangle(\n                mapRef.current,\n                GoogleClient.parseBounds(bounds)\n            );\n\n            //После получения и отрисовски всех данных идем получать плейсы\n            return await getPlaces(bounds, cityId, type)\n        } catch (e) {\n            return {\n                failed: true,\n                message: e.message,\n                type: null\n            }\n        }\n\n    }\n    const getPlaces = async (bounds, cityId, type) => {\n        //Инициализация гугл сервиса по получению плейсов\n        const service = new window.google.maps.places.PlacesService(mapRef.current);\n        let lastType = null;\n\n        const forLoop = async () => {\n            let placesToDB = [];\n            const geometry = GoogleClient.parseBounds(bounds)\n            lastType = type;\n\n            const requestNearbySearch = {bounds, types: [type]}\n            await new Promise(resolve => setTimeout(() => resolve(), 1000))\n\n            //Проверяем был ли сгинерирован квадрат ранее (чтобы не создавать дубликаты)\n            const isGenerate = await GenerationPlaceService.generatedSquare({\n                json: {geometry},\n                eq: {type: [type]}\n            })\n\n            if (isGenerate.data.length) {\n                return {failed: false};\n            }\n\n            await new Promise((resolve, reject) => {\n                //Получения плейсов в текущем квадрате с которым работаем\n                service.nearbySearch(requestNearbySearch, async (places, status, pagination) => {\n                    if (![\"ZERO_RESULTS\", \"OK\"].includes(status)) {\n                        reject({\n                            message: `Google status error: ${status}`,\n                        })\n                    }\n\n                    if (!places.length) {\n                        //Запись в базу о том, в каком квадрате, какой тип плейсов мы достали\n                        await GenerationPlaceService.create({\n                            country_id: countryId,\n                            geometry,\n                            type\n                        });\n                        resolve()\n                    }\n\n                    for (let i = 0; i < places.length; i++) {\n                        try {\n                            const currentPlace = places[i];\n\n                            //Получения детайльной информации по плейсу\n                            const placeDetail = await GoogleClient.getPlaceDetails(currentPlace.place_id)\n\n                            if (placeDetail?.failed) {\n                                return reject({\n                                    message: placeDetail.message,\n                                })\n                            }\n\n                            //Мы можем найти плейс, но по нему не выдадут детальной информации поэтому записываем в плейс\n                            //в приоритете  детальный, если его не нашли записываем ту инфу что дали нам ранее\n                            const place = placeDetail || currentPlace;\n\n                            if (!place) {\n                                continue\n                            }\n\n                            //Общая информация у обычного плейса и у детального\n                            let placeToBd = {\n                                city_id: cityId,\n                                country_id: countryId,\n                                website: place.website && place.website.length < 255 ? place.website : null,\n                                international_phone_number: place.international_phone_number || null,\n                                sight_name: place.name,\n                                original_name: place.name,\n                                formatted_address: place.formatted_address,\n                                google_place_id: place.place_id,\n                                files_ids: [],\n                                check_coordinates: true,\n                                place_type: place.types.filter(type => {\n                                    return dictionary.place_types.list\n                                        .map(({value}) => value)\n                                        .includes(type)\n                                }),\n                                opening_hours: GoogleClient.parseOpeningHours(place.opening_hours?.periods),\n                            }\n\n\n                            //Доп инфа в зависимости от того работаем с детальным плейсом или нет\n                            if (placeDetail) {\n                                placeToBd = {\n                                    ...placeToBd,\n                                    latitude: place.geometry.location.lat,\n                                    longitude: place.geometry.location.lng,\n                                    files_ids: await GoogleClient.getPhotosId(place.photos),\n                                }\n                            }\n\n                            //Доп инфа в зависимости от того работаем с детальным плейсом или нет\n                            if (!placeDetail) {\n                                placeToBd = {\n                                    ...placeToBd,\n                                    latitude: place.geometry.location.lat(),\n                                    longitude: place.geometry.location.lng(),\n                                }\n                            }\n\n\n                            //Получаем цвета для маркеров (для понятной отрисовки на UI)\n                            const formattedTypeColor = {\n                                ...typeColor[GenerationTypeEnums.automatic],\n                                ...typeColor[GenerationTypeEnums.manual],\n                            }\n\n                            //Генерируем маркер на UI\n                            GoogleClient.getMarker(\n                                mapRef.current,\n                                {lat: placeToBd.latitude, lng: placeToBd.longitude},\n                                GoogleClient.generateCustomMarker(formattedTypeColor[type])\n                            )\n\n                            console.log(placeToBd)\n\n                            placesToDB = [...placesToDB, placeToBd]\n\n                            if (i + 1 === places.length) {\n                                //Если есть пагинация продолжаем брать плейсы дальше\n                                if (pagination && pagination.hasNextPage) {\n                                    pagination.nextPage()\n                                    return;\n                                }\n\n                                //Запись всех плейсов в базу\n                                await SightService.createBatch(placesToDB)\n\n                                //Запись в базу о том, в каком квадрате, какой тип плейсов мы достали\n                                await GenerationPlaceService.create({\n                                    country_id: countryId,\n                                    geometry,\n                                    type\n                                })\n\n                                console.log(placesToDB, \"placesToDB\")\n\n                                resolve()\n                            }\n                        } catch (error) {\n                            return reject({\n                                message: error.message,\n                            })\n                        }\n                    }\n                });\n            })\n\n            return {failed: false};\n        }\n\n        try {\n            return await forLoop()\n        } catch (error) {\n            return {\n                failed: true,\n                message: error.message,\n                type: lastType\n            };\n        }\n    }\n\n    const generationFinishCity = async (cityId, generationType, placeTypes) => {\n        await GenerationPlaceService.finish({\n            \"city_id\": cityId,\n            \"generation_type\": generationType,\n            \"types\": placeTypes\n        })\n    }\n\n    const getCountry = async () => {\n        const country = await CountryService.show(countryId)\n        setCountry(country)\n\n        return country\n    }\n\n    useEffect(() => {\n        getCountry()\n    }, [])\n\n    useEffect(() => {\n        if (!generationType || !country?.geometry) {\n            return;\n        }\n\n        mapInit(country.geometry)\n    }, [generationType, country?.geometry])\n\n    return (\n        <div>\n\n            <div style={{display: \"flex\", gap: 50}}>\n                <div ref={mapBlockRef} style={{width: \"70%\", height: 500}}/>\n                <div style={{width: \"30%\"}}>\n                    <RadioGenerationType generationType={generationType}\n                                         setGenerationType={setGenerationType}/>\n                    <div style={{paddingTop: 20}}>\n                        {generationType === GenerationTypeEnums.automatic && (\n                            <AutomaticContent typeColor={typeColor[GenerationTypeEnums.automatic]}\n                                              generationFinishCity={generationFinishCity}\n                                              generatePlacesByCity={generatePlacesByCity}\n                                              countryId={countryId}/>\n                        )}\n                        {generationType === GenerationTypeEnums.manual && (\n                            <ManualContent typeColor={typeColor[GenerationTypeEnums.manual]}\n                                           generationFinishCity={generationFinishCity}\n                                           generatePlacesByCity={generatePlacesByCity}\n                                           countryId={countryId}\n                                           mapRef={mapRef}/>\n                        )}\n                        {generationType === GenerationTypeEnums.custom && (\n                            <CustomContent countryId={countryId} getRectangle={getRectangle} mapRef={mapRef}/>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_CITY_CREATE,\n    API_MAKE_ADMIN_CITY_DELETE,\n    API_ADMIN_CITY_LIST,\n    API_MAKE_ADMIN_CITY_TAXI_CREATE,\n    API_MAKE_ADMIN_CITY_SHOW,\n    API_MAKE_ADMIN_CITY_EDIT,\n    API_MAKE_ADMIN_CITY_TAXI_EDIT,\n    API_MAKE_ADMIN_CITY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_CITY_CHANGE_STATUS,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class CityService {\n    static async list(params) {\n        let cityList = await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n\n    static async show(cityId) {\n        return new CityModel(await axios.get(API_MAKE_ADMIN_CITY_SHOW(cityId)));\n    }\n\n    static async create(data) {\n        return new CityModel(await axios.post(API_ADMIN_CITY_CREATE, data));\n    }\n\n    static async delete(cityId) {\n        return await axios.delete(API_MAKE_ADMIN_CITY_DELETE(cityId))\n    }\n\n    static async update(cityId, data) {\n        return new CityModel(await axios.put(API_MAKE_ADMIN_CITY_EDIT(cityId), data));\n    }\n\n    static async createTaxi(cityId, data) {\n        return await axios.post(API_MAKE_ADMIN_CITY_TAXI_CREATE(cityId), data);\n    }\n\n    static async updateTaxi(cityId, cabId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TAXI_EDIT(cityId, cabId), data);\n    }\n\n    static async updateTranslate(cityId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TRANSLATE_EDIT(cityId, translateId), data);\n    }\n\n    static async updateWorkStatus(cityId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_CITY_CHANGE_STATUS(cityId), {work_status: workStatus});\n    }\n}\n\n","export default class ExcursionRouteTypeEnum{\n    static get walking(){ return \"walking\" }\n    static get driving(){ return \"driving\" }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList(params) {\n        let cityList =  await axios.get(ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class GoogleClient {\n    static key = process.env.REACT_APP_GEOCODING_API\n\n    static getGeometryForCity(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${this.key}`)\n            .then(res => res.json())\n            .then(city => {\n                console.log(city)\n                if (city.results[0]) {\n                    const {northeast, southwest} = city.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static getGeometryForCountry(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=country&key=${this.key}`)\n            .then(res => res.json())\n            .then(country => {\n                console.log(country)\n                if (country.results[0]) {\n                    const {northeast, southwest} = country.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static async getPhotoFile (photo_ref){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${this.key}`)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( photosList ){\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index < 3) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photoReference = shortPhotosList[i].photo_reference;\n            const file = await this.getPhotoFile(photoReference)\n\n            if (file.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static getPlaceDetails( placeId, fields, props = {} ){\n        const defaultFields = [\n            'international_phone_number',\n            'opening_hours',\n            'website',\n            'geometry',\n            'type',\n            'photo',\n            'formatted_address',\n            'address_components',\n            'name',\n            'place_id',\n        ]\n\n        console.log(placeId, fields)\n\n        const requestDetailPlace = {\n            placeId: placeId,\n            fields: fields || defaultFields\n        };\n\n        return fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${this.key}`)\n            .then(res => res.json())\n            .then(res => {\n                console.log(res)\n                if(res.status === \"OK\"){\n                    return res.result;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(res.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: res.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getDirection( params ){\n        const currentParams = {\n            key: this.key,\n            ...params,\n        }\n        const url = `https://maps.googleapis.com/maps/api/directions/json?${QueryString.stringify(currentParams)}`\n\n        return fetch(url)\n            .then(res => res.json())\n            .then(direction => {\n                if(direction.status === \"OK\"){\n                    return direction;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(direction.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: direction.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getBounds(north, south, east, west) {\n        const bounds = new window.google.maps.LatLngBounds();\n\n        bounds.extend(new window.google.maps.LatLng(north, east));\n        bounds.extend(new window.google.maps.LatLng(south, west));\n\n        return bounds;\n    }\n\n    static getMarker(map, position = {}, icon = null, props){\n        return new window.google.maps.Marker({\n            position: position,\n            icon,\n            map,\n            ...props\n        })\n    }\n\n    static getRectangle( map, bounds, color = \"blue\", props = {} ){\n        return new window.google.maps.Rectangle({\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: color,\n            fillOpacity: 0.35,\n            bounds: bounds.getNorthEast ? GoogleClient.parseBounds(bounds) : bounds,\n            map,\n            ...props,\n        });\n    }\n\n    static getPolyline( map, path, props = {} ){\n        return new window.google.maps.Polyline({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            geodesic: true,\n            path,\n            map,\n            ...props,\n        })\n    }\n\n    static generateCustomMarker(color = \"black\") {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    static parseBounds( bounds ){\n        return {\n            north: bounds.getNorthEast().lat(), //noth lat\n            south: bounds.getSouthWest().lat(), //south lat\n            east: bounds.getNorthEast().lng(), //noth lng\n            west: bounds.getSouthWest().lng() //south lng\n        }\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            if(openingHours.length === 1 && openingHours[0].close === undefined){\n                formatOpeningHours = days.reduce((result, day ) => ({\n                    ...result,\n                    [day]: {\n                        open: \"00:00\",\n                        close: \"00:00\"\n                    }\n                }), {})\n\n                return formatOpeningHours\n            }\n\n            formatOpeningHours = openingHours.reduce( (result, openHour) => ({\n                ...result,\n                [days[openHour.open.day]]: {\n                    open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                    close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                }\n            }), {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","export default class CurrencyModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.currency_code = data.currency_code;\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CountryLanguageModel {\n    constructor(data = {}) {\n        this.country_description = data.country_description;\n        this.country_name = data.country_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n};\n","import CityModel from '../City/city.model'\nimport MediaModel from \"../media.model\";\nimport CurrencyModel from \"../currency.model\";\nimport LanguageModel from \"../language.model\";\nimport CountryLanguageModel from \"./language.model\";\n\n\nconst portraitImage = {\n    id: null,\n    path: \"https://images.unsplash.com/photo-1629809189194-8302d4345c8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dWtyYWluZSUyMGZsYWd8ZW58MHx8MHx8&w=1000&q=80\"\n}\n\nconst landscapeImage = {\n    id: null,\n    path: \"https://media.istockphoto.com/photos/close-up-ukranian-flag-picture-id163641275?b=1&k=20&m=163641275&s=170667a&w=0&h=CVdqTfh31VTDbr7hqcBTbyocEZLlWTC02Kip6niMXBw=\"\n}\n\nexport default class CountryModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.country_code_in_iso_3166_1_format = data.country_code_in_iso_3166_1_format;\n        this.population = data.population;\n        this.official_language = new LanguageModel(data.official_language);\n        this.capital = data.capital ? new CityModel(data.capital) : null;\n        this.currency = new CurrencyModel(data.currency);\n        this.name = data.name;\n        this.geometry = data.geometry;\n        this.languages = (data.languages || []).map( language => new CountryLanguageModel(language));\n        this.description = data.description;\n        this.ambulance_number = data.ambulance_number;\n        this.original_name = data.original_name;\n        this.has_seas = data.has_seas;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.has_mountains = data.has_mountains;\n        this.landscape_image = new MediaModel(data.landscape_image || landscapeImage);\n        this.portrait_image = new MediaModel(data.portrait_image || portraitImage);\n        this.has_mountains = data.has_mountains;\n        this.happiness_rating = data.happiness_rating;\n        this.highest_point = data.highest_point;\n        this.country_area = data.country_area;\n        this.safety_index = data.safety_index;\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_COUNTRY_CREATE,\n    API_ADMIN_COUNTRY_LIST,\n    API_MAKE_ADMIN_COUNTRY_DELETE,\n    API_MAKE_ADMIN_COUNTRY_SHOW,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_COUNTRY_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CountryModel from \"../../model/Country/country.model\";\n\nexport default class CountryService {\n    static async list(params) {\n        let countryList = await axios.get(API_ADMIN_COUNTRY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        countryList.data = countryList.data.map( country => new CountryModel(country));\n\n        return countryList;\n    }\n\n    static async show(countryId) {\n        return new CountryModel(await axios.get(API_MAKE_ADMIN_COUNTRY_SHOW(countryId)));\n    }\n\n    static async create(data) {\n        return new CountryModel(await axios.post(API_ADMIN_COUNTRY_CREATE, data));\n    }\n\n    static async update(countryId, data) {\n        return new CountryModel(await axios.put(API_MAKE_ADMIN_COUNTRY_UPDATE(countryId), data));\n    }\n\n    static async createTranslate(countryId, data) {\n        return await axios.post(API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE(countryId), data);\n    }\n\n    static async updateTranslate(countryId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT(countryId, translateId), data);\n    }\n\n    static async delete(countryId) {\n        return await axios.delete(API_MAKE_ADMIN_COUNTRY_DELETE(countryId));\n    }\n}\n\n"],"sourceRoot":""}