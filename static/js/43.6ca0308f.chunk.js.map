{"version":3,"sources":["pages/admin/pages/Generate/City/index.jsx","model/language.model.js","model/City/cabs.model.js","model/City/language.model.js","model/City/city.model.js","model/media.model.js","services/admin/city.service.js","enums/ExcursionRouteType.js","services/admin/generationPlace.service.js","utils/GoogleClient.js","model/State/language.model.js","model/State/state.model.js","services/admin/state.service.js"],"names":["i","GenerateCity","useState","cities","setCities","equalGeometryCity","setEqualGeometryCity","generate","useParams","countryId","countryCode","minPopulation","url","isDemo","LIMIT_RATE","headers","states","fetch","json","resultState","console","log","data","metadata","totalCount","length","stateIso","isoCode","j","resultCity","filter","city","type","includes","name","map","latitude","longitude","split","newEqualGeometryCity","cityData","id","Promise","resolve","setTimeout","GoogleClient","getGeometryForCity","geometry","north","east","south","west","geometryKey","Object","keys","reduce","accum","key","createCity","cityRequest","state_id","city_name","original_name","generation_count_of_squares","CityService","create","cityId","style","fontSize","fontWeight","marginBottom","onClick","size","border","header","bordered","dataSource","renderItem","item","Item","title","copyEqualGeometryCity","JSON","parse","stringify","deleteCity","marginLeft","icon","LanguageModel","this","lang_code","CabModel","trim","phone_number","CityLanguageModel","language","portraitImage","path","landscapeImage","CityModel","description","state","work_status","languages","images","image","MediaModel","population","landscape_image","portrait_image","cabs","cab","params","axios","get","API_ADMIN_CITY_LIST","paramsSerializer","QueryString","cityList","API_MAKE_ADMIN_CITY_SHOW","post","API_ADMIN_CITY_CREATE","delete","API_MAKE_ADMIN_CITY_DELETE","put","API_MAKE_ADMIN_CITY_EDIT","API_MAKE_ADMIN_CITY_TAXI_CREATE","cabId","API_MAKE_ADMIN_CITY_TAXI_EDIT","translateId","API_MAKE_ADMIN_CITY_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_CITY_CHANGE_STATUS","ExcursionRouteTypeEnum","GenerationPlaceService","ADMIN_CREATE_SQUARE_GENERATE_PLACE","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE","then","res","results","viewport","northeast","southwest","lat","lng","country","photo_ref","downloadImage","file","photosList","filesIds","shortPhotosList","_","index","photoReference","photo_reference","getPhotoFile","placeId","fields","defaultFields","requestDetailPlace","join","status","result","failed","message","catch","error","currentParams","direction","bounds","window","google","maps","LatLngBounds","extend","LatLng","position","props","Marker","color","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getNorthEast","parseBounds","Polyline","geodesic","pinSVGFilled","labelOriginFilled","Point","anchor","scale","labelOrigin","getSouthWest","openingHours","days","formatOpeningHours","undefined","close","day","open","openHour","time","slice","process","StateLanguageModel","state_name","StateModel","StateService","API_ADMIN_STATE_LIST","stateList","stateId","API_MAKE_ADMIN_STATE_SHOW","API_ADMIN_STATE_CREATE","API_MAKE_ADMIN_STATE_UPDATE","API_MAKE_ADMIN_STATE_TRANSLATE_CREATE","API_MAKE_ADMIN_STATE_TRANSLATE_EDIT","API_MAKE_ADMIN_STATE_DELETE"],"mappings":";sTACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAOe,SAASC,IACpB,MAA4BC,mBAAS,MAAK,mBAAnCC,EAAM,KAAEC,EAAS,KACxB,EAAkDF,mBAAS,MAAK,mBAAzDG,EAAiB,KAAEC,EAAoB,KAGxCC,GAFcC,cAAbC,UAEO,uCAAG,8IAAOC,EAAW,+BAAG,KAAMC,EAAa,+BAAG,IAElDC,GADAC,GAAS,GACM,gDAAkD,oCACjEC,EAAaD,EAAS,GAAK,IAE3BE,EAAU,CACZ,iBAAkB,qDAClB,kBAAmB,6BAEnBC,EAAS,GAEJhB,EAAI,EAAE,KAAD,mBACwBiB,MAAM,GAAD,OAAIL,EAAG,6BAAqBF,EAAW,0BAAkBI,EAAU,mBAAWA,EAAad,GAAK,CACnIe,QAAQ,aACJ,eAAgB,oBACbA,KAET,gCAAEG,OAAI,QAIsC,GATxCC,EAAW,OAMjBC,QAAQC,IAAIrB,GACZgB,EAAM,sBAAOA,GAAM,YAAKG,EAAYG,SAEXR,GAAcd,EAAI,IACnBmB,EAAYI,SAASC,YAAU,qDAXzCxB,IAAG,uBAgBjBG,EAAS,GAEJH,EAAI,EAAE,KAAD,QAAEA,EAAIgB,EAAOS,QAAM,iBACvBC,EAAWV,EAAOhB,GAAG2B,QAClBC,EAAI,EAAE,KAAD,oBACuBX,MAAM,GAAD,OAAIL,EAAG,6BAAqBF,EAAW,oBAAYgB,EAAQ,iCAAyBf,EAAa,oCAA4BG,EAAU,mBAAWA,EAAac,GAAK,CACtMb,QAAQ,aACJ,eAAgB,oBACbA,KAET,gCAAEG,OAAI,QAYsC,GAjBxCW,EAAU,OAMhBT,QAAQC,IAAIrB,GACZG,EAAM,sBAAOA,GAAM,YAAK0B,EAAWP,KAC9BQ,QAAO,SAAAC,GAAI,MAAkB,SAAdA,EAAKC,QACpBF,QAAO,SAAAC,GAAI,OAAK,CAAC,2BAAa,SAAU,gBAAY,cAAU,SAAU,QAAS,QAAS,aAAW,aAAW,cAAWE,SAASF,EAAKG,SACzIC,KAAI,SAAAJ,GAAI,kCACFA,GAAI,IACPK,SAAUL,EAAKK,SACfC,UAAWN,EAAKM,UAChBH,KAAMH,EAAKG,KAAKI,MAAM,WAAW,YAGhBxB,GAAcc,EAAI,IACnBC,EAAWN,SAASC,YAAU,qDAnBxCI,IAAG,wBAFU5B,IAAG,wBA2BtCoB,QAAQC,IAAI,WAAYlB,GAEpBoC,EAAuB,GAElBvC,EAAI,EAAE,KAAD,QAAEA,EAAIG,EAAOsB,QAAM,iBAM5B,OALKM,EAAO5B,EAAOH,GAEdwC,EAAW,CACbC,GAAIV,EAAKU,GACTP,KAAMH,EAAKG,MACd,UAEK,IAAIQ,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAAK,yBAC/BE,IAAaC,mBAAmBf,EAAKK,SAAUL,EAAKM,WAAU,SAA/EU,EAAQ,UAEVP,EAASO,SAAWA,EACpBP,EAASJ,SAAWL,EAAKK,SACzBI,EAASH,UAAYN,EAAKM,UAGnBW,EAA4BD,EAA5BC,MAAOC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,KAErBC,EAAW,UAAMJ,EAAK,YAAIC,EAAI,YAAIC,EAAK,YAAIC,GAC5CZ,EAAqBa,KACtBb,EAAqBa,GAAe,IAGxCb,EAAqBa,GAAY,sBAC1Bb,EAAqBa,IAAY,CACpCZ,KAGRrC,EAAOH,GAAKwC,EAAQ,QA5BWxC,IAAG,wBA+BtCuC,EAAuBc,OAAOC,KAAKf,GAAsBgB,QAAO,SAACC,EAAOC,GAKpE,OAJID,EAAMC,GAAKhC,QAAU,UACd+B,EAAMC,GAGVD,IACRjB,GAGHnB,QAAQC,IAAIlB,GAIZC,EAAUD,GACVG,EAAqB+C,OAAOC,KAAKf,GAAsBd,OAASc,EAAuB,MAAK,4CAC/F,kBA1Ga,oCA6HRmB,EAAU,uCAAG,4FAMN1D,EAAI,EAAE,KAAD,OAAEA,EAAIG,EAAOsB,QAAM,iBAS5B,OARKM,EAAO5B,EAAOH,GACpBoB,QAAQC,IAAIU,GAEN4B,EAAc,CAChBC,SAAU,GACVC,UAAW9B,EAAKG,KAChB4B,cAAe/B,EAAKG,KACpB6B,4BAA6B,GAChC,SAEK,IAAIrB,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAAK,OAKrD,OAJGZ,EAAKgB,WACLY,EAAYZ,SAAWhB,EAAKgB,SAC5BY,EAAYvB,SAAWL,EAAKK,SAC5BuB,EAAYtB,UAAYN,EAAKM,WAChC,UAE0B2B,IAAYC,OAAO,CAAClC,KAAM4B,IAAa,iBAAvDO,EAAM,EAAVzB,GAEPrB,QAAQC,IAAI,OAAD,OAAQ6C,EAAM,mBAAWnC,EAAI,cAAc,KAAK,QApB5B/B,IAAG,2DAsBzC,kBA5Be,mCA8BhB,OACI,6BACKG,GACG,yBAAKgE,MAAO,CAACC,SAAU,GAAIC,WAAY,IAAKC,aAAc,KAAI,iBAC3CnE,EAAOsB,OAAM,YAGlCtB,GACE,kBAAC,IAAM,CAAC6B,KAAK,UAAUuC,QAAS,kBAAMhE,EAAS,KAAM,OAAQ,mBAIhEF,GACG,6BACI,yBAAK8D,MAAO,CAACE,WAAY,IAAKC,aAAc,KAAI,iDAC/CjB,OAAOC,KAAKjD,GAAmB8B,KAAI,SAAAqC,GAAI,OACpC,kBAAC,IAAI,CACDf,IAAKe,EACLL,MAAO,CACHG,aAAc,GACdG,OAAO,aAAD,OAAkD,IAAnCpE,EAAkBmE,GAAM/C,OAAe,UAAY,QAE5EiD,OAAQ,6BAAMF,GACdG,UAAQ,EACRC,WAAYvE,EAAkBmE,GAC9BK,WAAY,SAACC,GAAI,OACb,kBAAC,IAAKC,KAAI,KACLD,EAAK5C,KACN,kBAAC,IAAO,CAAC8C,MAAM,eACX,kBAAC,IAAM,CAACT,QAAS,kBA5ElC,SAAC9B,EAAI+B,GACpB,IAAIS,EAAwBC,KAAKC,MAAMD,KAAKE,UAAU/E,IACtD4E,EAAsBT,GAAQS,EAAsBT,GAAM1C,QAAO,SAAAC,GAAI,OAAIA,EAAKU,KAAOA,KAE1C,IAAvCwC,EAAsBT,GAAM/C,eACrBwD,EAAsBT,GAG5BnB,OAAOC,KAAK2B,GAAuBxD,SACpCwD,EAAwB,MAG5B7E,EAAUD,EAAO2B,QAAO,SAACC,GAAI,OAAKA,EAAKU,KAAOA,MAE9CnC,EAAqB2E,GA8DkCI,CAAWP,EAAKrC,GAAI+B,IAAOL,MAAO,CAACmB,WAAY,IAC9DtD,KAAK,SAASuD,KAAM,kBAAC,IAAc,MAAIf,KAAM,mBAQhFrE,IAAWE,GACR,kBAAC,IAAM,CAAC2B,KAAK,UAAUuC,QAASb,GAAW,UAC/BvD,EAAOsB,OAAM,c,uFChNpB+D,EAAa,aAC9B,aAAwB,IAAZlE,EAAI,uDAAG,GAAE,oBACjBmE,KAAKhD,GAAKnB,EAAKmB,GACfgD,KAAKvD,KAAOZ,EAAKY,KACjBuD,KAAKC,UAAYpE,EAAKoE,c,gGCJTC,EAAQ,aACzB,aAAwB,IAAZrE,EAAI,uDAAG,GAAE,oBACjBmE,KAAKhD,GAAMnB,EAAKmB,GAChBgD,KAAKvD,MAAQZ,EAAKY,MAAQ,IAAI0D,OAC9BH,KAAKI,cAAgBvE,EAAKuE,cAAgB,IAAID,U,SCFjCE,EAAiB,aAClC,aAAwB,IAAZxE,EAAI,uDAAG,GAAE,oBACjBmE,KAAK5B,UAAYvC,EAAKuC,UACtB4B,KAAKhD,GAAKnB,EAAKmB,GACfgD,KAAKM,SAAW,IAAIP,IAAclE,EAAKyE,aCFzCC,EAAgB,CAClBvD,GAAI,KACJwD,KAAM,6JAGJC,EAAiB,CACnBzD,GAAI,KACJwD,KAAM,qKAGWE,EAAS,aAC1B,aAAwB,IAAZ7E,EAAI,uDAAG,GAAE,oBACjBmE,KAAKhD,GAAKnB,EAAKmB,GACfgD,KAAKvD,KAAOZ,EAAKY,KACjBuD,KAAKW,YAAc9E,EAAK8E,YACxBX,KAAKY,MAAQ/E,EAAK+E,MAClBZ,KAAKrD,SAAWd,EAAKc,SACrBqD,KAAKpD,UAAYf,EAAKe,UACtBoD,KAAK1C,SAAWzB,EAAKyB,SACrB0C,KAAKa,YAAchF,EAAKgF,YACxBb,KAAK1B,4BAA8BzC,EAAKyC,4BACxC0B,KAAK3B,cAAgBxC,EAAKwC,cAC1B2B,KAAKc,WAAajF,EAAKiF,WAAa,IAAIpE,KAAK,SAAA4D,GAAQ,OAAI,IAAID,EAAkBC,MAC/EN,KAAKe,QAAUlF,EAAKkF,QAAU,IAAIrE,KAAK,SAAAsE,GAAK,OAAI,IAAIC,IAAWD,MAC/DhB,KAAKkB,WAAarF,EAAKqF,WACvBlB,KAAKmB,gBAAmB,IAAIF,IAAWpF,EAAKsF,iBAAmBV,GAC/DT,KAAKoB,eAAkB,IAAIH,IAAWpF,EAAKuF,gBAAkBb,GAC7DP,KAAKqB,MAAQxF,EAAKwF,MAAQ,IAAI3E,KAAK,SAAA4E,GAAG,OAAI,IAAIpB,EAASoB,U,uFC/B1CL,EAAU,aAC3B,aAAwB,IAAZpF,EAAI,uDAAG,GAAE,oBACjBmE,KAAKhD,GAAKnB,EAAKmB,GACfgD,KAAKQ,KAAO3E,EAAK2E,S,sJCFzB,06MAwBoD,IAE/BjC,EAAW,4CA4C3B,OA5C2B,6EAC5B,WAAkBgD,GAAM,uFACCC,IAAMC,IAAIC,IAAqB,CAChDH,SACAI,iBAAkB,SAAAJ,GACd,OAAOK,IAAYjC,UAAU4B,MAElC,KAAD,EAE6D,OAP3DM,EAAQ,QAOHhG,KAAOgG,EAAShG,KAAKa,KAAI,SAAAJ,GAAI,OAAI,IAAIoE,IAAUpE,MAAO,kBAExDuF,GAAQ,2CAClB,mDAZ2B,IAY3B,yDAED,WAAkBpD,GAAM,iEACA,OADA,KACTiC,IAAS,SAAOc,IAAMC,IAAIK,YAAyBrD,IAAQ,uGACzE,mDAJA,IAIA,2DAED,WAAoB5C,GAAI,iEACA,OADA,KACT6E,IAAS,SAAOc,IAAMO,KAAKC,IAAuBnG,GAAK,uGACrE,mDAJA,IAIA,2DAED,WAAoB4C,GAAM,iFACT+C,IAAMS,OAAOC,YAA2BzD,IAAQ,mFAChE,mDAJA,IAIA,2DAED,WAAoBA,EAAQ5C,GAAI,iEACR,OADQ,KACjB6E,IAAS,SAAOc,IAAMW,IAAIC,YAAyB3D,GAAS5C,GAAK,uGAC/E,qDAJA,IAIA,+DAED,WAAwB4C,EAAQ5C,GAAI,iFACnB2F,IAAMO,KAAKM,YAAgC5D,GAAS5C,GAAM,KAAD,8EACzE,qDAJA,IAIA,+DAED,WAAwB4C,EAAQ6D,EAAOzG,GAAI,iFAC1B2F,IAAMW,IAAII,YAA8B9D,EAAQ6D,GAAQzG,GAAM,KAAD,8EAC7E,uDAJA,IAIA,oEAED,WAA6B4C,EAAQ+D,EAAa3G,GAAI,iFACrC2F,IAAMW,IAAIM,YAAmChE,EAAQ+D,GAAc3G,GAAM,KAAD,8EACxF,uDAJA,IAIA,qEAED,WAA8B4C,EAAQiE,GAAU,iFAC/BlB,IAAMW,IAAIQ,YAAkClE,GAAS,CAACoC,YAAa6B,IAAa,KAAD,8EAC/F,qDAJA,MAIA,EA5C2B,I,uFC3BXE,EAAsB,4CAEC,OAFD,uCACvC,WAAsB,MAAO,YAAW,mBACxC,WAAsB,MAAO,cAAW,EAFD,I,sJCC3C,06MAcoD,IAG/BC,EAAsB,4CAiCtC,OAjCsC,+EACvC,WAAoBhH,GAAI,iFACP2F,IAAMO,KAAKe,IAAoCjH,GAAM,KAAD,8EACpE,mDAHsC,IAGtC,kEAED,WAA2BV,GAAG,iFACbqG,IAAMO,KAAKgB,IAAgC,CAAC5H,QAAK,mFACjE,mDAJA,IAIA,2DAED,WAAoBU,GAAI,iFACP2F,IAAMO,KAAKiB,IAAmDnH,GAAK,mFACnF,mDAJA,IAIA,oEAED,WAA6B0F,GAAM,iFAClBC,IAAMC,IAAIwB,IAA2C,CAC9D1B,SACAI,iBAAkB,SAAAJ,GACd,OAAOK,IAAYjC,UAAU4B,MAEnC,mFACL,mDATA,IASA,kEAED,WAA2BA,GAAM,uFACPC,IAAMC,IAAIyB,IAA0C,CACtE3B,SACAI,iBAAkB,SAAAJ,GACd,OAAOK,IAAYjC,UAAU4B,MAEnC,OAE6D,OAP3DM,EAAQ,QAOHhG,KAAOgG,EAAShG,KAAKa,KAAI,SAAAJ,GAAI,OAAI,IAAIoE,IAAUpE,MAAO,kBAExDuF,GAAQ,2CAClB,mDAbA,MAaA,EAjCsC,I,iKCjB3C,kmGAAAtH,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAC0C,IAErB6C,EAAY,4CAqP5B,OArP4B,oDAG7B,SAA0BT,EAAUC,GAChC,OAAOpB,MAAM,4DAAD,OAA6DmB,EAAQ,YAAIC,EAAS,qCAA6BoD,KAAKhC,MAC3HmF,MAAK,SAAAC,GAAG,OAAIA,EAAI3H,UAChB0H,MAAK,SAAA7G,GAEF,GADAX,QAAQC,IAAIU,GACRA,EAAK+G,QAAQ,GAAI,CACjB,MAA+B/G,EAAK+G,QAAQ,GAAG/F,SAASgG,SAAjDC,EAAS,EAATA,UAAWC,EAAS,EAATA,UAElB,MAAO,CACHjG,MAAOgG,EAAUE,IACjBjG,KAAM+F,EAAUG,IAChBjG,MAAO+F,EAAUC,IACjB/F,KAAM8F,EAAUE,KAIxB,OAAO,UAElB,mCAED,SAA6B/G,EAAUC,GACnC,OAAOpB,MAAM,4DAAD,OAA6DmB,EAAQ,YAAIC,EAAS,oCAA4BoD,KAAKhC,MAC1HmF,MAAK,SAAAC,GAAG,OAAIA,EAAI3H,UAChB0H,MAAK,SAAAQ,GAEF,GADAhI,QAAQC,IAAI+H,GACRA,EAAQN,QAAQ,GAAI,CACpB,MAA+BM,EAAQN,QAAQ,GAAG/F,SAASgG,SAApDC,EAAS,EAATA,UAAWC,EAAS,EAATA,UAElB,MAAO,CACHjG,MAAOgG,EAAUE,IACjBjG,KAAM+F,EAAUG,IAChBjG,MAAO+F,EAAUC,IACjB/F,KAAM8F,EAAUE,KAIxB,OAAO,UAElB,iEAED,WAA2BE,GAAW,IAAF,4FAEtB,IAAI3G,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAAK,uBACnC2F,IAAuBgB,cAAc,4GAAD,OAA6GD,EAAS,gBAAQ5D,KAAKhC,MAAM,OAAtL,OAAJ8F,EAAI,0BAEC,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM9G,IAAK8G,EAAO,MAAI,yDAEtB,MAAI,yDAElB,mDAXA,IAWA,gEAED,WAA0BC,GAAU,+EAE0C,GADtEC,EAAW,IACTC,GAA4B,OAAVF,QAAU,IAAVA,OAAU,EAAVA,EAAY1H,QAAO,SAAC6H,EAAGC,GAAK,OAAKA,EAAQ,OAAM,IAEnDnI,OAAO,CAAD,wCACf,IAAE,OAGJzB,EAAI,EAAE,KAAD,OAAEA,EAAI0J,EAAgBjI,QAAM,iBACmB,OAAnDoI,EAAiBH,EAAgB1J,GAAG8J,gBAAgB,EAAD,OACtCrE,KAAKsE,aAAaF,GAAe,QAA9CN,EAAI,QAED9G,KACLgH,EAAQ,sBAAOA,GAAQ,CAAEF,EAAK9G,MACjC,QANuCzC,IAAG,gDASxCyJ,GAAQ,iDAClB,mDApBA,IAoBA,6BAED,SAAwBO,EAASC,GAAqB,IAC5CC,EAAgB,CAClB,6BACA,gBACA,UACA,WACA,OACA,QACA,oBACA,qBACA,OACA,YAGJ9I,QAAQC,IAAI2I,EAASC,GAErB,IAAME,EAAqB,CACvBH,QAASA,EACTC,OAAQA,GAAUC,GAGtB,OAAOjJ,MAAM,oEAAD,OAAqEkJ,EAAmBH,QAAO,mBAAWG,EAAmBF,OAAOG,KAAK,KAAI,gBAAQ3E,KAAKhC,MACjKmF,MAAK,SAAAC,GAAG,OAAIA,EAAI3H,UAChB0H,MAAK,SAAAC,GAEF,OADAzH,QAAQC,IAAIwH,GACM,OAAfA,EAAIwB,OACIxB,EAAIyB,OAGZ,CAAC,eAAgB,aAAarI,SAAS4G,EAAIwB,QACnC,KAGJ,CACHE,QAAQ,EACRC,QAAS3B,EAAIwB,WAGpBI,OAAO,SAAAC,GAAK,MAAK,CACdH,QAAQ,EACRC,QAASE,QAEpB,0BAED,SAAqB1D,GACjB,IAAM2D,EAAa,aACflH,IAAKgC,KAAKhC,KACPuD,GAEDpG,EAAG,+DAA2DyG,IAAYjC,UAAUuF,IAE1F,OAAO1J,MAAML,GACRgI,MAAK,SAAAC,GAAG,OAAIA,EAAI3H,UAChB0H,MAAK,SAAAgC,GACF,MAAwB,OAArBA,EAAUP,OACFO,EAGR,CAAC,eAAgB,aAAa3I,SAAS2I,EAAUP,QACzC,KAGJ,CACHE,QAAQ,EACRC,QAASI,EAAUP,WAG1BI,OAAO,SAAAC,GAAK,MAAK,CACdH,QAAQ,EACRC,QAASE,QAEpB,uBAED,SAAiB1H,EAAOE,EAAOD,EAAME,GACjC,IAAM0H,EAAS,IAAIC,OAAOC,OAAOC,KAAKC,aAKtC,OAHAJ,EAAOK,OAAO,IAAIJ,OAAOC,OAAOC,KAAKG,OAAOnI,EAAOC,IACnD4H,EAAOK,OAAO,IAAIJ,OAAOC,OAAOC,KAAKG,OAAOjI,EAAOC,IAE5C0H,IACV,uBAED,SAAiB1I,GAAwC,IAAnCiJ,EAAQ,uDAAG,GAAI7F,EAAI,uDAAG,KAAM8F,EAAK,uCACnD,OAAO,IAAIP,OAAOC,OAAOC,KAAKM,OAAO,aACjCF,SAAUA,EACV7F,OACApD,OACGkJ,MAEV,0BAED,SAAqBlJ,EAAK0I,GAAqC,IAA7BU,EAAK,uDAAG,OAAQF,EAAK,uDAAG,GACtD,OAAO,IAAIP,OAAOC,OAAOC,KAAKQ,UAAU,aACpCC,YAAaF,EACbG,cAAe,GACfC,aAAc,EACdC,UAAWL,EACXM,YAAa,IACbhB,OAAQA,EAAOiB,aAAejJ,EAAakJ,YAAYlB,GAAUA,EACjE1I,OACGkJ,MAEV,yBAED,SAAoBlJ,EAAK8D,GAAmB,IAAboF,EAAK,uDAAG,GACnC,OAAO,IAAIP,OAAOC,OAAOC,KAAKgB,SAAS,aACnCP,YAAa,UACbC,cAAe,EACfC,aAAc,EACdM,UAAU,EACVhG,OACA9D,OACGkJ,MAEV,kCAED,WAA8C,IAAlBE,EAAK,uDAAG,QAC1BW,EAAe,8GACfC,EAAoB,IAAIrB,OAAOC,OAAOC,KAAKoB,MAAM,GAAI,GAG3D,MAAO,CACHnG,KAAMiG,EACNG,OAAQ,IAAIvB,OAAOC,OAAOC,KAAKoB,MAAM,GAAI,IACzCP,YAAa,EACbD,UAAWL,EACXI,aAAc,EACdF,YAAa,QACba,MAAO,EACPC,YAAaJ,KAEpB,yBAED,SAAoBtB,GAChB,MAAO,CACH7H,MAAO6H,EAAOiB,eAAe5C,MAC7BhG,MAAO2H,EAAO2B,eAAetD,MAC7BjG,KAAM4H,EAAOiB,eAAe3C,MAC5BhG,KAAM0H,EAAO2B,eAAerD,SAEnC,+BAED,SAA0BsD,GACtB,IAAMC,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC5EC,EAAqB,KAEzB,OAAGF,EAEKE,EADuB,IAAxBF,EAAahL,aAA0CmL,IAA1BH,EAAa,GAAGI,MACvBH,EAAKnJ,QAAO,SAAC+G,EAAQwC,GAAG,kCACtCxC,GAAM,kBACRwC,EAAM,CACHC,KAAM,QACNF,MAAO,aAEX,IAKaJ,EAAalJ,QAAQ,SAAC+G,EAAQ0C,GAAQ,kCACpD1C,GAAM,kBACRoC,EAAKM,EAASD,KAAKD,KAAO,CACvBC,KAAK,GAAD,OAAKC,EAASD,KAAKE,KAAKC,MAAM,EAAG,GAAE,YAAIF,EAASD,KAAKE,KAAKC,MAAM,EAAG,IACvEL,MAAM,GAAD,OAAKG,EAASH,MAAMI,KAAKC,MAAM,EAAG,GAAE,YAAIF,EAASH,MAAMI,KAAKC,MAAM,EAAG,SAE9E,IAKDP,MACV,EArP4B,GAAZ9J,EACVY,IAAM0J,2C,yICHIC,EAAkB,aACnC,aAAwB,IAAZ9L,EAAI,uDAAG,GAAE,oBACjBmE,KAAK4H,WAAa/L,EAAK+L,WACvB5H,KAAKhD,GAAKnB,EAAKmB,GACfgD,KAAKM,SAAW,IAAIP,IAAclE,EAAKyE,aCJ1BuH,EAAU,aAC3B,aAAwB,IAAZhM,EAAI,uDAAG,GAAE,oBACjBmE,KAAKhD,GAAKnB,EAAKmB,GACfgD,KAAKvD,KAAOZ,EAAKY,KACjBuD,KAAK3B,cAAgBxC,EAAKwC,cAC1B2B,KAAK2D,QAAU9H,EAAK8H,QACpB3D,KAAKc,WAAajF,EAAKiF,WAAa,IAAIpE,KAAK,SAAA4D,GAAQ,OAAI,IAAIqH,EAAmBrH,S,aCPxF,06MAsBuD,IAElCwH,EAAY,4CAoC5B,OApC4B,6EAC7B,WAAkBvG,GAAM,uFACEC,IAAMC,IAAIsG,IAAsB,CAClDxG,SACAI,iBAAkB,SAAAJ,GACd,OAAOK,IAAYjC,UAAU4B,MAElC,KAAD,EAEuE,OAPrEyG,EAAS,QAOHnM,KAAOmM,EAAUnM,KAAKa,KAAK,SAAAiH,GAAO,OAAI,IAAIkE,EAAWlE,MAAU,kBAElEqE,GAAS,2CACnB,mDAZ4B,IAY5B,yDAED,WAAkBC,GAAO,iEACA,OADA,KACVJ,EAAU,SAAOrG,IAAMC,IAAIyG,aAA0BD,IAAS,uGAC5E,mDAJA,IAIA,2DAED,WAAoBpM,GAAI,iEACC,OADD,KACTgM,EAAU,SAAOrG,IAAMO,KAAKoG,IAAwBtM,GAAK,uGACvE,mDAJA,IAIA,2DAED,WAAoBoM,EAASpM,GAAI,iEACR,OADQ,KAClBgM,EAAU,SAAOrG,IAAMW,IAAIiG,aAA4BH,GAAUpM,GAAK,uGACpF,qDAJA,IAIA,oEAED,WAA6BoM,EAASpM,GAAI,iFACzB2F,IAAMO,KAAKsG,aAAsCJ,GAAUpM,GAAM,KAAD,8EAChF,qDAJA,IAIA,oEAED,WAA6BoM,EAASzF,EAAa3G,GAAI,iFACtC2F,IAAMW,IAAImG,aAAoCL,EAASzF,GAAc3G,GAAM,KAAD,8EAC1F,uDAJA,IAIA,2DAED,WAAoBoM,GAAO,iFACVzG,IAAMS,OAAOsG,aAA4BN,IAAU,KAAD,8EAClE,mDAJA,MAIA,EApC4B","file":"static/js/43.6ca0308f.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport StateService from \"../../../../../services/admin/state.service\";\nimport GoogleClient from \"../../../../../utils/GoogleClient\";\nimport CityService from \"../../../../../services/admin/city.service\";\nimport {useParams} from \"react-router-dom\";\nimport {Button, List, Tooltip} from 'antd'\nimport {DeleteOutlined} from \"@ant-design/icons\";\n\nexport default function GenerateCity() {\n    const [cities, setCities] = useState(null);\n    const [equalGeometryCity, setEqualGeometryCity] = useState(null);\n    const {countryId} = useParams();\n\n    const generate = async (countryCode = \"PL\", minPopulation = 100000) => {\n        const isDemo = false;\n        const url = isDemo ? \"http://geodb-free-service.wirefreethought.com\" : \"https://wft-geo-db.p.rapidapi.com\"\n        const LIMIT_RATE = isDemo ? 10 : 100;\n\n        const headers = {\n            'X-RapidAPI-Key': '9b6599ddebmsh70080c0c4b276c4p172c5ajsn58e3d1228228',\n            'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n        }\n        let states = [];\n\n        for (let i = 0; ; i++) {\n            const resultState = await ((await fetch(`${url}/v1/geo/countries/${countryCode}/regions?limit=${LIMIT_RATE}&offset=${LIMIT_RATE * i}`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...headers\n                }\n            })).json())\n            console.log(i)\n            states = [...states, ...resultState.data]\n\n            const totalUploadState = LIMIT_RATE * (i + 1);\n            if (totalUploadState >= resultState.metadata.totalCount) {\n                break;\n            }\n        }\n\n        let cities = []\n\n        for (let i = 0; i < states.length; i++) {\n            const stateIso = states[i].isoCode;\n            for (let j = 0; ; j++) {\n                const resultCity = await ((await fetch(`${url}/v1/geo/countries/${countryCode}/regions/${stateIso}/cities?minPopulation=${minPopulation}&hateoasMode=false&limit=${LIMIT_RATE}&offset=${LIMIT_RATE * j}`, {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        ...headers\n                    }\n                })).json())\n                console.log(i)\n                cities = [...cities, ...resultCity.data\n                    .filter(city => city.type === \"CITY\")\n                    .filter(city => ![\"Białołęka\", \"Bemowo\", \"Żoliborz\", \"Włochy\", \"Ochota\", \"Ursus\", \"Wawer\", \"Mokotów\", \"Ursynów\", \"Wilanów\"].includes(city.name))\n                    .map(city => ({\n                        ...city,\n                        latitude: city.latitude,\n                        longitude: city.longitude,\n                        name: city.name.split(\" County\")[0],\n                    }))]\n\n                const totalUploadState = LIMIT_RATE * (j + 1);\n                if (totalUploadState >= resultCity.metadata.totalCount) {\n                    break;\n                }\n            }\n        }\n\n        console.log(\"Cities: \", cities)\n\n        let newEqualGeometryCity = {}\n\n        for (let i = 0; i < cities.length; i++) {\n            const city = cities[i];\n\n            const cityData = {\n                id: city.id,\n                name: city.name,\n            }\n\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const geometry = await GoogleClient.getGeometryForCity(city.latitude, city.longitude)\n            if (geometry) {\n                cityData.geometry = geometry;\n                cityData.latitude = city.latitude;\n                cityData.longitude = city.longitude;\n\n\n                const {north, east, south, west} = geometry;\n\n                const geometryKey = `${north}x${east}:${south}x${west}`\n                if (!newEqualGeometryCity[geometryKey]) {\n                    newEqualGeometryCity[geometryKey] = []\n                }\n\n                newEqualGeometryCity[geometryKey] = [\n                    ...newEqualGeometryCity[geometryKey],\n                    cityData,\n                ]\n            }\n            cities[i] = cityData\n        }\n\n        newEqualGeometryCity = Object.keys(newEqualGeometryCity).reduce((accum, key) => {\n            if (accum[key].length <= 1) {\n                delete accum[key]\n            }\n\n            return accum\n        }, newEqualGeometryCity)\n\n\n        console.log(cities)\n\n\n\n        setCities(cities)\n        setEqualGeometryCity(Object.keys(newEqualGeometryCity).length ? newEqualGeometryCity : null)\n    }\n\n    const deleteCity = (id, size) => {\n        let copyEqualGeometryCity = JSON.parse(JSON.stringify(equalGeometryCity))\n        copyEqualGeometryCity[size] = copyEqualGeometryCity[size].filter(city => city.id !== id)\n\n        if (copyEqualGeometryCity[size].length === 1) {\n            delete copyEqualGeometryCity[size]\n        }\n\n        if (!Object.keys(copyEqualGeometryCity).length) {\n            copyEqualGeometryCity = null;\n        }\n\n        setCities(cities.filter((city) => city.id !== id))\n\n        setEqualGeometryCity(copyEqualGeometryCity)\n    }\n\n    const createCity = async () => {\n        // const {id: stateId} = await StateService.create({\n        //     country_id: countryId,\n        //     state_name: \"TEST STATE FOR DELETE\"\n        // })\n\n        for (let i = 0; i < cities.length; i++) {\n            const city = cities[i];\n            console.log(city)\n\n            const cityRequest = {\n                state_id: 56,\n                city_name: city.name,\n                original_name: city.name,\n                generation_count_of_squares: 2,\n            }\n\n            await new Promise(resolve => setTimeout(resolve, 400))\n            if (city.geometry) {\n                cityRequest.geometry = city.geometry;\n                cityRequest.latitude = city.latitude;\n                cityRequest.longitude = city.longitude;\n            }\n\n            const {id: cityId} = await CityService.create({city: cityRequest})\n\n            console.log(`ID: ${cityId}. City: ${city}; ID_STAT: ${56}`)\n        }\n    }\n\n    return (\n        <div>\n            {cities && (\n                <div style={{fontSize: 20, fontWeight: 600, marginBottom: 30}}>\n                    Will be added {cities.length} cities\n                </div>\n            )}\n            {!cities && (\n                <Button type=\"primary\" onClick={() => generate(\"FR\", 100000)}>\n                    Generate cities\n                </Button>\n            )}\n            {equalGeometryCity && (\n                <div>\n                    <div style={{fontWeight: 600, marginBottom: 10}}>Equal Geometry City (U need stay only 1 city)</div>\n                    {Object.keys(equalGeometryCity).map(size => (\n                        <List\n                            key={size}\n                            style={{\n                                marginBottom: 10,\n                                border: `2px solid ${equalGeometryCity[size].length === 1 ? \"#6fda0c\" : \"red\"}`\n                            }}\n                            header={<div>{size}</div>}\n                            bordered\n                            dataSource={equalGeometryCity[size]}\n                            renderItem={(item) => (\n                                <List.Item>\n                                    {item.name}\n                                    <Tooltip title=\"Delete City\">\n                                        <Button onClick={() => deleteCity(item.id, size)} style={{marginLeft: 20}}\n                                                type=\"danger\" icon={<DeleteOutlined/>} size={\"small\"}/>\n                                    </Tooltip>\n                                </List.Item>\n                            )}\n                        />\n                    ))}\n                </div>\n            )}\n            {cities && !equalGeometryCity && (\n                <Button type=\"primary\" onClick={createCity}>\n                    Create {cities.length} cities\n                </Button>\n            )}\n        </div>\n    )\n}\n","export default class LanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.lang_code = data.lang_code;\n    }\n}\n","export default class CabModel {\n    constructor(data = {}) {\n        this.id =  data.id;\n        this.name = (data.name || \"\").trim();\n        this.phone_number = (data.phone_number || \"\").trim();\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CityLanguageModel {\n    constructor(data = {}) {\n        this.city_name = data.city_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n}\n","import MediaModel from '../media.model'\nimport CabModel from \"./cabs.model\";\nimport CityLanguageModel from \"./language.model\";\n\nconst portraitImage = {\n    id: null,\n    path: \"https://images.unsplash.com/photo-1629809189194-8302d4345c8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dWtyYWluZSUyMGZsYWd8ZW58MHx8MHx8&w=1000&q=80\"\n}\n\nconst landscapeImage = {\n    id: null,\n    path: \"https://media.istockphoto.com/photos/close-up-ukranian-flag-picture-id163641275?b=1&k=20&m=163641275&s=170667a&w=0&h=CVdqTfh31VTDbr7hqcBTbyocEZLlWTC02Kip6niMXBw=\"\n}\n\nexport default class CityModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.state = data.state;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.geometry = data.geometry;\n        this.work_status = data.work_status;\n        this.generation_count_of_squares = data.generation_count_of_squares;\n        this.original_name = data.original_name;\n        this.languages = (data.languages || []).map( language => new CityLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n        this.population = data.population;\n        this.landscape_image =  new MediaModel(data.landscape_image || landscapeImage);\n        this.portrait_image =  new MediaModel(data.portrait_image || portraitImage)\n        this.cabs = (data.cabs || []).map( cab => new CabModel(cab));\n    }\n}\n","export default class MediaModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.path = data.path;\n    }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_CITY_CREATE,\n    API_MAKE_ADMIN_CITY_DELETE,\n    API_ADMIN_CITY_LIST,\n    API_MAKE_ADMIN_CITY_TAXI_CREATE,\n    API_MAKE_ADMIN_CITY_SHOW,\n    API_MAKE_ADMIN_CITY_EDIT,\n    API_MAKE_ADMIN_CITY_TAXI_EDIT,\n    API_MAKE_ADMIN_CITY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_CITY_CHANGE_STATUS,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class CityService {\n    static async list(params) {\n        let cityList = await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n\n    static async show(cityId) {\n        return new CityModel(await axios.get(API_MAKE_ADMIN_CITY_SHOW(cityId)));\n    }\n\n    static async create(data) {\n        return new CityModel(await axios.post(API_ADMIN_CITY_CREATE, data));\n    }\n\n    static async delete(cityId) {\n        return await axios.delete(API_MAKE_ADMIN_CITY_DELETE(cityId))\n    }\n\n    static async update(cityId, data) {\n        return new CityModel(await axios.put(API_MAKE_ADMIN_CITY_EDIT(cityId), data));\n    }\n\n    static async createTaxi(cityId, data) {\n        return await axios.post(API_MAKE_ADMIN_CITY_TAXI_CREATE(cityId), data);\n    }\n\n    static async updateTaxi(cityId, cabId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TAXI_EDIT(cityId, cabId), data);\n    }\n\n    static async updateTranslate(cityId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TRANSLATE_EDIT(cityId, translateId), data);\n    }\n\n    static async updateWorkStatus(cityId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_CITY_CHANGE_STATUS(cityId), {work_status: workStatus});\n    }\n}\n\n","export default class ExcursionRouteTypeEnum{\n    static get walking(){ return \"walking\" }\n    static get driving(){ return \"driving\" }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList(params) {\n        let cityList =  await axios.get(ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class GoogleClient {\n    static key = process.env.REACT_APP_GEOCODING_API\n\n    static getGeometryForCity(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${this.key}`)\n            .then(res => res.json())\n            .then(city => {\n                console.log(city)\n                if (city.results[0]) {\n                    const {northeast, southwest} = city.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static getGeometryForCountry(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=country&key=${this.key}`)\n            .then(res => res.json())\n            .then(country => {\n                console.log(country)\n                if (country.results[0]) {\n                    const {northeast, southwest} = country.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static async getPhotoFile (photo_ref){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${this.key}`)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( photosList ){\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index < 3) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photoReference = shortPhotosList[i].photo_reference;\n            const file = await this.getPhotoFile(photoReference)\n\n            if (file.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static getPlaceDetails( placeId, fields, props = {} ){\n        const defaultFields = [\n            'international_phone_number',\n            'opening_hours',\n            'website',\n            'geometry',\n            'type',\n            'photo',\n            'formatted_address',\n            'address_components',\n            'name',\n            'place_id',\n        ]\n\n        console.log(placeId, fields)\n\n        const requestDetailPlace = {\n            placeId: placeId,\n            fields: fields || defaultFields\n        };\n\n        return fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${this.key}`)\n            .then(res => res.json())\n            .then(res => {\n                console.log(res)\n                if(res.status === \"OK\"){\n                    return res.result;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(res.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: res.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getDirection( params ){\n        const currentParams = {\n            key: this.key,\n            ...params,\n        }\n        const url = `https://maps.googleapis.com/maps/api/directions/json?${QueryString.stringify(currentParams)}`\n\n        return fetch(url)\n            .then(res => res.json())\n            .then(direction => {\n                if(direction.status === \"OK\"){\n                    return direction;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(direction.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: direction.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getBounds(north, south, east, west) {\n        const bounds = new window.google.maps.LatLngBounds();\n\n        bounds.extend(new window.google.maps.LatLng(north, east));\n        bounds.extend(new window.google.maps.LatLng(south, west));\n\n        return bounds;\n    }\n\n    static getMarker(map, position = {}, icon = null, props){\n        return new window.google.maps.Marker({\n            position: position,\n            icon,\n            map,\n            ...props\n        })\n    }\n\n    static getRectangle( map, bounds, color = \"blue\", props = {} ){\n        return new window.google.maps.Rectangle({\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: color,\n            fillOpacity: 0.35,\n            bounds: bounds.getNorthEast ? GoogleClient.parseBounds(bounds) : bounds,\n            map,\n            ...props,\n        });\n    }\n\n    static getPolyline( map, path, props = {} ){\n        return new window.google.maps.Polyline({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            geodesic: true,\n            path,\n            map,\n            ...props,\n        })\n    }\n\n    static generateCustomMarker(color = \"black\") {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    static parseBounds( bounds ){\n        return {\n            north: bounds.getNorthEast().lat(), //noth lat\n            south: bounds.getSouthWest().lat(), //south lat\n            east: bounds.getNorthEast().lng(), //noth lng\n            west: bounds.getSouthWest().lng() //south lng\n        }\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            if(openingHours.length === 1 && openingHours[0].close === undefined){\n                formatOpeningHours = days.reduce((result, day ) => ({\n                    ...result,\n                    [day]: {\n                        open: \"00:00\",\n                        close: \"00:00\"\n                    }\n                }), {})\n\n                return formatOpeningHours\n            }\n\n            formatOpeningHours = openingHours.reduce( (result, openHour) => ({\n                ...result,\n                [days[openHour.open.day]]: {\n                    open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                    close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                }\n            }), {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class StateLanguageModel {\n    constructor(data = {}) {\n        this.state_name = data.state_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n};\n","import StateLanguageModel from \"./language.model\";\n\nexport default class StateModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.original_name = data.original_name;\n        this.country = data.country;\n        this.languages = (data.languages || []).map( language => new StateLanguageModel(language));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_STATE_CREATE,\n    API_ADMIN_STATE_LIST,\n    API_MAKE_ADMIN_STATE_DELETE,\n    API_MAKE_ADMIN_STATE_SHOW,\n    API_MAKE_ADMIN_STATE_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_STATE_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_STATE_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport StateModel from \"../../model/State/state.model\";\n\nexport default class StateService {\n    static async list(params) {\n        let stateList = await axios.get(API_ADMIN_STATE_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        stateList.data = stateList.data.map( country => new StateModel(country));\n\n        return stateList;\n    }\n\n    static async show(stateId) {\n        return new StateModel(await axios.get(API_MAKE_ADMIN_STATE_SHOW(stateId)));\n    }\n\n    static async create(data) {\n        return new StateModel(await axios.post(API_ADMIN_STATE_CREATE, data));\n    }\n\n    static async update(stateId, data) {\n        return new StateModel(await axios.put(API_MAKE_ADMIN_STATE_UPDATE(stateId), data));\n    }\n\n    static async createTranslate(stateId, data) {\n        return await axios.post(API_MAKE_ADMIN_STATE_TRANSLATE_CREATE(stateId), data);\n    }\n\n    static async updateTranslate(stateId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_STATE_TRANSLATE_EDIT(stateId, translateId), data);\n    }\n\n    static async delete(stateId) {\n        return await axios.delete(API_MAKE_ADMIN_STATE_DELETE(stateId));\n    }\n}\n\n"],"sourceRoot":""}