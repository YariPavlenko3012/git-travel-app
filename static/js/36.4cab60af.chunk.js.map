{"version":3,"sources":["pages/admin/pages/GeneratePlace/components/PlaceTypes/index.module.scss","services/admin/generationPlace.service.js","enums/GenerationType.js","pages/admin/pages/GeneratePlace/components/AutomaticContent/index.jsx","pages/admin/pages/GeneratePlace/components/ManualContent/index.jsx","pages/admin/pages/GeneratePlace/components/PlaceTypes/index.jsx","pages/admin/pages/GeneratePlace/components/CustomContent/index.jsx","pages/admin/pages/GeneratePlace/components/RadioGenerationType/index.jsx","enums/PlaceTypeSquare.js","pages/admin/pages/GeneratePlace/index.jsx","model/language.model.js","model/media.model.js","model/City/cabs.model.js","model/City/language.model.js","model/City/city.model.js","model/Sight/language.model.js","model/Sight/sight.model.js","services/admin/sight.service.js","services/admin/city.service.js","enums/PlaceType.js","model/currency.model.js","utils/PlaceTypeTranslate.js","model/Country/language.model.js","model/Country/country.model.js","services/admin/country.service.js"],"names":["module","exports","GenerationPlaceService","data","axios","post","ADMIN_CREATE_SQUARE_GENERATE_PLACE","url","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","params","get","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","paramsSerializer","QueryString","stringify","ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE","cityList","map","city","CityModel","GenerationTypeEnums","AutomaticContent","generatePlacesByCity","typeColor","countryId","generationFinishCity","dictionary","useContext","DictionaryContext","startAutomaticGenerate","cityWhiteList","country_id","type","automatic","per_page","dataSort","filter","id","console","log","i","length","place_types","value","failed","style","display","gap","alignItems","onClick","width","flexDirection","marginTop","Object","keys","height","backgroundColor","PlaceTypeTranslate","getTranslateForType","ManualContent","mapRef","useState","setCity","setCityList","getCity","cityId","CityService","show","getCityList","manual","label","name","startManualGenerate","useEffect","window","google","maps","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","current","bounds","north","geometry","south","east","west","marginBottom","disabled","margin","size","placeholder","options","showSearch","minWidth","filterOption","text","textLowerCase","trim","toLowerCase","labelLowerCase","valueLowerCase","toString","includes","onChange","Park","setPlaceTypes","placeTypes","places","className","styles","typeWrapper","typeWrapper__type","active","PlaceTypeEnum","amusement_park","aquarium","tourist_attraction","zoo","restaurant","getRectangle","setGeometry","rectangle","useRef","timeOutId","allGeneratedSquare","generateSquareByGeometry","drawSquareByPlaceType","forEach","square","setMap","generatedSquare","eq","center","getCenter","squareSize","lat","maxHorizontalDif","lng","maxVerticalDif","draggable","editable","addListener","clearTimeout","setTimeout","getBounds","ne","getNorthEast","sw","getSouthWest","centerHorizontalLat","centerVerticalLng","newGeometry","errorDifHorizontal","errorDifVertical","setOptions","list","RadioGenerationType","generationType","setGenerationType","Group","e","target","defaultValue","custom","PlaceTypeSquareEnum","campground","embassy","art_gallery","museum","days","GeneratePlace","useParams","country","setCountry","mapBlockRef","squareRef","key","mapInit","opt","zoom","restriction","latLngBounds","strictBounds","Map","generateMarker","color","pinSVGFilled","labelOriginFilled","Point","path","anchor","scale","labelOrigin","getPhotos","photo_ref","Promise","resolve","downloadImage","file","getPlaces","service","PlacesService","lastType","forLoop","_","requestNearbySearch","types","placesToDB","json","reject","nearbySearch","status","pagination","message","create","currentPlace","requestDetailPlace","placeId","place_id","fields","fetch","join","placeDetailRes","placeDetail","place","result","placeToBd","city_id","website","international_phone_number","sight_name","original_name","formatted_address","google_place_id","place_type","opening_hours","periods","undefined","close","reduce","day","open","openHour","time","slice","photosList","photos","index","latitude","location","longitude","files_ids","photoReference","photo_reference","formattedTypeColor","Marker","position","icon","hasNextPage","nextPage","SightService","createBatch","LatLngBounds","extend","LatLng","currentI","currentJ","currentType","countStep","generation_count_of_squares","placeHeightCoordinate","placeWidthCoordinate","stepHorizontal","stepVertical","indexI","indexJ","finish","getCountry","CountryService","ref","paddingTop","LanguageModel","this","lang_code","MediaModel","CabModel","phone_number","CityLanguageModel","city_name","language","description","state","work_status","languages","images","image","population","landscape_image","portrait_image","cabs","cab","SightLanguageModel","sight_description","SightModel","number_of_views","check_coordinates","need_review","sightId","API_MAKE_ADMIN_SIGHT_SHOW","API_ADMIN_SIGHT_LIST","sightList","sight","API_ADMIN_SIGHT_CREATE","API_ADMIN_SIGHT_CREATE_BATCH","put","API_MAKE_ADMIN_SIGHT_UPDATE","delete","API_MAKE_ADMIN_SIGHT_DELETE","API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE","translateId","API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_SIGHT_CHANGE_STATUS","API_MAKE_ADMIN_SIGHT_NEED_REVIEW","API_MAKE_ADMIN_SIGHT_GET_CITIES","API_ADMIN_CITY_LIST","API_MAKE_ADMIN_CITY_SHOW","API_ADMIN_CITY_CREATE","API_MAKE_ADMIN_CITY_DELETE","API_MAKE_ADMIN_CITY_EDIT","API_MAKE_ADMIN_CITY_TAXI_CREATE","cabId","API_MAKE_ADMIN_CITY_TAXI_EDIT","API_MAKE_ADMIN_CITY_TRANSLATE_EDIT","API_MAKE_ADMIN_CITY_CHANGE_STATUS","googleTypesListManual","googleTypesListAutomatic","park","reserve","botanical_garden","beach","mountains","sea","church","mosque","lake","customTypesList","googleTypesList","CurrencyModel","currency_code","city_hall","CountryLanguageModel","country_description","country_name","CountryModel","country_code_in_iso_3166_1_format","official_language","capital","currency","ambulance_number","has_seas","has_mountains","happiness_rating","highest_point","country_area","safety_index","API_ADMIN_COUNTRY_LIST","countryList","API_MAKE_ADMIN_COUNTRY_SHOW","API_ADMIN_COUNTRY_CREATE","API_MAKE_ADMIN_COUNTRY_UPDATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT","API_MAKE_ADMIN_COUNTRY_DELETE"],"mappings":"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","file":"static/js/36.4cab60af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeWrapper\":\"PlaceTypes_typeWrapper__3EtcN\",\"typeWrapper__type\":\"PlaceTypes_typeWrapper__type__2FMIs\",\"active\":\"PlaceTypes_active__3e-DI\"};","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList(params) {\n        let cityList =  await axios.get(ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","export default class GenerationTypeEnums{\n    static get automatic(){ return \"automatic\" }\n    static get manual(){ return \"manual\" }\n    static get custom(){ return \"custom\" }\n}\n","/**\n * external libs\n */\nimport React, {useContext} from 'react';\nimport {Button} from 'antd';\n/**\n * services\n */\nimport GenerationPlaceService from \"../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../enums/GenerationType\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../utils/PlaceTypeTranslate\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../context/dictionary.context\";\n\n\nexport default function AutomaticContent({ generatePlacesByCity, typeColor, countryId, generationFinishCity }){\n    const {dictionary} = useContext(DictionaryContext)\n\n    const startAutomaticGenerate = async () => {\n        const {data} = await GenerationPlaceService.cityWhiteList({\n            country_id: countryId,\n            type: GenerationTypeEnums.automatic,\n            per_page: 1000000\n        })\n\n        const dataSort = data.filter(({id}) => 224 === id)\n        console.log(dataSort)\n\n        for (let i = 0; i < dataSort.length; i++) {\n            const city = dataSort[i];\n\n            const {failed} = await generatePlacesByCity(city, dictionary.place_types.automatic.map(({value}) => value))\n\n            if (failed) {\n                console.log('failed END')\n                return;\n            }\n\n            console.log('FINISH')\n            await generationFinishCity(city.id, GenerationTypeEnums.automatic, dictionary.place_types.automatic.map(({value}) => value))\n        }\n\n        console.log(\"END\")\n\n        return;\n    }\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\"}}>\n                <Button type=\"primary\" onClick={() => startAutomaticGenerate(1)} style={{width: \"100%\"}}>Automatic generation</Button>\n\n            </div>\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginTop: 10}}>\n                {Object.keys(typeColor).map(type => {\n                    return (\n                        <div style={{display: \"flex\", alignItems: \"center\"}}>\n                            <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                            <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, { useState, useEffect, useContext } from 'react';\nimport {Button, Select} from 'antd';\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../utils/PlaceTypeTranslate\";\n/**\n * services\n */\nimport CityService from \"../../../../../../services/admin/city.service\";\nimport GenerationPlaceService from \"../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../enums/GenerationType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../context/dictionary.context\";\n\nexport default function ManualContent({ generatePlacesByCity, countryId, typeColor, generationFinishCity, mapRef }){\n    const [city, setCity] = useState(null)\n    const [cityList, setCityList] = useState(null)\n    const {dictionary} = useContext(DictionaryContext)\n\n    const getCity = async (cityId) => {\n        setCity(await CityService.show(cityId))\n    }\n\n    const getCityList = async () => {\n        const { data } = await GenerationPlaceService.cityWhiteList({\n            country_id: countryId,\n            type: GenerationTypeEnums.manual,\n            per_page: 1000000\n        })\n\n        setCityList(data.map(({id, name}) => ({value: id, label: name})));\n    }\n\n    const startManualGenerate = async () => {\n        if(!city){\n            return;\n        }\n\n        const {failed} = await generatePlacesByCity(city, dictionary.place_types.manual.map(({value}) => value))\n\n        if (failed) {\n            console.log('failed END')\n            return;\n        }\n\n        await generationFinishCity(city.id, GenerationTypeEnums.manual, dictionary.place_types.manual.map(({value}) => value))\n    }\n\n    useEffect(() => {\n        if (!city) {\n            return\n        }\n\n        new window.google.maps.Rectangle({\n            strokeColor: \"#001529\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#001529\",\n            fillOpacity: 0.35,\n            map: mapRef.current,\n            bounds: {\n                north: city.geometry.north, //noth lat\n                south: city.geometry.south, //south lat\n                east: city.geometry.east, //noth lng\n                west: city.geometry.west, //south lng\n            },\n        });\n    }, [city])\n\n    useEffect(() => {\n        getCityList()\n    }, [])\n\n\n    if(!cityList){\n        return null\n    }\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\", marginBottom: -10}}>\n                <Button type=\"primary\" onClick={startManualGenerate} disabled={city === null} style={{width: \"100%\"}}>Manual generation</Button>\n            </div>\n            <div style={{margin: \"20px 0\"}}>\n                <Select\n                    size=\"large\"\n                    placeholder={\"Select city\"}\n                    options={cityList}\n                    showSearch={true}\n                    style={{minWidth: \"100%\"}}\n                    filterOption={(text, {value, label}) => {\n                        const textLowerCase = text.trim().toLowerCase()\n                        const labelLowerCase = label.toLowerCase()\n                        const valueLowerCase = value.toString().toLowerCase()\n                        return labelLowerCase.includes(textLowerCase) || valueLowerCase.includes(text)\n                    }}\n                    onChange={getCity}\n                />\n            </div>\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginBottom: 10}}>\n                {Object.keys(typeColor).map(type => (\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                        <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useState} from 'react';\n/**\n * styles\n */\nimport styles from \"./index.module.scss\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../utils/PlaceTypeTranslate\";\n\nexport default function Park({setPlaceTypes, placeTypes, places}) {\n    return (\n        <div className={styles.typeWrapper}>\n            {places.map( type => (\n                <div className={`${styles.typeWrapper__type} ${placeTypes === type && styles.active}`} onClick={() => setPlaceTypes(type)}>\n                    {PlaceTypeTranslate.getTranslateForType(type)}\n                </div>\n            ))}\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useContext, useRef, useState} from 'react';\nimport {Button, Form, Radio} from 'antd';\n/**\n * components\n */\nimport PlaceType from \"../PlaceTypes\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../utils/PlaceTypeTranslate\";\n/**\n * enums\n */\nimport GenerationPlaceService from \"../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport PlaceTypeEnum from \"../../../../../../enums/PlaceType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../context/dictionary.context\";\n\nconst typeColor = {\n    [PlaceTypeEnum.amusement_park]: \"green\",\n    [PlaceTypeEnum.aquarium]: \"red\",\n    [PlaceTypeEnum.tourist_attraction]: \"gray\",\n    [PlaceTypeEnum.zoo]: \"black\",\n    [PlaceTypeEnum.restaurant]: \"blue\",\n}\n\nexport default function AutomaticContent({ getRectangle, countryId, mapRef }){\n    const {dictionary} = useContext(DictionaryContext)\n    const [placeTypes, setPlaceTypes] = useState(null)\n    const [geometry, setGeometry] = useState(null)\n    const rectangle = useRef(null)\n    const timeOutId = useRef(null)\n    const allGeneratedSquare = useRef([])\n\n    const generateSquareByGeometry = async () => {\n        //KIYV\n        new window.google.maps.Rectangle({\n            strokeColor: \"blue\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"blue\",\n            fillOpacity: 0.35,\n            map: mapRef.current,\n            bounds: {\n                north: 50.590798, //noth lat\n                south: 50.213273, //south lat\n                east: 30.825941, //noth lng\n                west: 30.2394401, //south lng\n            },\n        });\n\n        // const {failed, message, type} = await getRectangle(\n        //     {\n        //         geometry,\n        //         cityId: null,\n        //         placeTypes: placeTypes\n        //     }\n        // )\n        //\n        // if (failed) {\n        //     // socket.emit('pushLog', {\n        //     //     success: false,\n        //     //     cityId: city.id,\n        //     //     geometry_square: {\n        //     //       ...geometry\n        //     //     },\n        //     //     message,\n        //     //     type,\n        //     // });\n        //\n        //     return {failed: true}\n        // }\n\n        // rectangle.current.setOptions({\n        //     editable: false,\n        //     draggable: false,\n        // })\n    }\n\n    const  drawRec = () => {\n        const center =  mapRef.current.getCenter();\n        const maxHorizontalDif  = 0.4;\n        const maxVerticalDif = 0.6;\n\n        const squareSize = {\n            north: center.lat() + maxHorizontalDif / 2, //noth lat\n            south: center.lat() - maxHorizontalDif / 2, //south lat\n            east: center.lng() + maxVerticalDif / 2, //noth lng = 0.05\n            west: center.lng() - maxVerticalDif / 2, //south lng = 0.05\n        };\n\n        rectangle.current = new window.google.maps.Rectangle({\n            bounds: squareSize,\n            draggable: true,\n            editable: true,\n            map: mapRef.current,\n        });\n\n        rectangle.current.addListener(\"bounds_changed\", () => {\n            clearTimeout(timeOutId.current);\n            timeOutId.current = setTimeout(() => {\n                const bounds = rectangle.current.getBounds()\n                const ne = bounds.getNorthEast();\n                const sw = bounds.getSouthWest();\n                const center = bounds.getCenter();\n                const centerHorizontalLat = center.lat();\n                const centerVerticalLng = center.lng();\n\n                let newGeometry = {\n                    north: ne.lat(),\n                    south: sw.lat(),\n                    east: ne.lng(),\n                    west: sw.lng(),\n                }\n\n                if(geometry && geometry.north === newGeometry.north && geometry.east === newGeometry.east && geometry.west === newGeometry.west && geometry.south === newGeometry.south){\n                    return;\n                }\n\n                const difHorizontal = newGeometry.north - newGeometry.south;\n                const difVertical = newGeometry.east - newGeometry.west;\n\n                const errorDifHorizontal = maxHorizontalDif < difHorizontal;\n                const errorDifVertical = maxVerticalDif < difVertical;\n\n                if(errorDifHorizontal){\n                    newGeometry = {\n                        ...newGeometry,\n                        north: centerHorizontalLat - maxHorizontalDif / 2,\n                        south: centerHorizontalLat + maxHorizontalDif / 2,\n                    }\n                }\n                if(errorDifVertical){\n                    newGeometry = {\n                        ...newGeometry,\n                        west: centerVerticalLng - maxVerticalDif / 2,\n                        east: centerVerticalLng + maxVerticalDif / 2,\n                    }\n                }\n\n                if(errorDifHorizontal || errorDifVertical){\n                    setGeometry(newGeometry)\n                    rectangle.current.setOptions({\n                        bounds: newGeometry\n                    })\n                }\n            },500);\n        });\n    }\n\n    const  close = () => {\n\n    }\n\n    const drawSquareByPlaceType = async () => {\n        if(!placeTypes){\n            return;\n        }\n\n        allGeneratedSquare.current.forEach(( square ) => {\n            square.setMap(null)\n        })\n\n        const {data} = await GenerationPlaceService.generatedSquare({\n            eq: {\n                country_id: countryId,\n                type: placeTypes\n            },\n            per_page: 1000000,\n        });\n\n\n        allGeneratedSquare.current = data.map(({geometry}) => (\n            new window.google.maps.Rectangle({\n                strokeColor: \"blue\",\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: \"blue\",\n                fillOpacity: 0.35,\n                map: mapRef.current,\n                bounds: geometry,\n            })\n        ))\n    }\n\n    useEffect(() => {\n       drawSquareByPlaceType()\n    }, [placeTypes])\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\"}}>\n                <Button type=\"primary\" onClick={generateSquareByGeometry} style={{width: \"100%\"}}>Custom generation</Button>\n                <Button type=\"primary\" onClick={drawRec} style={{width: \"100%\"}}>Draw</Button>\n                <Button type=\"primary\" onClick={close} style={{width: \"100%\"}}>close</Button>\n            </div>\n            <PlaceType places={dictionary.place_types.list.map(({value}) => value)}\n                       setPlaceTypes={setPlaceTypes}\n                       placeTypes={placeTypes}\n            />\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginBottom: 10}}>\n                {Object.keys(typeColor).map(type => (\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                        <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, { useState } from 'react';\nimport { Radio } from 'antd';\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../enums/GenerationType\";\n\nexport default function RadioGenerationType({generationType, setGenerationType}){\n    return (\n        <Radio.Group onChange={e => setGenerationType(e.target.value)} defaultValue={generationType}>\n            <Radio value={GenerationTypeEnums.automatic}>Automatic</Radio>\n            <Radio value={GenerationTypeEnums.manual}>Manual</Radio>\n            <Radio value={GenerationTypeEnums.custom}>Custom</Radio>\n        </Radio.Group>\n    )\n}\n","export default class PlaceTypeSquareEnum{\n    static get amusement_park() {return 1}\n    static get art_gallery() {return 2}\n    static get campground() {return 2}\n    static get church() {return 1}\n    static get city_hall() {return 1}\n    static get mosque() {return 1}\n    static get embassy() {return 2}\n    static get park() {return 1}\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useContext, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\n/**\n * components\n */\nimport AutomaticContent from './components/AutomaticContent'\nimport ManualContent from './components/ManualContent'\nimport CustomContent from './components/CustomContent'\nimport RadioGenerationType from './components/RadioGenerationType'\n/**\n * enums\n */\nimport PlaceTypeEnum from '../../../../enums/PlaceType'\nimport GenerationTypeEnums from \"../../../../enums/GenerationType\";\nimport PlaceTypeSquareEnum from \"../../../../enums/PlaceTypeSquare\";\n/**\n * service\n */\nimport GenerationPlaceService from \"../../../../services/admin/generationPlace.service\";\nimport SightService from \"../../../../services/admin/sight.service\";\nimport CountryService from \"../../../../services/admin/country.service\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../context/dictionary.context\";\n\n// const socket = io('http://localhost:3002', {\n//     extraHeaders: {\n//         Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY2OTY2MDk4OX0.HNw9gf9X8nhVH5UUfQEyujpXMPb5YJpzAi5fYUz-UD0`\n//     }\n// });\n\n\nconst typeColor = {\n    [GenerationTypeEnums.automatic]: {\n        [PlaceTypeEnum.campground]: \"red\",\n        [PlaceTypeEnum.embassy]: \"#650abf\",\n        [PlaceTypeEnum.art_gallery]: \"green\",\n        [PlaceTypeEnum.museum]: \"#ff8600\",\n    },\n    [GenerationTypeEnums.manual]: {\n        [PlaceTypeEnum.amusement_park]: \"green\",\n        [PlaceTypeEnum.aquarium]: \"red\",\n        [PlaceTypeEnum.tourist_attraction]: \"gray\",\n        [PlaceTypeEnum.zoo]: \"black\",\n        [PlaceTypeEnum.restaurant]: \"blue\",\n    }\n}\n\nconst days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\nexport default function GeneratePlace() {\n    const {dictionary} = useContext(DictionaryContext)\n    const {countryId} = useParams();\n    const [generationType, setGenerationType] = useState(GenerationTypeEnums.automatic)\n    const [country, setCountry] = useState(null)\n    const mapBlockRef = useRef(null);\n    const squareRef = useRef(null);\n    const mapRef = useRef(null);\n    const key = \"AIzaSyApPL4vfjbQ_iVFrfE-97KN-ncf8i1NDLU\";\n\n    const mapInit = async (geometry = {}) => {\n        const opt = {\n            center: {lat: 51.514316, lng: -0.129761},\n            zoom: 4,\n            restriction: {\n                latLngBounds: {\n                    ...geometry\n                },\n                strictBounds: true\n            },\n        }\n\n\n\n        mapRef.current = new window.google.maps.Map(mapBlockRef.current, opt)\n    }\n\n    const generateMarker = (color = \"#ffffff\") => {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {  // https://developers.google.com/maps/documentation/javascript/reference/marker#MarkerLabel\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    const getPhotos = async (photo_ref) => {\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const [file] = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${key}`)\n            console.log(file?.id, \"file\")\n            return file?.id || null\n        } catch (e) {\n            return null\n        }\n    }\n    const getPlaces = async (bounds, cityId, type) => {\n        const service = new window.google.maps.places.PlacesService(mapRef.current);\n        let lastType = null;\n\n        const forLoop = async _ => {\n            const geometry = {\n                north: bounds.getNorthEast().lat(), //noth lat\n                south: bounds.getSouthWest().lat(), //south lat\n                east: bounds.getNorthEast().lng(), //noth lng\n                west: bounds.getSouthWest().lng(), //south lng\n            }\n            lastType = type;\n\n            const requestNearbySearch = {\n                bounds,\n                types: [type],\n            }\n            let placesToDB = [];\n            await new Promise(resolve => setTimeout(() => resolve(), 1000))\n\n            const isGenerate = await GenerationPlaceService.generatedSquare({\n                json: { geometry },\n                eq: { type }\n            })\n\n            if(isGenerate.data.length){\n                return {failed: false};\n            }\n\n            await new Promise((resolve, reject) => {\n                service.nearbySearch(requestNearbySearch, async (places, status, pagination) => {\n                    if (![\"ZERO_RESULTS\", \"OK\"].includes(status)) {\n                        reject({\n                            message: `Google status error: ${status}`,\n                        })\n                    }\n\n                    if(!places.length){\n                        await GenerationPlaceService.create({\n                            country_id: countryId,\n                            geometry,\n                            type\n                        });\n                        resolve()\n                    }\n\n                    for (let i = 0; i < places.length; i++) {\n                        try {\n                            const currentPlace = places[i];\n                            const requestDetailPlace = {\n                                placeId: currentPlace.place_id,\n                                fields: [\n                                    'international_phone_number',\n                                    'opening_hours',\n                                    'website',\n                                    'geometry',\n                                    'type',\n                                    'photo',\n                                    'formatted_address',\n                                    'address_components',\n                                    'name',\n                                    'place_id',\n                                ]\n                            };\n                            const placeDetailRes = (await fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${key}`)).json()\n                            const placeDetail = await placeDetailRes\n                            const place = placeDetail ? placeDetail.result : currentPlace;\n\n                            if (!place) {\n                                continue\n                            }\n\n                            let placeToBd = {\n                                city_id: cityId,\n                                country_id: countryId,\n                                website: place.website && place.website.length < 255 ?  place.website : null,\n                                international_phone_number: place.international_phone_number || null,\n                                sight_name: place.name,\n                                original_name: place.name,\n                                formatted_address: place.formatted_address,\n                                google_place_id: place.place_id,\n                                place_type: place.types.filter( type => {\n                                    return dictionary.place_types.list\n                                        .map(({value}) => value)\n                                        .includes(type)\n                                }),\n                                opening_hours: place.opening_hours?.periods || null,\n                            }\n\n                            if(placeToBd.opening_hours){\n                                if(placeToBd.opening_hours.length === 1 && placeToBd.opening_hours[0].close === undefined){\n                                    placeToBd.opening_hours = days.reduce((result, day ) => ({\n                                        ...result,\n                                        [day]: {\n                                            open: \"00:00\",\n                                            close: \"00:00\"\n                                        }\n                                    }), {})\n                                }\n                                else{\n                                    placeToBd.opening_hours = placeToBd.opening_hours.reduce( (result, openHour) => ({\n                                        ...result,\n                                        [days[openHour.open.day]]: {\n                                            open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                                            close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                                        }\n                                    }), {})\n                                }\n                            }\n\n                            if (placeDetail) {\n                                const photosList = place.photos?.filter((_, index) => index < 3) || [];\n                                placeToBd = {\n                                    ...placeToBd,\n                                    latitude: place.geometry.location.lat,\n                                    longitude: place.geometry.location.lng,\n                                    files_ids: [],\n                                }\n\n                                if (photosList.length) {\n                                    for (let i = 0; i < photosList.length; i++) {\n                                        const photoReference = photosList[i].photo_reference;\n                                        const id = await getPhotos(photoReference)\n                                        if (id) {\n                                            placeToBd.files_ids = [...placeToBd.files_ids, id]\n                                        }\n                                    }\n                                }\n                            }\n\n                            if (!placeDetail) {\n                                placeToBd = {\n                                    ...placeToBd,\n                                    latitude: place.geometry.location.lat(),\n                                    longitude: place.geometry.location.lng(),\n                                    files_ids: [],\n                                }\n                            }\n\n\n                            const formattedTypeColor = {\n                                ...typeColor[GenerationTypeEnums.automatic],\n                                ...typeColor[GenerationTypeEnums.manual],\n                            }\n\n                            new window.google.maps.Marker({\n                                position: {\n                                    lat: placeToBd.latitude,\n                                    lng: placeToBd.longitude\n                                },\n                                icon: generateMarker(formattedTypeColor[type]),\n                                map: mapRef.current,\n                            })\n\n                            console.log(placeToBd)\n\n                            placesToDB = [...placesToDB, placeToBd]\n\n                            if (i + 1 === places.length) {\n                                if (pagination && pagination.hasNextPage) {\n                                    pagination.nextPage()\n                                    return;\n                                }\n\n                                await SightService.createBatch(placesToDB)\n\n                                await GenerationPlaceService.create({\n                                    country_id: countryId,\n                                    geometry,\n                                    type\n                                })\n\n                                //WRITE TO BS ALL PLACE []\n                                console.log(placesToDB, \"placesToDB\")\n\n                                // socket.emit('pushLog', {\n                                //     success: true,\n                                //     cityId: cityId,\n                                //     sights: placesToDB,\n                                //     geometry_square: {\n                                //         north: bounds.getNorthEast().lat(), //noth lat\n                                //         south: bounds.getSouthWest().lat(), //south lat\n                                //         east: bounds.getNorthEast().lng(), //noth lng\n                                //         west: bounds.getSouthWest().lng(), //south lng\n                                //     },\n                                //     type,\n                                // });\n\n                                resolve()\n                            }\n                        } catch (error) {\n                            return reject({\n                                message: error.message,\n                            })\n                        }\n                    }\n                });\n            })\n\n            return {failed: false};\n        }\n\n        try {\n            return await forLoop()\n        }\n        catch (error) {\n            return {\n                failed: true,\n                message: error.message,\n                type: lastType\n            };\n        }\n    }\n    const getRectangle = async ({geometry, cityId, type}) => {\n        try {\n            const {north, south, east, west} = geometry;\n            const bounds = new window.google.maps.LatLngBounds();\n\n            bounds.extend(new window.google.maps.LatLng(north, east));\n            bounds.extend(new window.google.maps.LatLng(south, west));\n\n            //\n            // console.log({\n            //     north: bounds.getNorthEast().lat(), //noth lat\n            //     south: bounds.getSouthWest().lat(), //south lat\n            //     east: bounds.getNorthEast().lng(), //noth lng\n            //     west: bounds.getSouthWest().lng(), //south lng\n            // })\n\n            if(squareRef.current){\n                squareRef.current.setMap(null)\n            }\n\n            squareRef.current =  new window.google.maps.Rectangle({\n                strokeColor: \"blue\",\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: \"blue\",\n                fillOpacity: 0.35,\n                map: mapRef.current,\n                bounds: {\n                    north: bounds.getNorthEast().lat(), //noth lat\n                    south: bounds.getSouthWest().lat(), //south lat\n                    east: bounds.getNorthEast().lng(), //noth lng\n                    west: bounds.getSouthWest().lng(), //south lng\n                },\n            });\n\n            return await getPlaces(bounds, cityId, type)\n        } catch (e) {\n            // socket.emit('pushLog', {\n            //     success: false,\n            //     cityId: cityId,\n            //     geometry_square: {\n            //         north: geometry.north, //noth lat\n            //         south: geometry.south, //south lat\n            //         east: geometry.east, //noth lng\n            //         west: geometry.west, //south lng\n            //     },\n            //     message: e.message,\n            //     type: null,\n            // });\n            return {\n                failed: true,\n                message: e.message,\n                type: null\n            }\n        }\n\n    }\n    const generatePlacesByCity = async (city, placeTypes = []) => {\n        if (!city.geometry || !placeTypes.length) {\n            return {failed: false};\n        }\n\n        let currentI = 1;\n        let currentJ = 1;\n\n        const forLoop = async _ => {\n            for(let i = 0; i < placeTypes.length; i++){\n                const currentType = placeTypes[i];\n\n                const countStep = PlaceTypeSquareEnum[currentType] || city.generation_count_of_squares;\n\n                const placeHeightCoordinate = city.geometry.north - city.geometry.south;\n                const placeWidthCoordinate = city.geometry.east - city.geometry.west;\n\n                const stepHorizontal = placeWidthCoordinate / countStep;\n                const stepVertical = placeHeightCoordinate / countStep;\n\n                currentI = 1;\n                for (currentI; currentI <= countStep; currentI++) {\n                    currentJ = 1;\n                    for (currentJ; currentJ <= countStep; currentJ++) {\n                        console.log(`index: ${currentI}; jndex ${currentJ}`)\n                        await new Promise(resolve => setTimeout(resolve, 500))\n                        const {failed, message, type} = await getRectangle(\n                            {\n                                geometry: {\n                                    north: city.geometry.south + (stepVertical * currentI),\n                                    east: city.geometry.west + (stepHorizontal * currentJ),\n                                    south: city.geometry.south + (stepVertical * (currentI - 1)),\n                                    west: city.geometry.west + (stepHorizontal * (currentJ - 1)),\n                                },\n                                cityId: city.id,\n                                type: currentType,\n                            }\n                        )\n\n                        if (failed) {\n                            // socket.emit('pushLog', {\n                            //     success: false,\n                            //     cityId: city.id,\n                            //     geometry_square: {\n                            //         north: city.geometry.north, //noth lat\n                            //         south: city.geometry.south, //south lat\n                            //         east: city.geometry.east, //noth lng\n                            //         west: city.geometry.west, //south lng\n                            //     },\n                            //     indexI: currentI,\n                            //     indexJ: currentJ,\n                            //     message,\n                            //     type,\n                            // });\n\n                            return {failed: true}\n                        }\n                    }\n                }\n            }\n\n            if(squareRef.current){\n                squareRef.current.setMap(null)\n            }\n\n            return {failed: false}\n        }\n\n        try {\n            return await forLoop()\n        } catch (e) {\n            // socket.emit('pushLog', {\n            //     success: false,\n            //     cityId: city.id,\n            //     geometry_square: {\n            //         north: city.geometry.north, //noth lat\n            //         south: city.geometry.south, //south lat\n            //         east: city.geometry.east, //noth lng\n            //         west: city.geometry.west, //south lng\n            //     },\n            //     message: e.message,\n            //     type: null,\n            //     indexI: currentI,\n            //     indexJ: currentJ,\n            // });\n            if(squareRef.current){\n                squareRef.current.setMap(null)\n            }\n\n            return {\n                failed: true,\n                city_id: city.id,\n                message: e.message,\n                type: null,\n                indexI: currentI,\n                indexJ: currentJ,\n            };\n        }\n    }\n\n    const generationFinishCity = async (cityId, generationType, placeTypes) => {\n        await GenerationPlaceService.finish({\n            \"city_id\": cityId,\n            \"generation_type\": generationType,\n            \"types\": placeTypes\n        })\n    }\n\n    const getCountry = async () => {\n        const country = await CountryService.show(countryId)\n        setCountry(country)\n    }\n\n    useEffect(() => {\n        getCountry()\n    }, [])\n\n    // useEffect(() => {\n    //     socket.on('connect', () => {\n    //         console.log(socket, \"socket\")\n    //         socket.on('logs', console.log)\n    //     });\n    // }, [])\n\n    useEffect(() => {\n        if(!generationType || !country?.geometry){\n            return;\n        }\n\n        mapInit(country.geometry)\n    }, [generationType, country?.geometry])\n\n    return (\n        <div>\n\n            <div style={{display: \"flex\", gap: 50}}>\n                <div ref={mapBlockRef} style={{width: \"70%\", height: 500}}/>\n                <div style={{width: \"30%\"}}>\n                    <RadioGenerationType generationType={generationType}\n                                         setGenerationType={setGenerationType}/>\n                        <div style={{paddingTop: 20}}>\n                            {generationType === GenerationTypeEnums.automatic && (\n                                <AutomaticContent typeColor={typeColor[GenerationTypeEnums.automatic]} generationFinishCity={generationFinishCity} generatePlacesByCity={generatePlacesByCity} countryId={countryId}/>\n                            )}\n                            {generationType === GenerationTypeEnums.manual && (\n                                <ManualContent typeColor={typeColor[GenerationTypeEnums.manual]} generationFinishCity={generationFinishCity} generatePlacesByCity={generatePlacesByCity} countryId={countryId} mapRef={mapRef}/>\n                            )}\n                            {generationType === GenerationTypeEnums.custom && (\n                                <CustomContent countryId={countryId} getRectangle={getRectangle} mapRef={mapRef}/>\n                            )}\n                        </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","export default class LanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.lang_code = data.lang_code;\n    }\n}\n","export default class MediaModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.path = data.path;\n    }\n}\n","export default class CabModel {\n    constructor(data = {}) {\n        this.id =  data.id;\n        this.name = (data.name || \"\").trim();\n        this.phone_number = (data.phone_number || \"\").trim();\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CityLanguageModel {\n    constructor(data = {}) {\n        this.city_name = data.city_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n}\n","import MediaModel from '../media.model'\nimport CabModel from \"./cabs.model\";\nimport CityLanguageModel from \"./language.model\";\n\nexport default class CityModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.state = data.state;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.geometry = data.geometry;\n        this.work_status = data.work_status;\n        this.generation_count_of_squares = data.generation_count_of_squares;\n        this.original_name = data.original_name;\n        this.languages = (data.languages || []).map( language => new CityLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n        this.population = data.population;\n        this.landscape_image =  data.landscape_image && new MediaModel(data.landscape_image);\n        this.portrait_image =  data.portrait_image && new MediaModel(data.portrait_image);\n        this.cabs = (data.cabs || []).map( cab => new CabModel(cab));\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class SightLanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n        this.sight_description = data.sight_description;\n        this.sight_name = data.sight_name;\n    }\n};\n","import MediaModel from \"../media.model\";\nimport CityModel from \"../City/city.model\";\nimport SightLanguageModel from \"./language.model\";\n\nexport default class SightModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.number_of_views = data.number_of_views || 0;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.original_name = data.original_name;\n        this.city = data.city;\n        this.check_coordinates = data.check_coordinates;\n        this.need_review = data.need_review;\n        this.work_status = data.work_status;\n        this.place_type = data.place_type || [];\n        this.opening_hours = data.opening_hours || null;\n        this.formatted_address = data.formatted_address;\n        this.website = data.website;\n        this.international_phone_number = data.international_phone_number;\n        this.languages = (data.languages || []).map( language => new SightLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_SIGHT_CREATE, API_ADMIN_SIGHT_CREATE_BATCH,\n    API_ADMIN_SIGHT_LIST,\n    API_MAKE_ADMIN_SIGHT_CHANGE_STATUS,\n    API_MAKE_ADMIN_SIGHT_DELETE,\n    API_MAKE_ADMIN_SIGHT_GET_CITIES,\n    API_MAKE_ADMIN_SIGHT_NEED_REVIEW,\n    API_MAKE_ADMIN_SIGHT_SHOW,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_SIGHT_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport SightModel from \"../../model/Sight/sight.model\";\n\nexport default class SightService {\n    static async show(sightId) {\n        return new SightModel(await axios.get(API_MAKE_ADMIN_SIGHT_SHOW(sightId)));\n    }\n\n    static async list(params) {\n        let sightList = await axios.get(API_ADMIN_SIGHT_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n\n        sightList.data = sightList.data.map(sight => new SightModel(sight))\n\n        return sightList;\n    }\n\n    static async create(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE, data));\n    }\n\n    static async createBatch(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE_BATCH, data));\n    }\n\n    static async update(sightId, data) {\n        return new SightModel(await axios.put(API_MAKE_ADMIN_SIGHT_UPDATE(sightId), data));\n    }\n\n    static async delete(sightId) {\n        return await axios.delete(API_MAKE_ADMIN_SIGHT_DELETE(sightId));\n    }\n\n    static async createTranslate(sightId, data) {\n        return await axios.post(API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE(sightId), data);\n    }\n\n    static async updateTranslate(sightId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT(sightId, translateId), data);\n    }\n\n    static async updateWorkStatus(sightId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_CHANGE_STATUS(sightId), {work_status: workStatus});\n    }\n\n    static async needReview(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_NEED_REVIEW(sightId), data);\n    }\n\n    static async getCitiesBySight(sightId) {\n        return await axios.get(API_MAKE_ADMIN_SIGHT_GET_CITIES(sightId));\n    }\n}\n\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_CITY_CREATE,\n    API_MAKE_ADMIN_CITY_DELETE,\n    API_ADMIN_CITY_LIST,\n    API_MAKE_ADMIN_CITY_TAXI_CREATE,\n    API_MAKE_ADMIN_CITY_SHOW,\n    API_MAKE_ADMIN_CITY_EDIT,\n    API_MAKE_ADMIN_CITY_TAXI_EDIT,\n    API_MAKE_ADMIN_CITY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_CITY_CHANGE_STATUS,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class CityService {\n    static async list(params) {\n        let cityList = await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n\n    static async show(cityId) {\n        return new CityModel(await axios.get(API_MAKE_ADMIN_CITY_SHOW(cityId)));\n    }\n\n    static async create(data) {\n        return new CityModel(await axios.post(API_ADMIN_CITY_CREATE, data));\n    }\n\n    static async delete(cityId) {\n        return await axios.delete(API_MAKE_ADMIN_CITY_DELETE(cityId))\n    }\n\n    static async update(cityId, data) {\n        return new CityModel(await axios.put(API_MAKE_ADMIN_CITY_EDIT(cityId), data));\n    }\n\n    static async createTaxi(cityId, data) {\n        return await axios.post(API_MAKE_ADMIN_CITY_TAXI_CREATE(cityId), data);\n    }\n\n    static async updateTaxi(cityId, cabId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TAXI_EDIT(cityId, cabId), data);\n    }\n\n    static async updateTranslate(cityId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TRANSLATE_EDIT(cityId, translateId), data);\n    }\n\n    static async updateWorkStatus(cityId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_CITY_CHANGE_STATUS(cityId), {work_status: workStatus});\n    }\n}\n\n","export default class PlaceTypeEnum{\n    static get reserve(){ return \"reserve\" }\n    static get botanical_garden(){ return \"botanical_garden\" } // 1.5ч\n    static get beach(){ return \"beach\" }  // 30мин\n    static get mountains(){ return \"mountains\" }\n    static get sea(){ return \"sea\" } // 30мин\n    static get lake(){ return \"lake\" } // 2ч\n    static get amusement_park(){ return \"amusement_park\" } // 2ч\n    static get aquarium(){ return \"aquarium\" } // 2ч\n    static get restaurant(){ return \"restaurant\" } // 2ч\n    static get art_gallery(){ return \"art_gallery\" } // 2ч\n    static get tourist_attraction(){ return \"tourist_attraction\" }\n    static get campground(){ return \"campground\" }\n    static get church(){ return \"church\" }\n    static get mosque(){ return \"mosque\" }\n    static get embassy(){ return \"embassy\" }\n    static get museum(){ return \"museum\" }\n    static get park(){ return \"park\" }\n    static get zoo(){ return \"zoo\" }\n\n    static get googleTypesListManual(){\n        return [\n            PlaceTypeEnum.amusement_park,\n            PlaceTypeEnum.aquarium,\n            PlaceTypeEnum.tourist_attraction,\n            PlaceTypeEnum.zoo,\n            PlaceTypeEnum.restaurant,\n        ]\n    }\n    static get googleTypesListAutomatic(){\n        return [\n            PlaceTypeEnum.campground,\n            PlaceTypeEnum.embassy,\n            PlaceTypeEnum.art_gallery,\n            PlaceTypeEnum.museum,\n        ]\n    }\n    static get googleTypesList(){\n        return [\n            ...PlaceTypeEnum.googleTypesListManual,\n            ...PlaceTypeEnum.googleTypesListAutomatic,\n        ]\n    }\n    static get customTypesList(){\n        return [\n            PlaceTypeEnum.park,\n            PlaceTypeEnum.reserve,\n            PlaceTypeEnum.botanical_garden,\n            PlaceTypeEnum.beach,\n            PlaceTypeEnum.mountains,\n            PlaceTypeEnum.sea,\n            PlaceTypeEnum.church,\n            PlaceTypeEnum.mosque,\n            PlaceTypeEnum.lake,\n        ]\n    }\n\n    static get list(){\n        return [\n            ...PlaceTypeEnum.customTypesList,\n            ...PlaceTypeEnum.googleTypesList,\n        ]\n    }\n}\n","export default class CurrencyModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.currency_code = data.currency_code;\n    }\n}\n","import PlaceTypeEnum from \"../enums/PlaceType\";\n\nexport default class PlaceTypeTranslate {\n    static getTranslateForType( type ) {\n        const typeObj = {\n            [PlaceTypeEnum.reserve]: \"Заповідник\",\n            [PlaceTypeEnum.botanical_garden]: \"Ботанічний сад\",\n            [PlaceTypeEnum.beach]: \"Пляж\",\n            [PlaceTypeEnum.mountains]: \"Гори\",\n            [PlaceTypeEnum.sea]: \"Море\",\n            [PlaceTypeEnum.lake]: \"Озеро\",\n            [PlaceTypeEnum.amusement_park]: \"Парк розваг\",\n            [PlaceTypeEnum.aquarium]: \"Акваріум\",\n            [PlaceTypeEnum.art_gallery]: \"Картинна галерея\",\n            [PlaceTypeEnum.zoo]: \"Зоопарк\",\n            [PlaceTypeEnum.tourist_attraction]: \"Туристична пам'ятка\",\n            [PlaceTypeEnum.campground]: \"Кемпінг\",\n            [PlaceTypeEnum.church]: \"Церква\",\n            [PlaceTypeEnum.city_hall]: \"Ратуша\",\n            [PlaceTypeEnum.mosque]: \"Мечеть\",\n            [PlaceTypeEnum.embassy]: \"Посольство\",\n            [PlaceTypeEnum.museum]: \"Музей\",\n            [PlaceTypeEnum.park]: \"Парк\",\n            [PlaceTypeEnum.restaurant]: \"Ресторан\",\n        }\n\n        return typeObj[type]\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CountryLanguageModel {\n    constructor(data = {}) {\n        this.country_description = data.country_description;\n        this.country_name = data.country_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n};\n","import CityModel from '../City/city.model'\nimport MediaModel from \"../media.model\";\nimport CurrencyModel from \"../currency.model\";\nimport LanguageModel from \"../language.model\";\nimport CountryLanguageModel from \"./language.model\";\n\nexport default class CountryModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.country_code_in_iso_3166_1_format = data.country_code_in_iso_3166_1_format;\n        this.population = data.population;\n        this.official_language = new LanguageModel(data.official_language);\n        this.capital = data.capital ? new CityModel(data.capital) : null;\n        this.currency = new CurrencyModel(data.currency);\n        this.name = data.name;\n        this.geometry = data.geometry;\n        this.languages = (data.languages || []).map( language => new CountryLanguageModel(language));\n        this.description = data.description;\n        this.ambulance_number = data.ambulance_number;\n        this.original_name = data.original_name;\n        this.has_seas = data.has_seas;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.has_mountains = data.has_mountains;\n        this.landscape_image =  data.landscape_image && new MediaModel(data.landscape_image);\n        this.portrait_image =  data.portrait_image && new MediaModel(data.portrait_image);\n        this.has_mountains = data.has_mountains;\n        this.happiness_rating = data.happiness_rating;\n        this.highest_point = data.highest_point;\n        this.country_area = data.country_area;\n        this.safety_index = data.safety_index;\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_COUNTRY_CREATE,\n    API_ADMIN_COUNTRY_LIST,\n    API_MAKE_ADMIN_COUNTRY_DELETE,\n    API_MAKE_ADMIN_COUNTRY_SHOW,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_COUNTRY_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CountryModel from \"../../model/Country/country.model\";\n\nexport default class CountryService {\n    static async list(params) {\n        let countryList = await axios.get(API_ADMIN_COUNTRY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        countryList.data = countryList.data.map( country => new CountryModel(country));\n\n        return countryList;\n    }\n\n    static async show(countryId) {\n        return new CountryModel(await axios.get(API_MAKE_ADMIN_COUNTRY_SHOW(countryId)));\n    }\n\n    static async create(data) {\n        return new CountryModel(await axios.post(API_ADMIN_COUNTRY_CREATE, data));\n    }\n\n    static async update(countryId, data) {\n        return new CountryModel(await axios.put(API_MAKE_ADMIN_COUNTRY_UPDATE(countryId), data));\n    }\n\n    static async createTranslate(countryId, data) {\n        return await axios.post(API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE(countryId), data);\n    }\n\n    static async updateTranslate(countryId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT(countryId, translateId), data);\n    }\n\n    static async delete(countryId) {\n        return await axios.delete(API_MAKE_ADMIN_COUNTRY_DELETE(countryId));\n    }\n}\n\n"],"sourceRoot":""}