{"version":3,"sources":["pages/admin/pages/Generate/Place/components/PlaceTypes/index.module.scss","enums/GenerationType.js","pages/admin/pages/Generate/Place/components/ManualContent/index.jsx","pages/admin/pages/Generate/Place/components/PlaceTypes/index.jsx","pages/admin/pages/Generate/Place/components/CustomContent/index.jsx","pages/admin/pages/Generate/Place/components/RadioGenerationType/index.jsx","utils/FoursquareClient.js","pages/admin/pages/Generate/Place/index.jsx","model/language.model.js","model/media.model.js","model/translate.model.js","model/City/languageFields.model.js","model/City/city.model.js","enums/PlaceType.js","model/Sight/languageFields.model.js","model/Sight/sight.model.js","services/admin/sight.service.js","enums/ExcursionRouteType.js","services/admin/city.service.js","services/admin/generationPlace.service.js","utils/GoogleClient.js","model/currency.model.js","utils/PlaceTypeTranslate.js","model/Country/languageFields.model.js","model/Country/country.model.js","enums/FoursquarePlaceType.js","services/admin/country.service.js"],"names":["module","exports","GenerationTypeEnums","ManualContent","generatePlacesByCity","countryId","setLoading","mapRef","useState","countOfLimitSearch","setCountOfLimitSearch","cityList","setCityList","city","setCity","types","setTypes","type","setType","getCity","useContext","DictionaryContext","dictionary","cityId","CityService","show","getType","getCityList","GenerationPlaceService","cityWhiteList","country_id","manual","per_page","data","map","value","id","label","name","startManualGenerate","failed","console","log","generatedSquare","json","geometry","eq","Object","keys","FoursquarePlaceTypeEnum","typeIds","reduce","accum","key","isGeneratedTypes","uniqTypesId","includes","PlaceTypeTranslate","getTranslateForFoursquareType","useEffect","GoogleClient","getRectangle","current","north","south","east","west","style","display","gap","alignItems","marginBottom","onClick","disabled","width","margin","size","placeholder","options","showSearch","minWidth","filterOption","text","textLowerCase","trim","toLowerCase","labelLowerCase","valueLowerCase","toString","onChange","marginTop","e","target","Park","setPlaceTypes","placeTypes","places","className","styles","typeWrapper","typeWrapper__type","active","getTranslateForType","typeColor","PlaceTypeEnum","amusement_park","aquarium","tourist_attraction","zoo","restaurant","AutomaticContent","setGeometry","rectangle","useRef","timeOutId","allGeneratedSquare","generateSquareByGeometry","drawSquareByPlaceType","forEach","square","setMap","center","getCenter","squareSize","lat","maxHorizontalDif","lng","maxVerticalDif","draggable","editable","addListener","clearTimeout","setTimeout","bounds","getBounds","centerHorizontalLat","centerVerticalLng","newGeometry","parseBounds","errorDifHorizontal","errorDifVertical","setOptions","place_types","list","flexDirection","height","backgroundColor","RadioGenerationType","generationType","setGenerationType","Group","defaultValue","custom","i","FoursquareClient","searchParams","fetch","QueryString","stringify","headers","Authorization","this","accept","results","foursquarePlaceId","fields","join","placeDetails","opening_hours","parseOpeningHours","hours","regular","photoUrl","Promise","resolve","downloadImage","file","photosList","photos","status","filesIds","shortPhotosList","filter","_","index","length","photo","prefix","suffix","getPhotoFile","openingHours","days","formatOpeningHours","result","openHour","openTimeSplit","open","split","closeTimeSplit","openTimeFormat","closeTimeFormat","openTime","closeTime","day","slice","close","GeneratePlace","useParams","country","setCountry","loading","mapBlockRef","squareRef","mapInit","opt","zoom","restriction","latLngBounds","strictBounds","window","google","maps","Map","limit","currentI","currentJ","forLoop","currentType","countStep","placeHeightCoordinate","placeWidthCoordinate","stepHorizontal","stepVertical","message","city_id","indexI","indexJ","getPlaces","foursquareType","lastType","typeOriginIds","reject","placesToDB","categories","ne","sw","create","place","placeToBd","translatable","original_name","formatted_address","location","foursquare_place_id","fsq_id","check_coordinates","place_type","latitude","geocodes","main","longitude","getPhotosId","files_ids","getPlacesDetails","website","international_phone_number","tel","getMarker","SightService","createBatch","sights","generationFinishCity","finish","getCountry","CountryService","ref","paddingTop","xmlns","version","viewBox","x","y","fill","d","attributeName","from","to","dur","repeatCount","process","LanguageModel","lang_code","MediaModel","path","TranslateModel","FieldsModel","language","CityLanguageFieldsModel","portraitImage","landscapeImage","CityModel","description","state","work_status","generation_count_of_squares","translations","translate","CityLanguageModel","population","landscape_image","portrait_image","reserve","botanical_garden","beach","mountains","sea","lake","art_gallery","campground","church","mosque","museum","theater","park","place_of_view","customTypesList","googleTypesList","SightLanguageFieldsModel","SightModel","number_of_views","need_review","images","image","sightId","axios","get","API_MAKE_ADMIN_SIGHT_SHOW","params","API_ADMIN_SIGHT_LIST","paramsSerializer","sightList","sight","post","API_ADMIN_SIGHT_CREATE","API_ADMIN_SIGHT_CREATE_BATCH","put","API_MAKE_ADMIN_SIGHT_UPDATE","delete","API_MAKE_ADMIN_SIGHT_DELETE","API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_SIGHT_CHANGE_STATUS","API_MAKE_ADMIN_SIGHT_NEED_REVIEW","API_MAKE_ADMIN_SIGHT_GET_CITIES","ExcursionRouteTypeEnum","API_ADMIN_CITY_LIST","API_MAKE_ADMIN_CITY_SHOW","API_ADMIN_CITY_CREATE","API_MAKE_ADMIN_CITY_DELETE","API_MAKE_ADMIN_CITY_EDIT","API_MAKE_ADMIN_CITY_TRANSLATE_EDIT","API_MAKE_ADMIN_CITY_CHANGE_STATUS","ADMIN_CREATE_SQUARE_GENERATE_PLACE","url","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE","then","res","viewport","northeast","southwest","photo_ref","photoReference","photo_reference","placeId","defaultFields","requestDetailPlace","catch","error","currentParams","direction","LatLngBounds","extend","LatLng","position","icon","props","Marker","color","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getNorthEast","Polyline","geodesic","pinSVGFilled","labelOriginFilled","Point","anchor","scale","labelOrigin","getSouthWest","undefined","time","CurrencyModel","currency_code","mountain","building","castle","garden","historical_and_protected_object","monument","palace","art_museum","historical_museum","science_museum","opera_theatre","forest","national_park","natural_park","CountryFieldsModel","CountryModel","country_code_in_iso_3166_1_format","official_language","capital","currency","ambulance_number","has_seas","has_mountains","happiness_rating","highest_point","country_area","safety_index","API_ADMIN_COUNTRY_LIST","countryList","API_MAKE_ADMIN_COUNTRY_SHOW","API_ADMIN_COUNTRY_CREATE","API_MAKE_ADMIN_COUNTRY_UPDATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT","API_MAKE_ADMIN_COUNTRY_DELETE"],"mappings":"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","file":"static/js/38.34b47ee1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeWrapper\":\"PlaceTypes_typeWrapper__3CJs2\",\"typeWrapper__type\":\"PlaceTypes_typeWrapper__type__2qvtC\",\"active\":\"PlaceTypes_active__1sive\"};","export default class GenerationTypeEnums{\n    static get manual(){ return \"manual\" }\n    static get custom(){ return \"custom\" }\n}\n","/**\n * external libs\n */\nimport React, {useState, useEffect, useContext} from 'react';\nimport {Button, Input, Select} from 'antd';\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n/**\n * services\n */\nimport CityService from \"../../../../../../../services/admin/city.service\";\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\nimport FoursquarePlaceTypeEnum from \"../../../../../../../enums/FoursquarePlaceType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\nimport GoogleClient from \"../../../../../../../utils/GoogleClient\";\n\nexport default function ManualContent({generatePlacesByCity, countryId, setLoading, mapRef}) {\n    const [countOfLimitSearch, setCountOfLimitSearch] = useState(0)\n    const [cityList, setCityList] = useState([])\n    const [city, setCity] = useState(null)\n    const [types, setTypes] = useState([])\n    const [type, setType] = useState(null)\n    const {dictionary} = useContext(DictionaryContext)\n\n    const getCity = async (cityId) => {\n        const city = await CityService.show(cityId)\n\n        await getType(city)\n        setCity(city)\n    }\n\n    const getCityList = async () => {\n        const {data} = await GenerationPlaceService.cityWhiteList({\n            country_id: countryId,\n            type: GenerationTypeEnums.manual,\n            per_page: 1000000\n        })\n\n        setCityList(data.map(({id, name}) => ({value: id, label: name})));\n    }\n\n    const startManualGenerate = async () => {\n        if (!city) {\n            return;\n        }\n\n        if(countOfLimitSearch > 50){\n            return;\n        }\n\n        const {failed} = await generatePlacesByCity(city, [type], countOfLimitSearch)\n\n        setLoading(false)\n\n        if (failed) {\n            console.log('failed END')\n            return;\n        }\n\n        // await generationFinishCity(city.id, GenerationTypeEnums.manual, dictionary.place_types.manual.map(({value}) => value))\n\n        console.log(\"END\")\n    }\n\n    const getType = async (city) => {\n        const isGeneratedTypes = await GenerationPlaceService.generatedSquare({\n            json: {geometry: city.geometry},\n            eq: {\n                type: Object.keys(FoursquarePlaceTypeEnum.typeIds).reduce((accum, key) => ([\n                    ...accum,\n                    FoursquarePlaceTypeEnum.typeIds[key]\n                ]), [])\n            }\n        })\n\n        const uniqTypesId = isGeneratedTypes.data.map(({type}) => +type)\n\n        setTypes(Object.keys(FoursquarePlaceTypeEnum.typeIds).reduce((accum, key) => {\n            if(uniqTypesId.includes(FoursquarePlaceTypeEnum.typeIds[key])){\n                return accum\n            }\n\n            return [\n                ...accum,\n                {\n                    value: FoursquarePlaceTypeEnum.typeIds[key],\n                    label: PlaceTypeTranslate.getTranslateForFoursquareType([key])\n                }\n            ]\n        }, []))\n    }\n\n    useEffect(() => {\n        if (!city) {\n            return\n        }\n\n\n        GoogleClient.getRectangle(\n            mapRef.current,\n            {\n                north: city.geometry.north, //noth lat\n                south: city.geometry.south, //south lat\n                east: city.geometry.east, //noth lng\n                west: city.geometry.west, //south lng\n            },\n            \"#001529\"\n        )\n    }, [city])\n\n    useEffect(() => {\n        getCityList()\n    }, [])\n\n\n    if (!cityList) {\n        return null\n    }\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\", marginBottom: -10}}>\n                <Button type=\"primary\"\n                        onClick={startManualGenerate}\n                        disabled={(city === null) || !type || !countOfLimitSearch}\n                        style={{width: \"100%\"}}>Manual\n                    generation</Button>\n            </div>\n            <div style={{margin: \"20px 0\"}}>\n                <Select\n                    size=\"large\"\n                    placeholder={\"Select city\"}\n                    options={cityList}\n                    showSearch={true}\n                    style={{minWidth: \"100%\"}}\n                    filterOption={(text, {value, label}) => {\n                        const textLowerCase = text.trim().toLowerCase()\n                        const labelLowerCase = label.toLowerCase()\n                        const valueLowerCase = value.toString().toLowerCase()\n                        return labelLowerCase.includes(textLowerCase) || valueLowerCase.includes(text)\n                    }}\n                    onChange={getCity}\n                />\n                {city && (\n                    <>\n                        <Select\n                            size=\"large\"\n                            placeholder={\"Select type\"}\n                            options={types}\n                            showSearch={true}\n                            style={{minWidth: \"100%\", marginTop: 8}}\n                            filterOption={(text, {value, label}) => {\n                                const textLowerCase = text.trim().toLowerCase()\n                                const labelLowerCase = label.toLowerCase()\n                                const valueLowerCase = value.toString().toLowerCase()\n                                return labelLowerCase.includes(textLowerCase) || valueLowerCase.includes(text)\n                            }}\n                            onChange={setType}\n                        />\n                        {type && (\n                            <Input\n                                placeholder=\"Count of search (max 50)...\"\n                                value={countOfLimitSearch}\n                                onChange={e => setCountOfLimitSearch(+e.target.value)}\n                                style={{marginTop: 8, display: 'block'}}\n                            />\n                        )}\n                    </>\n                )}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useState} from 'react';\n/**\n * styles\n */\nimport styles from \"./index.module.scss\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n\nexport default function Park({setPlaceTypes, placeTypes, places}) {\n    return (\n        <div className={styles.typeWrapper}>\n            {places.map( type => (\n                <div className={`${styles.typeWrapper__type} ${placeTypes === type && styles.active}`} onClick={() => setPlaceTypes(type)}>\n                    {PlaceTypeTranslate.getTranslateForType(type)}\n                </div>\n            ))}\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useContext, useRef, useState} from 'react';\nimport {Button, Form, Radio} from 'antd';\n/**\n * components\n */\nimport PlaceType from \"../PlaceTypes\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\nimport GoogleClient from \"../../../../../../../utils/GoogleClient\";\n/**\n * services\n */\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport PlaceTypeEnum from \"../../../../../../../enums/PlaceType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\n\nconst typeColor = {\n    [PlaceTypeEnum.amusement_park]: \"green\",\n    [PlaceTypeEnum.aquarium]: \"red\",\n    [PlaceTypeEnum.tourist_attraction]: \"gray\",\n    [PlaceTypeEnum.zoo]: \"black\",\n    [PlaceTypeEnum.restaurant]: \"blue\",\n}\n\nexport default function AutomaticContent({ getRectangle, countryId, mapRef }){\n    const {dictionary} = useContext(DictionaryContext)\n    const [placeTypes, setPlaceTypes] = useState(null)\n    const [geometry, setGeometry] = useState(null)\n    const rectangle = useRef(null)\n    const timeOutId = useRef(null)\n    const allGeneratedSquare = useRef([])\n\n    const generateSquareByGeometry = async () => {\n        //KIYV\n        GoogleClient.getRectangle(\n            mapRef.current,\n            {\n                north: 50.590798, //noth lat\n                south: 50.213273, //south lat\n                east: 30.825941, //noth lng\n                west: 30.2394401, //south lng\n            }\n        )\n\n        // const {failed, message, type} = await getRectangle(\n        //     {\n        //         geometry,\n        //         cityId: null,\n        //         placeTypes: placeTypes\n        //     }\n        // )\n        //\n        // if (failed) {\n        //     // socket.emit('pushLog', {\n        //     //     success: false,\n        //     //     cityId: city.id,\n        //     //     geometry_square: {\n        //     //       ...geometry\n        //     //     },\n        //     //     message,\n        //     //     type,\n        //     // });\n        //\n        //     return {failed: true}\n        // }\n\n        // rectangle.current.setOptions({\n        //     editable: false,\n        //     draggable: false,\n        // })\n    }\n\n    const  drawRec = () => {\n        const center =  mapRef.current.getCenter();\n        const maxHorizontalDif  = 0.4;\n        const maxVerticalDif = 0.6;\n\n        const squareSize = {\n            north: center.lat() + maxHorizontalDif / 2, //noth lat\n            south: center.lat() - maxHorizontalDif / 2, //south lat\n            east: center.lng() + maxVerticalDif / 2, //noth lng = 0.05\n            west: center.lng() - maxVerticalDif / 2, //south lng = 0.05\n        };\n\n        rectangle.current = GoogleClient.getRectangle(\n            mapRef.current,\n            squareSize,\n            \"blue\",\n            {\n                draggable: true,\n                editable: true,\n            }\n        )\n\n        rectangle.current.addListener(\"bounds_changed\", () => {\n            clearTimeout(timeOutId.current);\n            timeOutId.current = setTimeout(() => {\n                const bounds = rectangle.current.getBounds()\n                const center = bounds.getCenter();\n                const centerHorizontalLat = center.lat();\n                const centerVerticalLng = center.lng();\n\n                let newGeometry = GoogleClient.parseBounds(bounds)\n\n                if(geometry && geometry.north === newGeometry.north && geometry.east === newGeometry.east && geometry.west === newGeometry.west && geometry.south === newGeometry.south){\n                    return;\n                }\n\n                const difHorizontal = newGeometry.north - newGeometry.south;\n                const difVertical = newGeometry.east - newGeometry.west;\n\n                const errorDifHorizontal = maxHorizontalDif < difHorizontal;\n                const errorDifVertical = maxVerticalDif < difVertical;\n\n                if(errorDifHorizontal){\n                    newGeometry = {\n                        ...newGeometry,\n                        north: centerHorizontalLat - maxHorizontalDif / 2,\n                        south: centerHorizontalLat + maxHorizontalDif / 2,\n                    }\n                }\n                if(errorDifVertical){\n                    newGeometry = {\n                        ...newGeometry,\n                        west: centerVerticalLng - maxVerticalDif / 2,\n                        east: centerVerticalLng + maxVerticalDif / 2,\n                    }\n                }\n\n                if(errorDifHorizontal || errorDifVertical){\n                    setGeometry(newGeometry)\n                    rectangle.current.setOptions({\n                        bounds: newGeometry\n                    })\n                }\n            },500);\n        });\n    }\n\n    const  close = () => {\n\n    }\n\n    const drawSquareByPlaceType = async () => {\n        if(!placeTypes){\n            return;\n        }\n\n        allGeneratedSquare.current.forEach(( square ) => {\n            square.setMap(null)\n        })\n\n        const {data} = await GenerationPlaceService.generatedSquare({\n            eq: {\n                country_id: [countryId],\n                type: [placeTypes]\n            },\n            per_page: 1000000,\n        });\n\n\n        allGeneratedSquare.current = data.map(({geometry}) => (\n            GoogleClient.getRectangle(\n                mapRef.current,\n                geometry\n            )\n        ))\n    }\n\n    useEffect(() => {\n       drawSquareByPlaceType()\n    }, [placeTypes])\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\"}}>\n                <Button type=\"primary\" onClick={generateSquareByGeometry} style={{width: \"100%\"}}>Custom generation</Button>\n                <Button type=\"primary\" onClick={drawRec} style={{width: \"100%\"}}>Draw</Button>\n                <Button type=\"primary\" onClick={close} style={{width: \"100%\"}}>close</Button>\n            </div>\n            <PlaceType places={dictionary.place_types.list.map(({value}) => value)}\n                       setPlaceTypes={setPlaceTypes}\n                       placeTypes={placeTypes}\n            />\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginBottom: 10}}>\n                {Object.keys(typeColor).map(type => (\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                        <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, { useState } from 'react';\nimport { Radio } from 'antd';\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\n\nexport default function RadioGenerationType({generationType, setGenerationType}){\n    return (\n        <Radio.Group onChange={e => setGenerationType(e.target.value)} defaultValue={generationType}>\n            <Radio value={GenerationTypeEnums.manual}>Manual</Radio>\n            <Radio value={GenerationTypeEnums.custom}>Custom</Radio>\n        </Radio.Group>\n    )\n}\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class FoursquareClient {\n    static key = process.env.REACT_APP_FOURSQUARE_API\n\n    static async getPlaces (searchParams = {}){\n        // categories=${foursquareType}&ne=52.3679992%2C21.2710984&sw=52.0978767%2C20.8512898&limit=${limit}\n\n        try {\n            const {results} = await (await fetch(`https://api.foursquare.com/v3/places/search?${QueryString.stringify(searchParams)}`, {\n                headers: {\n                    Authorization: this.key,\n                    accept: 'application/json'\n                }\n            })).json()\n\n            return results\n\n        } catch (e) {\n            return []\n        }\n    }\n\n    static async getPlacesDetails (foursquarePlaceId, fields = []){\n        try {\n            const placeDetails = await (await fetch(`https://api.foursquare.com/v3/places/${foursquarePlaceId}?${QueryString.stringify({fields: fields.join(\",\")})}`, {\n                headers: {\n                    Authorization: this.key,\n                    accept: 'application/json'\n                }\n            })).json()\n\n            console.log(placeDetails, \"placeDetails\")\n\n            placeDetails.opening_hours = this.parseOpeningHours(placeDetails.hours.regular)\n            delete placeDetails.hours;\n\n            return placeDetails\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotoFile (photoUrl){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(photoUrl)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( foursquarePlaceId ){\n        let photosList = [];\n        let photos =  await fetch(`https://api.foursquare.com/v3/places/${foursquarePlaceId}/photos`, {\n            headers: {\n                Authorization: this.key,\n                accept: 'application/json'\n            }\n        })\n\n        if(photos.status === 200){\n            photosList = await photos.json()\n        }else{\n            return []\n        }\n\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index < 3) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photo = shortPhotosList[i];\n            const photoUrl = `${photo.prefix}original${photo.suffix}`\n\n\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await this.getPhotoFile(photoUrl)\n\n            if (file?.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            formatOpeningHours = openingHours.reduce( (result, openHour) => {\n                const openTimeSplit = openHour.open.split('+')\n                const closeTimeSplit = openHour.open.split('+')\n                const openTimeFormat = openTimeSplit.length === 1 ? openTimeSplit[0] : openTimeSplit[1]\n                const closeTimeFormat = closeTimeSplit.length === 1 ? closeTimeSplit[0] : closeTimeSplit[1]\n                const openTime = openTimeFormat === \"2359\" ? \"0000\" : openTimeFormat\n                const closeTime = closeTimeFormat === \"2359\" ? \"0000\" : closeTimeFormat\n\n                return {\n                    ...result,\n                    [days[openHour.day - 1]]: {\n                        open: `${openTime.slice(0, 2)}:${openTime.slice(2, 4)}`,\n                        close: `${closeTime.slice(0, 2)}:${closeTime.slice(2, 4)}`,\n                    }\n                }\n            }, {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","/**\n * external libs\n */\nimport React, {useContext, useEffect, useRef, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\n/**\n * components\n */\nimport ManualContent from './components/ManualContent'\nimport CustomContent from './components/CustomContent'\nimport RadioGenerationType from './components/RadioGenerationType'\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../enums/GenerationType\";\nimport FoursquarePlaceTypeEnum from \"../../../../../enums/FoursquarePlaceType\";\n/**\n * service\n */\nimport GenerationPlaceService from \"../../../../../services/admin/generationPlace.service\";\nimport SightService from \"../../../../../services/admin/sight.service\";\nimport CountryService from \"../../../../../services/admin/country.service\";\n/**\n * utils\n */\nimport GoogleClient from \"../../../../../utils/GoogleClient\";\nimport FoursquareClient from \"../../../../../utils/FoursquareClient\";\n\nexport default function GeneratePlace() {\n    const {countryId} = useParams();\n    const [generationType, setGenerationType] = useState(GenerationTypeEnums.manual)\n    const [country, setCountry] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const mapBlockRef = useRef(null);\n    const squareRef = useRef(null);\n    const mapRef = useRef(null);\n\n    console.log(country, \"country\")\n\n    const mapInit = async (geometry = {}) => {\n        const opt = {\n            center: {lat: 51.514316, lng: -0.129761},\n            zoom: 4,\n            restriction: {\n                latLngBounds: {\n                    ...geometry\n                },\n                strictBounds: true\n            },\n        }\n\n\n        mapRef.current = new window.google.maps.Map(mapBlockRef.current, opt)\n    }\n\n    const generatePlacesByCity = async (city, placeTypes = [], limit) => {\n        setLoading(true)\n        if (!city.geometry || !placeTypes.length) {\n            return {failed: false};\n        }\n\n        let currentI = 1;\n        let currentJ = 1;\n\n        const forLoop = async _ => {\n            for (let i = 0; i < placeTypes.length; i++) {\n                const currentType = placeTypes[i];\n\n                //Берем колл-во квадратов по которым ходим. Есть значения захардкодженые, а есть с базы\n                let countStep = 1;\n\n                //Ширина и Высота квадрата по которому идем (сити геометрия)\n                const placeHeightCoordinate = city.geometry.north - city.geometry.south;\n                const placeWidthCoordinate = city.geometry.east - city.geometry.west;\n\n                //Делим этот квадрат (сити геометрию) на колл-во шагов\n                const stepHorizontal = placeWidthCoordinate / countStep;\n                const stepVertical = placeHeightCoordinate / countStep;\n\n                currentI = 1;\n                for (currentI; currentI <= countStep; currentI++) {\n                    currentJ = 1;\n                    for (currentJ; currentJ <= countStep; currentJ++) {\n\n                        await new Promise(resolve => setTimeout(resolve, 500))\n\n                        //Берем один текузий квадрат\n                        const {failed, message, type} = await getRectangle(\n                            {\n                                geometry: {\n                                    north: city.geometry.south + (stepVertical * currentI),\n                                    east: city.geometry.west + (stepHorizontal * currentJ),\n                                    south: city.geometry.south + (stepVertical * (currentI - 1)),\n                                    west: city.geometry.west + (stepHorizontal * (currentJ - 1)),\n                                },\n                                city: city,\n                                type: currentType,\n                                limit,\n                            }\n                        )\n\n                        if (failed) {\n                            return {failed: true}\n                        }\n                    }\n                }\n            }\n\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            return {failed: false}\n        }\n\n        try {\n            return await forLoop()\n        } catch (e) {\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            return {\n                failed: true,\n                city_id: city.id,\n                message: e.message,\n                type: null,\n                indexI: currentI,\n                indexJ: currentJ,\n            };\n        }\n    }\n    const getRectangle = async ({geometry, city, type, limit, countStep}) => {\n        try {\n            //Получение геометрии квадрата, его отрисовка на UI\n            const {north, south, east, west} = geometry;\n            const bounds = GoogleClient.getBounds(north, south, east, west)\n\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            squareRef.current = GoogleClient.getRectangle(\n                mapRef.current,\n                GoogleClient.parseBounds(bounds)\n            );\n\n            //После получения и отрисовски всех данных идем получать плейсы\n            return await getPlaces(bounds, city, type, limit)\n        } catch (e) {\n            return {\n                failed: true,\n                message: e.message,\n                type: null\n            }\n        }\n\n    }\n    const getPlaces = async (bounds, city, foursquareType, limit) => {\n        let lastType = null;\n\n        const forLoop = async () => {\n            lastType = foursquareType\n            const type = Object.keys(FoursquarePlaceTypeEnum.typeOriginIds).reduce((accum, type) => {\n                const foursquareIdsForType = FoursquarePlaceTypeEnum.typeOriginIds[type]\n                if (foursquareIdsForType.includes(foursquareType)) {\n                    return type\n                }\n\n                return accum\n            }, null)\n\n            const geometry = GoogleClient.parseBounds(bounds)\n\n            const isGenerate = await GenerationPlaceService.generatedSquare({\n                json: {geometry},\n                eq: {type: [foursquareType]}\n            })\n\n            if (isGenerate.data.length) {\n                return {failed: false};\n            }\n\n            await new Promise(async (resolve, reject) => {\n                let placesToDB = []\n                const places = await FoursquareClient.getPlaces({\n                    categories: foursquareType,\n                    ne: `${geometry.north},${geometry.east}`,\n                    sw: `${geometry.south},${geometry.west}`,\n                    limit: limit\n                })\n\n\n                if (!places.length) {\n                    await GenerationPlaceService.create({\n                        country_id: countryId,\n                        geometry,\n                        type: `${foursquareType}`\n                    });\n                    resolve()\n                }\n\n                for (let i = 0; i < places.length; i++) {\n                    try {\n                        const place = places[i]\n\n                        let placeToBd = {\n                            city_id: city.id,\n                            country_id: countryId,\n                            translatable: {\n                                name: place.name\n                            },\n                            original_name: place.name,\n                            formatted_address: place.location.formatted_address,\n                            foursquare_place_id: place.fsq_id,\n                            check_coordinates: false,\n                            place_type: [type],\n                            latitude: place.geocodes.main.latitude,\n                            longitude: place.geocodes.main.longitude,\n                        }\n\n                        await new Promise(resolve => setTimeout(resolve, 200))\n\n                        placeToBd.files_ids = await FoursquareClient.getPhotosId(placeToBd.foursquare_place_id)\n\n                        const placeDetails = await FoursquareClient.getPlacesDetails(placeToBd.foursquare_place_id, [\"tel\", \"website\", \"hours\"])\n\n                        if (placeDetails) {\n                            placeToBd.website = placeDetails?.website || null;\n                            placeToBd.international_phone_number = placeDetails?.tel || null;\n                            placeToBd.opening_hours = placeDetails?.opening_hours || null;\n                        }\n\n                        GoogleClient.getMarker(\n                            mapRef.current,\n                            {lat: placeToBd.latitude, lng: placeToBd.longitude},\n                        )\n\n                        placesToDB = [...placesToDB, placeToBd]\n                    } catch (error) {\n                        return reject({\n                            message: error.message,\n                        })\n                    }\n                }\n\n                await SightService.createBatch({sights: placesToDB.filter(place => place.files_ids.length)})\n\n                await GenerationPlaceService.create({\n                    country_id: countryId,\n                    geometry,\n                    type: `${foursquareType}`\n                })\n\n                resolve()\n            })\n        }\n\n        try {\n            return await forLoop()\n        } catch (error) {\n            return {\n                failed: true,\n                message: error.message,\n                type: lastType\n            };\n        }\n    }\n\n    const generationFinishCity = async (cityId, generationType, placeTypes) => {\n        await GenerationPlaceService.finish({\n            \"city_id\": cityId,\n            \"generation_type\": generationType,\n            \"types\": placeTypes\n        })\n    }\n\n    const getCountry = async () => {\n        const country = await CountryService.show(countryId)\n        setCountry(country)\n\n        return country\n    }\n\n    useEffect(() => {\n        getCountry()\n    }, [])\n\n    useEffect(() => {\n        if (!generationType || !country?.geometry) {\n            return;\n        }\n\n        mapInit(country.geometry)\n    }, [generationType, country?.geometry])\n\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 50}}>\n                <div ref={mapBlockRef} style={{width: \"70%\", height: 500}}/>\n                <div style={{width: \"30%\"}}>\n\n                    <RadioGenerationType generationType={generationType}\n                                         setGenerationType={setGenerationType}/>\n                    <div style={{paddingTop: 20}}>\n                        {generationType === GenerationTypeEnums.manual && (\n                            <ManualContent generationFinishCity={generationFinishCity}\n                                           generatePlacesByCity={generatePlacesByCity}\n                                           countryId={countryId}\n                                           setLoading={setLoading}\n                                           mapRef={mapRef}/>\n                        )}\n                        {generationType === GenerationTypeEnums.custom && (\n                            <CustomContent countryId={countryId} getRectangle={getRectangle} mapRef={mapRef}/>\n                        )}\n                    </div>\n                    {loading && (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\"\n                             version=\"1.0\" width=\"64px\" height=\"64px\"\n                             viewBox=\"0 0 128 128\" >\n                            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#f0f2f5\"/>\n                            <g>\n                                <path\n                                    d=\"M64 128A64 64 0 0 1 18.34 19.16L21.16 22a60 60 0 1 0 52.8-17.17l.62-3.95A64 64 0 0 1 64 128z\"\n                                    fill=\"#000000\"/>\n                                <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 64 64\" to=\"360 64 64\"\n                                                  dur=\"1400ms\" repeatCount=\"indefinite\"/>\n                            </g>\n                        </svg>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n","export default class LanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.lang_code = data.lang_code;\n    }\n}\n","export default class MediaModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.path = data.path;\n    }\n}\n","import LanguageModel from \"./language.model\";\n\nexport default class TranslateModel {\n    constructor(data = {}, FieldsModel) {\n        this.id = data.id;\n        this.fields = new FieldsModel(data.fields);\n        this.language = new LanguageModel(data.language);\n    }\n}\n","export default class CityLanguageFieldsModel {\n    constructor(data = {}) {\n        this.name = data.name;\n    }\n}\n","import MediaModel from '../media.model'\nimport CityLanguageModel from \"./languageFields.model\";\nimport TranslateModel from \"../translate.model\";\n\nconst portraitImage = {\n    id: null,\n    path: \"https://images.unsplash.com/photo-1629809189194-8302d4345c8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dWtyYWluZSUyMGZsYWd8ZW58MHx8MHx8&w=1000&q=80\"\n}\n\nconst landscapeImage = {\n    id: null,\n    path: \"https://media.istockphoto.com/photos/close-up-ukranian-flag-picture-id163641275?b=1&k=20&m=163641275&s=170667a&w=0&h=CVdqTfh31VTDbr7hqcBTbyocEZLlWTC02Kip6niMXBw=\"\n}\n\nexport default class CityModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.state = data.state;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.geometry = data.geometry;\n        this.work_status = data.work_status;\n        this.generation_count_of_squares = data.generation_count_of_squares;\n        this.original_name = data.original_name;\n        this.translations = (data.translations || []).map( translate => new TranslateModel(translate, CityLanguageModel));\n        this.population = data.population;\n        this.landscape_image =  new MediaModel(data.landscape_image || landscapeImage);\n        this.portrait_image =  new MediaModel(data.portrait_image || portraitImage)\n    }\n}\n","export default class PlaceTypeEnum{\n    static get reserve(){ return \"reserve\" }\n    static get botanical_garden(){ return \"botanical_garden\" }\n    static get beach(){ return \"beach\" }\n    static get mountains(){ return \"mountains\" }\n    static get sea(){ return \"sea\" }\n    static get lake(){ return \"lake\" }\n    static get restaurant(){ return \"restaurant\" }\n    static get art_gallery(){ return \"art_gallery\" }\n    static get tourist_attraction(){ return \"tourist_attraction\" }\n    static get campground(){ return \"campground\" }\n    static get church(){ return \"church\" }\n    static get mosque(){ return \"mosque\" }\n    static get museum(){ return \"museum\" }\n    static get theater(){ return \"theater\" }\n    static get park(){ return \"park\" }\n    static get place_of_view(){ return \"place_of_view\" }\n\n    static get googleTypesListManual(){\n        return [\n        ]\n    }\n    static get googleTypesListAutomatic(){\n        return [\n        ]\n    }\n    static get googleTypesList(){\n        return [\n        ]\n    }\n\n    static get customTypesList(){\n        return [\n            PlaceTypeEnum.reserve,\n            PlaceTypeEnum.botanical_garden,\n            PlaceTypeEnum.beach,\n            PlaceTypeEnum.mountains,\n            PlaceTypeEnum.sea,\n            PlaceTypeEnum.lake,\n            PlaceTypeEnum.restaurant,\n            PlaceTypeEnum.art_gallery,\n            PlaceTypeEnum.tourist_attraction,\n            PlaceTypeEnum.campground,\n            PlaceTypeEnum.church,\n            PlaceTypeEnum.mosque,\n            PlaceTypeEnum.museum,\n            PlaceTypeEnum.theater,\n            PlaceTypeEnum.park,\n            PlaceTypeEnum.place_of_view,\n        ]\n    }\n\n    static get list(){\n        return [\n            ...PlaceTypeEnum.customTypesList,\n            ...PlaceTypeEnum.googleTypesList,\n        ]\n    }\n}\n","export default class SightLanguageFieldsModel {\n    constructor(data = {}) {\n        this.name = data.name;\n        this.description = data.description;\n    }\n};\n","import MediaModel from \"../media.model\";\nimport SightLanguageFieldsModel from \"./languageFields.model\";\nimport TranslateModel from \"../translate.model\";\n\nexport default class SightModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.number_of_views = data.number_of_views || 0;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.original_name = data.original_name;\n        this.city = data.city;\n        this.check_coordinates = data.check_coordinates;\n        this.need_review = data.need_review;\n        this.work_status = data.work_status;\n        this.place_type = data.place_type || [];\n        this.opening_hours = data.opening_hours || null;\n        this.formatted_address = data.formatted_address;\n        this.website = data.website;\n        this.international_phone_number = data.international_phone_number;\n        this.translations = (data.translations || []).map( translate => new TranslateModel(translate, SightLanguageFieldsModel));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_SIGHT_CREATE, API_ADMIN_SIGHT_CREATE_BATCH,\n    API_ADMIN_SIGHT_LIST,\n    API_MAKE_ADMIN_SIGHT_CHANGE_STATUS,\n    API_MAKE_ADMIN_SIGHT_DELETE,\n    API_MAKE_ADMIN_SIGHT_GET_CITIES,\n    API_MAKE_ADMIN_SIGHT_NEED_REVIEW,\n    API_MAKE_ADMIN_SIGHT_SHOW,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_SIGHT_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport SightModel from \"../../model/Sight/sight.model\";\n\nexport default class SightService {\n    static async show(sightId) {\n        return new SightModel(await axios.get(API_MAKE_ADMIN_SIGHT_SHOW(sightId)));\n    }\n\n    static async list(params) {\n        let sightList = await axios.get(API_ADMIN_SIGHT_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n\n        sightList.data = sightList.data.map(sight => new SightModel(sight))\n\n        return sightList;\n    }\n\n    static async create(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE, data));\n    }\n\n    static async createBatch(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE_BATCH, data));\n    }\n\n    static async update(sightId, data) {\n        return new SightModel(await axios.put(API_MAKE_ADMIN_SIGHT_UPDATE(sightId), data));\n    }\n\n    static async delete(sightId) {\n        return await axios.delete(API_MAKE_ADMIN_SIGHT_DELETE(sightId));\n    }\n\n\n    static async updateTranslate(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT(sightId), data);\n    }\n\n    static async updateWorkStatus(sightId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_CHANGE_STATUS(sightId), {work_status: workStatus});\n    }\n\n    static async needReview(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_NEED_REVIEW(sightId), data);\n    }\n\n    static async getCitiesBySight(sightId) {\n        return await axios.get(API_MAKE_ADMIN_SIGHT_GET_CITIES(sightId));\n    }\n}\n\n","export default class ExcursionRouteTypeEnum{\n    static get walking(){ return \"walking\" }\n    static get driving(){ return \"driving\" }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_CITY_CREATE,\n    API_MAKE_ADMIN_CITY_DELETE,\n    API_ADMIN_CITY_LIST,\n    API_MAKE_ADMIN_CITY_TAXI_CREATE,\n    API_MAKE_ADMIN_CITY_SHOW,\n    API_MAKE_ADMIN_CITY_EDIT,\n    API_MAKE_ADMIN_CITY_TAXI_EDIT,\n    API_MAKE_ADMIN_CITY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_CITY_CHANGE_STATUS,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class CityService {\n    static async list(params) {\n        let cityList = await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n\n    static async show(cityId) {\n        return new CityModel(await axios.get(API_MAKE_ADMIN_CITY_SHOW(cityId)));\n    }\n\n    static async create(data) {\n        return new CityModel(await axios.post(API_ADMIN_CITY_CREATE, data));\n    }\n\n    static async delete(cityId) {\n        return await axios.delete(API_MAKE_ADMIN_CITY_DELETE(cityId))\n    }\n\n    static async update(cityId, data) {\n        return new CityModel(await axios.put(API_MAKE_ADMIN_CITY_EDIT(cityId), data));\n    }\n\n    static async updateTranslate(cityId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TRANSLATE_EDIT(cityId), data);\n    }\n\n    static async updateWorkStatus(cityId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_CITY_CHANGE_STATUS(cityId), {work_status: workStatus});\n    }\n}\n\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList(params) {\n        let cityList =  await axios.get(ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class GoogleClient {\n    static key = process.env.REACT_APP_GEOCODING_API\n\n    static getGeometryForCity(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${this.key}`)\n            .then(res => res.json())\n            .then(city => {\n                if (city.results[0]) {\n                    const {northeast, southwest} = city.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static getGeometryForCountry(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=country&key=${this.key}`)\n            .then(res => res.json())\n            .then(country => {\n                if (country.results[0]) {\n                    const {northeast, southwest} = country.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static async getPhotoFile (photo_ref){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${this.key}`)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( photosList ){\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index === 0) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photoReference = shortPhotosList[i].photo_reference;\n            const file = await this.getPhotoFile(photoReference)\n\n            if (file.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static getPlaceDetails( placeId, fields, props = {} ){\n        const defaultFields = [\n            'international_phone_number',\n            'opening_hours',\n            'website',\n            'geometry',\n            'type',\n            'photo',\n            'formatted_address',\n            'address_components',\n            'name',\n            'place_id',\n        ]\n\n        const requestDetailPlace = {\n            placeId: placeId,\n            fields: fields || defaultFields\n        };\n\n        return fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${this.key}`)\n            .then(res => res.json())\n            .then(res => {\n                if(res.status === \"OK\"){\n                    return res.result;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(res.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: res.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getDirection( params ){\n        const currentParams = {\n            key: this.key,\n            ...params,\n        }\n        const url = `https://maps.googleapis.com/maps/api/directions/json?${QueryString.stringify(currentParams)}`\n\n        return fetch(url)\n            .then(res => res.json())\n            .then(direction => {\n                if(direction.status === \"OK\"){\n                    return direction;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(direction.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: direction.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getBounds(north, south, east, west) {\n        const bounds = new window.google.maps.LatLngBounds();\n\n        bounds.extend(new window.google.maps.LatLng(north, east));\n        bounds.extend(new window.google.maps.LatLng(south, west));\n\n        return bounds;\n    }\n\n    static getMarker(map, position = {}, icon = null, props){\n        return new window.google.maps.Marker({\n            position: position,\n            icon,\n            map,\n            ...props\n        })\n    }\n\n    static getRectangle( map, bounds, color = \"blue\", props = {} ){\n        return new window.google.maps.Rectangle({\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: color,\n            fillOpacity: 0.35,\n            bounds: bounds.getNorthEast ? GoogleClient.parseBounds(bounds) : bounds,\n            map,\n            ...props,\n        });\n    }\n\n    static getPolyline( map, path, props = {} ){\n        return new window.google.maps.Polyline({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            geodesic: true,\n            path,\n            map,\n            ...props,\n        })\n    }\n\n    static generateCustomMarker(color = \"black\") {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    static parseBounds( bounds ){\n        return {\n            north: bounds.getNorthEast().lat(), //noth lat\n            south: bounds.getSouthWest().lat(), //south lat\n            east: bounds.getNorthEast().lng(), //noth lng\n            west: bounds.getSouthWest().lng() //south lng\n        }\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            if(openingHours.length === 1 && openingHours[0].close === undefined){\n                formatOpeningHours = days.reduce((result, day ) => ({\n                    ...result,\n                    [day]: {\n                        open: \"00:00\",\n                        close: \"00:00\"\n                    }\n                }), {})\n\n                return formatOpeningHours\n            }\n\n            formatOpeningHours = openingHours.reduce( (result, openHour) => ({\n                ...result,\n                [days[openHour.open.day]]: {\n                    open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                    close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                }\n            }), {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","export default class CurrencyModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.currency_code = data.currency_code;\n    }\n}\n","import PlaceTypeEnum from \"../enums/PlaceType\";\nimport FoursquarePlaceTypeEnum from \"../enums/FoursquarePlaceType\";\n\nexport default class PlaceTypeTranslate {\n    static getTranslateForType( type ) {\n        const typeObj = {\n            [PlaceTypeEnum.reserve]: \"Заповідник\",\n            [PlaceTypeEnum.botanical_garden]: \"Ботанічний сад\",\n            [PlaceTypeEnum.beach]: \"Пляж\",\n            [PlaceTypeEnum.mountains]: \"Гори\",\n            [PlaceTypeEnum.sea]: \"Море\",\n            [PlaceTypeEnum.lake]: \"Озеро\",\n            [PlaceTypeEnum.art_gallery]: \"Картинна галерея\",\n            [PlaceTypeEnum.tourist_attraction]: \"Туристична пам'ятка\",\n            [PlaceTypeEnum.campground]: \"Кемпінг\",\n            [PlaceTypeEnum.church]: \"Церква\",\n            [PlaceTypeEnum.theater]: \"Театр\",\n            [PlaceTypeEnum.mosque]: \"Мечеть\",\n            [PlaceTypeEnum.museum]: \"Музей\",\n            [PlaceTypeEnum.park]: \"Парк\",\n            [PlaceTypeEnum.restaurant]: \"Ресторан\",\n            [PlaceTypeEnum.place_of_view]: \"Красивый вид\",\n        }\n\n        return typeObj[type] || `ERROR ${type}`\n    }\n\n    static getTranslateForFoursquareType( type ) {\n        const typeObj = {\n            [FoursquarePlaceTypeEnum.place_of_view]: \"Красивое место\",\n            [FoursquarePlaceTypeEnum.reserve]: \"Природный заповедник\",\n            [FoursquarePlaceTypeEnum.botanical_garden]: \"Батонический сад\",\n            [FoursquarePlaceTypeEnum.mountain]: \"Гора\",\n            [FoursquarePlaceTypeEnum.lake]: \"Озеро\",\n            [FoursquarePlaceTypeEnum.restaurant]: \"Ресторан\",\n            [FoursquarePlaceTypeEnum.art_gallery]: \"Арт галлерея\",\n            [FoursquarePlaceTypeEnum.building]: \"Здание и сооружение\",\n            [FoursquarePlaceTypeEnum.castle]: \"Замок\",\n            [FoursquarePlaceTypeEnum.garden]: \"Сад\",\n            [FoursquarePlaceTypeEnum.historical_and_protected_object]: \"Исторический объект и защещеные объекты\",\n            [FoursquarePlaceTypeEnum.monument]: \"Памятник\",\n            [FoursquarePlaceTypeEnum.palace]: \"Дворец\",\n            [FoursquarePlaceTypeEnum.square]: \"Площадь\",\n            [FoursquarePlaceTypeEnum.art_museum]: \"Музей искуств\",\n            [FoursquarePlaceTypeEnum.historical_museum]: \"Исторческий музей\",\n            [FoursquarePlaceTypeEnum.science_museum]: \"Музей наук\",\n            [FoursquarePlaceTypeEnum.theater]: \"Теарт\",\n            [FoursquarePlaceTypeEnum.opera_theatre]: \"Оперный театр\",\n            [FoursquarePlaceTypeEnum.forest]: \"Лес\",\n            [FoursquarePlaceTypeEnum.national_park]: \"Национальный парк\",\n            [FoursquarePlaceTypeEnum.natural_park]: \"Природный парк\",\n        }\n\n        return typeObj[type] || `ERROR ${type}`\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CountryFieldsModel {\n    constructor(data = {}) {\n        this.name = data.name;\n        this.description = data.description;\n    }\n};\n","import CityModel from '../City/city.model'\nimport MediaModel from \"../media.model\";\nimport CurrencyModel from \"../currency.model\";\nimport LanguageModel from \"../language.model\";\nimport CountryFieldsModel from \"./languageFields.model\";\nimport TranslateModel from \"../translate.model\";\n\n\nconst portraitImage = {\n    id: null,\n    path: \"https://images.unsplash.com/photo-1629809189194-8302d4345c8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dWtyYWluZSUyMGZsYWd8ZW58MHx8MHx8&w=1000&q=80\"\n}\n\nconst landscapeImage = {\n    id: null,\n    path: \"https://media.istockphoto.com/photos/close-up-ukranian-flag-picture-id163641275?b=1&k=20&m=163641275&s=170667a&w=0&h=CVdqTfh31VTDbr7hqcBTbyocEZLlWTC02Kip6niMXBw=\"\n}\n\nexport default class CountryModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.country_code_in_iso_3166_1_format = data.country_code_in_iso_3166_1_format;\n        this.population = data.population;\n        this.official_language = new LanguageModel(data.official_language);\n        this.capital = data.capital ? new CityModel(data.capital) : null;\n        this.currency = new CurrencyModel(data.currency);\n        this.name = data.name;\n        this.geometry = data.geometry;\n        this.translations = (data.translations || []).map( translate => new TranslateModel(translate, CountryFieldsModel));\n        this.description = data.description;\n        this.ambulance_number = data.ambulance_number;\n        this.original_name = data.original_name;\n        this.has_seas = data.has_seas;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.has_mountains = data.has_mountains;\n        this.landscape_image = new MediaModel(data.landscape_image || landscapeImage);\n        this.portrait_image = new MediaModel(data.portrait_image || portraitImage);\n        this.has_mountains = data.has_mountains;\n        this.happiness_rating = data.happiness_rating;\n        this.highest_point = data.highest_point;\n        this.country_area = data.country_area;\n        this.safety_index = data.safety_index;\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","import PlaceTypeEnum from \"./PlaceType\";\n\nexport default class FoursquarePlaceTypeEnum {\n    static get place_of_view(){return \"place_of_view\"}\n    static get reserve(){return \"reserve\"}\n    static get botanical_garden(){return \"botanical_garden\"}\n    static get mountain(){return \"mountain\"}\n    static get lake(){return \"lake\"}\n    static get restaurant(){return \"restaurant\"}\n    static get art_gallery(){return \"art_gallery\"}\n    static get building(){return \"building\"}\n    static get castle(){return \"castle\"}\n    static get garden(){return \"garden\"}\n    static get historical_and_protected_object(){return \"historical_and_protected_object\"}\n    static get monument(){return \"monument\"}\n    static get palace(){return \"palace\"}\n    static get square(){return \"square\"}\n    static get art_museum(){return \"art_museum\"}\n    static get historical_museum(){return \"historical_museum\"}\n    static get science_museum(){return \"science_museum\"}\n    static get theater(){return \"theater\"}\n    static get opera_theatre(){return \"opera_theatre\"}\n    static get forest(){return \"forest\"}\n    static get national_park(){return \"national_park\"}\n    static get natural_park(){return \"natural_park\"}\n\n    static get typeOriginIds() {\n        return {\n            [PlaceTypeEnum.reserve]: [16028],\n            [PlaceTypeEnum.botanical_garden]: [16005],\n            [PlaceTypeEnum.mountains]: [16027],\n            [PlaceTypeEnum.lake]: [16023],\n            [PlaceTypeEnum.restaurant]: [13065],\n            [PlaceTypeEnum.art_gallery]: [10004],\n            [PlaceTypeEnum.tourist_attraction]: [16007, 16011, 16017, 16020, 16026, 16031, 16041],\n            [PlaceTypeEnum.museum]: [10028, 10030, 10031],\n            [PlaceTypeEnum.theater]: [10043, 10042],\n            [PlaceTypeEnum.park]: [16015, 16034, 16035],\n            [PlaceTypeEnum.place_of_view]: [16046],\n        }\n    }\n\n    static get typeIds() {\n        return {\n            [FoursquarePlaceTypeEnum.place_of_view]: 16046,\n            [FoursquarePlaceTypeEnum.reserve]: 16028,\n            [FoursquarePlaceTypeEnum.botanical_garden]: 16005,\n            [FoursquarePlaceTypeEnum.mountain]: 16027,\n            [FoursquarePlaceTypeEnum.lake]: 16023,\n            [FoursquarePlaceTypeEnum.restaurant]: 13065,\n            [FoursquarePlaceTypeEnum.art_gallery]: 10004,\n            [FoursquarePlaceTypeEnum.building]: 16007,\n            [FoursquarePlaceTypeEnum.castle]: 16011,\n            [FoursquarePlaceTypeEnum.garden]: 16017,\n            [FoursquarePlaceTypeEnum.historical_and_protected_object]: 16020,\n            [FoursquarePlaceTypeEnum.monument]: 16026,\n            [FoursquarePlaceTypeEnum.palace]: 16031,\n            [FoursquarePlaceTypeEnum.square]: 16041,\n            [FoursquarePlaceTypeEnum.art_museum]: 10028,\n            [FoursquarePlaceTypeEnum.historical_museum]: 10030,\n            [FoursquarePlaceTypeEnum.science_museum]: 10031,\n            [FoursquarePlaceTypeEnum.theater]: 10043,\n            [FoursquarePlaceTypeEnum.opera_theatre]: 10042,\n            [FoursquarePlaceTypeEnum.forest]: 16015,\n            [FoursquarePlaceTypeEnum.national_park]: 16034,\n            [FoursquarePlaceTypeEnum.natural_park]: 16035,\n        }\n    }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_COUNTRY_CREATE,\n    API_ADMIN_COUNTRY_LIST,\n    API_MAKE_ADMIN_COUNTRY_DELETE,\n    API_MAKE_ADMIN_COUNTRY_SHOW,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_COUNTRY_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CountryModel from \"../../model/Country/country.model\";\n\nexport default class CountryService {\n    static async list(params) {\n        let countryList = await axios.get(API_ADMIN_COUNTRY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        countryList.data = countryList.data.map( country => new CountryModel(country));\n\n        return countryList;\n    }\n\n    static async show(countryId) {\n        return new CountryModel(await axios.get(API_MAKE_ADMIN_COUNTRY_SHOW(countryId)));\n    }\n\n    static async create(data) {\n        return new CountryModel(await axios.post(API_ADMIN_COUNTRY_CREATE, data));\n    }\n\n    static async update(countryId, data) {\n        return new CountryModel(await axios.put(API_MAKE_ADMIN_COUNTRY_UPDATE(countryId), data));\n    }\n\n    static async updateTranslate(countryId, data) {\n        return await axios.put(API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT(countryId), data);\n    }\n\n    static async delete(countryId) {\n        return await axios.delete(API_MAKE_ADMIN_COUNTRY_DELETE(countryId));\n    }\n}\n\n"],"sourceRoot":""}