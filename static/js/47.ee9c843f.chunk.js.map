{"version":3,"sources":["pages/web/pages/Auth/Login/index.jsx","components/Form/components/FormItem.jsx","components/Form/index.jsx","components/Form/FieldInput.jsx","components/Form/FieldCheckbox.jsx"],"names":["Login","history","getUser","useContext","AuthContext","onSubmit","useCallback","value","AuthService","login","access_token","StorageService","accessToken","push","ADMIN_COUNTRY_LIST_URI","size","direction","style","width","render","handleSubmit","submitting","name","placeholder","input","prefix","type","htmlType","disabled","FormItem","label","children","hidden","props","Item","validateStatus","meta","error","submitError","touched","help","i","FormUI","onError","AlertContext","setAlertError","onSubmitForm","values","console","log","message","errors","Object","keys","reduce","newError","splitKey","split","helpString","forEach","key","eval","mutators","arrayMutators","clear","state","field","changeValue","setValue","identity","FieldInput","onBlur","onChange","onPaste","rest","Components","Input","Password","InputNumber","parse","Fragment","e","target","clipboardData","getData","FieldCheckbox","margin","checked"],"mappings":"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","file":"static/js/47.ee9c843f.chunk.js","sourcesContent":["/**\n * external libs\n */\nimport React, {useCallback, useContext} from 'react';\nimport {Link} from 'react-router-dom'\nimport {Button, Row, Space} from 'antd'\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\n/**\n * components\n */\nimport Form from '../../../../../components/Form'\nimport FieldCheckbox from '../../../../../components/Form/FieldCheckbox'\nimport FieldInput from '../../../../../components/Form/FieldInput'\n/**\n * services\n */\nimport AuthService from '../../../../../services/auth.service';\nimport StorageService from \"../../../../../services/storage.service\";\n/**\n * context\n */\nimport {AuthContext} from \"../../../../context/auth.context\";\nimport {ADMIN_COUNTRY_LIST_URI} from \"../../../../../constants/admin/uri.constant\";\n\n\nexport default function Login({history}) {\n    const {getUser} = useContext(AuthContext);\n\n    const onSubmit = useCallback(async (value) => {\n        const {access_token} = await AuthService.login(value);\n        StorageService.accessToken = access_token;\n\n        await getUser();\n\n        history.push(ADMIN_COUNTRY_LIST_URI)\n    }, [history]);\n\n\n    return (\n        <Space size={10} direction=\"vertical\" style={{width: \"100%\"}}>\n            <Form onSubmit={onSubmit}\n                  render={({handleSubmit, submitting}) => (\n                      <form onSubmit={handleSubmit}>\n                          <FieldInput name=\"login\"\n                                      placeholder=\"Enter login\"\n                                      input={{\n                                          prefix: <UserOutlined/>\n                                      }}/>\n                          <FieldInput name=\"password\"\n                                      type=\"password\"\n                                      placeholder=\"Enter password\"\n                                      input={{\n                                          prefix: <LockOutlined/>\n                                      }}/>\n                          <Space direction=\"vertical\" style={{width: \"100%\"}} size={20}>\n                              <Button type=\"primary\"\n                                      htmlType=\"submit\" disabled={submitting} size=\"large\"\n                                      style={{width: \"100%\"}}>\n                                  Sign in\n                              </Button>\n                          </Space>\n                      </form>\n                  )}\n            />\n        </Space>\n    );\n};\n\n","import {Form} from \"antd\";\nimport React from \"react\";\n\nexport default function FormItem({ label, name, children, hidden, ...props }) {\n    return (\n        <Form.Item label={label || \"\"}\n                   name={name}\n                   validateStatus={(props.meta.error || props.meta.submitError) && props.meta.touched ? \"error\" : false}\n                   help={(props.meta.error || props.meta.submitError) && props.meta.touched ? props.meta.error || props.meta.submitError : false}\n                   hidden={hidden}>\n            {children}\n        </Form.Item>\n    )\n}\n","import React, {useContext} from \"react\";\nimport {Form} from \"react-final-form\";\nimport arrayMutators from 'final-form-arrays'\nimport {AlertContext} from \"../../pages/context/alert.context\";\n\nexport default function FormUI({render, onSubmit = () => {} , onError = () => {}, ...props}) {\n    const {setAlertError} = useContext(AlertContext)\n\n    const onSubmitForm = async (values) => {\n        try {\n            await onSubmit(values);\n        } catch (e) {\n            console.log(e, \"1\")\n            setAlertError(e.message);\n\n            if(!e.errors){\n                return console.error(e.message)\n            }\n            onError();\n\n\n            return Object.keys(e.errors).reduce((newError, keys) => {\n                const splitKey = keys.split('.');\n                const error = typeof e.errors[keys] === 'string' ? e.errors[keys] : e.errors[keys][0];\n\n                let helpString = 'newError';\n                splitKey.forEach( key => {\n                    helpString += `['${key}']`;\n                    if(!eval(`${helpString}`)){\n                        eval(`${helpString} = {}`);\n                    }\n                });\n\n                eval(`${helpString} = \"${error}\"`);\n\n                return newError\n            }, {});\n        }\n    }\n\n    return (\n        <Form onSubmit={onSubmitForm}\n              mutators={{\n                  ...arrayMutators,\n                  clear: ([field], state, {changeValue}) => {\n                      changeValue(state, field, () => undefined);\n                  },\n                  setValue: ([field, value], state, {changeValue}) => {\n                      changeValue(state, field, () => value)\n                  }\n              }}\n              render={render}\n              {...props}\n        />\n    )\n}\n","/**\n * external libs\n */\nimport {Field} from \"react-final-form\";\nimport React from \"react\";\nimport {Input, InputNumber} from 'antd'\n/**\n * components\n */\nimport FormItem from './components/FormItem'\n\nconst identity = value => (value);\n\nexport default function FieldInput({label = \"\", name, placeholder = \"\", type = \"text\", disabled = false, onBlur, onChange, onPaste, input, ...rest}) {\n    const Components = type === 'password' ? Input.Password :  type === 'number' ? InputNumber : Input;\n\n    return (\n        <Field name={name} parse={identity}>\n            {props => (\n                <FormItem label={label} name={name} {...props} {...rest}>\n                    <React.Fragment>\n                        <Components placeholder={placeholder}\n                                    onChange={(e) => {\n                                        if(onChange){\n                                            onChange(e.target.value)\n                                        }\n\n\n                                        props.input.onChange(e)\n                                    }}\n                                    onPaste={e => {\n                                        if(onPaste){\n                                            onPaste(e.clipboardData.getData('Text'))\n                                        }\n                                    }}\n                                    onBlur={(e) => {\n                                        if(onBlur) {\n                                            onBlur(e)\n                                        }\n                                        props.input.onBlur(e);\n                                    }}\n                                    disabled={disabled}\n                                    name={name}\n                                    type={type}\n                                    value={props.input.value}\n                                    size=\"large\"\n                                    style={{width: \"100%\"}}\n                                    {...input}\n                                    {...props} />\n                    </React.Fragment>\n                </FormItem>\n            )}\n        </Field>\n    )\n}\n","/**\n * external libs\n */\nimport {Field} from \"react-final-form\";\nimport React from \"react\";\nimport {Checkbox} from 'antd';\n/**\n * components\n */\nimport FormItem from './components/FormItem'\n\nexport default function FieldCheckbox({label, name, onBlur}) {\n    return (\n        <Field\n            name={name}\n        >\n            {props => (\n                <FormItem name={name} style={{margin: 0}} {...props}>\n                    <Checkbox onChange={props.input.onChange}\n                              onBlur={e => {\n                                  if(onBlur) {\n                                      onBlur(e)\n                                  }\n                                  props.input.onBlur(e)\n                              }}\n                              checked={props.input.value}\n                              name={name}\n                              {...props}\n                    >\n                        {label}\n                    </Checkbox>\n                </FormItem>\n            )}\n        </Field>\n    )\n}\n"],"sourceRoot":""}