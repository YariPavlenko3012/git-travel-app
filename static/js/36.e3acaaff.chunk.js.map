{"version":3,"sources":["pages/admin/pages/Users/Create/index.jsx","components/Form/components/FormItem.jsx","components/Form/index.jsx","components/Form/FieldInput.jsx"],"names":["CreateCityForm","countryId","useHistory","createUser","value","onSubmit","render","handleSubmit","submitting","onFinish","layout","style","display","flexWrap","alignItems","width","marginRight","label","name","placeholder","required","variant","htmlType","disabled","FormItem","children","hidden","props","Item","validateStatus","meta","error","submitError","touched","help","i","FormUI","onError","useContext","AlertContext","setAlertError","onSubmitForm","values","message","errors","console","Object","keys","reduce","newError","splitKey","split","helpString","forEach","key","eval","mutators","arrayMutators","clear","state","field","changeValue","setValue","FieldInput","type","onBlur","onChange","onPaste","input","rest","Components","Input","Password","Fragment","e","target","clipboardData","getData","size"],"mappings":"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","file":"static/js/36.e3acaaff.chunk.js","sourcesContent":["/**\n * external libs\n */\nimport {Button, Form} from \"antd\";\nimport React from \"react\";\nimport {useHistory} from 'react-router-dom'\n/**\n * components\n */\nimport FieldInput from \"../../../../../components/Form/FieldInput\";\nimport FormUI from \"../../../../../components/Form\";\n\nexport default function CreateCityForm({countryId}) {\n    const history = useHistory();\n\n    const createUser = async (value) => {\n\n    };\n\n    return (\n        <FormUI onSubmit={createUser}\n                render={({handleSubmit, submitting}) => (\n                    <Form onFinish={handleSubmit} layout=\"vertical\">\n                        <div style={{display: \"flex\", flexWrap: \"wrap\", alignItems: \"flex-end\"}}>\n                            <div style={{width: \"calc(100% / 4 - 10px)\", marginRight: 10}}>\n                                <FieldInput label=\"Login\"\n                                            name=\"login\"\n                                            placeholder=\"Enter login\"\n                                            required={true}/>\n                            </div>\n                            <div style={{width: \"calc(100% / 4 - 10px)\", marginRight: 10}}>\n                                <FieldInput label=\"Email\"\n                                            name=\"email\"\n                                            placeholder=\"Enter email\"\n                                            required={true}/>\n                            </div>\n                            <div style={{width: \"calc(100% / 4 - 10px)\", marginRight: 10}}>\n                                <FieldInput label=\"Password\"\n                                            name=\"password\"\n                                            placeholder=\"Enter password\"\n                                            required={true}/>\n                            </div>\n                            <div style={{width: \"calc(100% / 4 - 10px)\", marginRight: 10}}>\n                                <FieldInput label=\"Confirm password\"\n                                            name=\"confirm_password\"\n                                            placeholder=\"Enter confirm password\"\n                                            required={true}/>\n                            </div>\n                        </div>\n                        <Button variant=\"primary\" htmlType=\"submit\" disabled={submitting}>Create</Button>\n                    </Form>\n                )}\n        />\n    )\n}\n","import {Form} from \"antd\";\nimport React from \"react\";\n\nexport default function FormItem({ label, name, children, hidden, ...props }) {\n    return (\n        <Form.Item label={label || \"\"}\n                   name={name}\n                   validateStatus={(props.meta.error || props.meta.submitError) && props.meta.touched ? \"error\" : false}\n                   help={(props.meta.error || props.meta.submitError) && props.meta.touched ? props.meta.error || props.meta.submitError : false}\n                   hidden={hidden}>\n            {children}\n        </Form.Item>\n    )\n}\n","import React, {useContext} from \"react\";\nimport {Form} from \"react-final-form\";\nimport arrayMutators from 'final-form-arrays'\nimport {AlertContext} from \"../../pages/context/alert.context\";\n\nexport default function FormUI({render, onSubmit = () => {} , onError = () => {}, ...props}) {\n    const {setAlertError} = useContext(AlertContext)\n\n    const onSubmitForm = async (values) => {\n        try {\n            await onSubmit(values);\n        } catch (e) {\n            setAlertError(e.message);\n        \n            if(!e.errors){\n                return console.error(e.message)\n            }\n            onError();\n        \n        \n            return Object.keys(e.errors).reduce((newError, keys) => {\n                const splitKey = keys.split('.');\n                const error = typeof e.errors[keys] === 'string' ? e.errors[keys] : e.errors[keys][0];\n            \n                let helpString = 'newError';\n                splitKey.forEach( key => {\n                    helpString += `['${key}']`;\n                    if(!eval(`${helpString}`)){\n                        eval(`${helpString} = {}`);\n                    }\n                });\n            \n                eval(`${helpString} = \"${error}\"`);\n            \n                return newError\n            }, {});\n        }\n    }\n\n    return (\n        <Form onSubmit={onSubmitForm}\n              mutators={{\n                  ...arrayMutators,\n                  clear: ([field], state, {changeValue}) => {\n                      changeValue(state, field, () => undefined);\n                  },\n                  setValue: ([field, value], state, {changeValue}) => {\n                      changeValue(state, field, () => value)\n                  }\n              }}\n              render={render}\n              {...props}\n        />\n    )\n}\n","/**\n * external libs\n */\nimport {Field} from \"react-final-form\";\nimport React from \"react\";\nimport {Input} from 'antd'\n/**\n * components\n */\nimport FormItem from './components/FormItem'\n\nexport default function FieldInput({label = \"\", name, placeholder = \"\", type = \"text\", disabled = false, onBlur, onChange, onPaste, input, ...rest}) {\n    const Components = type === 'password' ? Input.Password : Input;\n\n    return (\n        <Field name={name}>\n            {props => (\n                <FormItem label={label} name={name} {...props} {...rest}>\n                    <React.Fragment>\n                        <Components placeholder={placeholder}\n                                    onChange={(e) => {\n                                        if(onChange){\n                                            onChange(e.target.value)\n                                        }\n\n                                        props.input.onChange(e)\n                                    }}\n                                    onPaste={e => {\n                                        if(onPaste){\n                                            onPaste(e.clipboardData.getData('Text'))\n                                        }\n                                    }}\n                                    onBlur={(e) => {\n                                        if(onBlur) {\n                                            onBlur(e)\n                                        }\n                                        props.input.onBlur(e);\n                                    }}\n                                    disabled={disabled}\n                                    name={name}\n                                    type={type}\n                                    value={props.input.value}\n                                    size=\"large\"\n                                    {...input}\n                                    {...props} />\n                    </React.Fragment>\n                </FormItem>\n            )}\n        </Field>\n    )\n}\n"],"sourceRoot":""}