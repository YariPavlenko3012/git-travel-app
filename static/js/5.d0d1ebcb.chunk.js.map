{"version":3,"sources":["enums/PlaceType.js","services/admin/sight.service.js","utils/PlaceTypeTranslate.js","enums/FoursquarePlaceType.js"],"names":["PlaceTypeEnum","reserve","botanical_garden","beach","mountains","sea","lake","restaurant","art_gallery","tourist_attraction","campground","church","mosque","museum","theater","park","place_of_view","customTypesList","googleTypesList","SightService","sightId","params","SightModel","axios","get","API_MAKE_ADMIN_SIGHT_SHOW","paramsSerializer","QueryString","stringify","merge","all","include","API_ADMIN_SIGHT_LIST","sightList","data","map","sight","post","API_ADMIN_SIGHT_CREATE","API_ADMIN_SIGHT_CREATE_BATCH","put","API_MAKE_ADMIN_SIGHT_UPDATE","delete","API_MAKE_ADMIN_SIGHT_DELETE","API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_SIGHT_CHANGE_STATUS","work_status","API_MAKE_ADMIN_SIGHT_NEED_REVIEW","API_MAKE_ADMIN_SIGHT_GET_CITIES","cities","city","CityModel","PlaceTypeTranslate","type","FoursquarePlaceTypeEnum","mountain","building","castle","garden","historical_and_protected_object","monument","palace","square","art_museum","historical_museum","science_museum","opera_theatre","forest","national_park","natural_park"],"mappings":"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","file":"static/js/5.d0d1ebcb.chunk.js","sourcesContent":["export default class PlaceTypeEnum{\n    static get reserve(){ return \"reserve\" }\n    static get botanical_garden(){ return \"botanical_garden\" }\n    static get beach(){ return \"beach\" }\n    static get mountains(){ return \"mountains\" }\n    static get sea(){ return \"sea\" }\n    static get lake(){ return \"lake\" }\n    static get restaurant(){ return \"restaurant\" }\n    static get art_gallery(){ return \"art_gallery\" }\n    static get tourist_attraction(){ return \"tourist_attraction\" }\n    static get campground(){ return \"campground\" }\n    static get church(){ return \"church\" }\n    static get mosque(){ return \"mosque\" }\n    static get museum(){ return \"museum\" }\n    static get theater(){ return \"theater\" }\n    static get park(){ return \"park\" }\n    static get place_of_view(){ return \"place_of_view\" }\n\n    static get googleTypesListManual(){\n        return [\n        ]\n    }\n    static get googleTypesListAutomatic(){\n        return [\n        ]\n    }\n    static get googleTypesList(){\n        return [\n        ]\n    }\n\n    static get customTypesList(){\n        return [\n            PlaceTypeEnum.reserve,\n            PlaceTypeEnum.botanical_garden,\n            PlaceTypeEnum.beach,\n            PlaceTypeEnum.mountains,\n            PlaceTypeEnum.sea,\n            PlaceTypeEnum.lake,\n            PlaceTypeEnum.restaurant,\n            PlaceTypeEnum.art_gallery,\n            PlaceTypeEnum.tourist_attraction,\n            PlaceTypeEnum.campground,\n            PlaceTypeEnum.church,\n            PlaceTypeEnum.mosque,\n            PlaceTypeEnum.museum,\n            PlaceTypeEnum.theater,\n            PlaceTypeEnum.park,\n            PlaceTypeEnum.place_of_view,\n        ]\n    }\n\n    static get list(){\n        return [\n            ...PlaceTypeEnum.customTypesList,\n            ...PlaceTypeEnum.googleTypesList,\n        ]\n    }\n}\n","/**\n *service\n */\nimport axios from 'axios'\nimport merge from 'deepmerge'\n/**\n * const\n */\nimport {\n    API_ADMIN_SIGHT_CREATE, API_ADMIN_SIGHT_CREATE_BATCH,\n    API_ADMIN_SIGHT_LIST,\n    API_MAKE_ADMIN_SIGHT_CHANGE_STATUS,\n    API_MAKE_ADMIN_SIGHT_DELETE,\n    API_MAKE_ADMIN_SIGHT_GET_CITIES,\n    API_MAKE_ADMIN_SIGHT_NEED_REVIEW,\n    API_MAKE_ADMIN_SIGHT_SHOW,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_SIGHT_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport SightModel from \"../../model/Sight/sight.model\";\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class SightService {\n    static async show(sightId, params = {}) {\n        return new SightModel(await axios.get(API_MAKE_ADMIN_SIGHT_SHOW(sightId), {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(merge.all([\n                    params,\n                    {\n                        include: [\"translation\", \"translations.language\", \"images\", \"city.translation\", \"city.state.translation\", \"city.state.country.translation\"],\n                    }\n                ]))\n            }\n        }));\n    }\n\n    static async list(params) {\n        let sightList = await axios.get(API_ADMIN_SIGHT_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(merge.all([\n                    params,\n                    {\n                        include: [\"translation\", \"translations.language\", \"images\", \"city.translation\", \"city.state.translation\", \"city.state.country.translation\"],\n                    }\n                ]))\n            }\n        });\n\n\n        sightList.data = sightList.data.map(sight => new SightModel(sight))\n\n        return sightList;\n    }\n\n    static async create(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE, data));\n    }\n\n    static async createBatch(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE_BATCH, data));\n    }\n\n    static async update(sightId, data) {\n        return new SightModel(await axios.put(API_MAKE_ADMIN_SIGHT_UPDATE(sightId), data));\n    }\n\n    static async delete(sightId) {\n        return await axios.delete(API_MAKE_ADMIN_SIGHT_DELETE(sightId));\n    }\n\n\n    static async updateTranslate(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT(sightId), data);\n    }\n\n    static async updateWorkStatus(sightId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_CHANGE_STATUS(sightId), {work_status: workStatus});\n    }\n\n    static async needReview(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_NEED_REVIEW(sightId), data);\n    }\n\n    static async getCitiesBySight(sightId, params = {}) {\n        const cities = await axios.get(API_MAKE_ADMIN_SIGHT_GET_CITIES(sightId), {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify({\n                    ...params,\n                    include: ['translation']\n                })\n            }\n        })\n\n        return cities.data.map(city => new CityModel(city));\n    }\n}\n\n\n\n\n\n","import PlaceTypeEnum from \"../enums/PlaceType\";\nimport FoursquarePlaceTypeEnum from \"../enums/FoursquarePlaceType\";\n\nexport default class PlaceTypeTranslate {\n    static getTranslateForType( type ) {\n        const typeObj = {\n            [PlaceTypeEnum.reserve]: \"Заповідник\",\n            [PlaceTypeEnum.botanical_garden]: \"Ботанічний сад\",\n            [PlaceTypeEnum.beach]: \"Пляж\",\n            [PlaceTypeEnum.mountains]: \"Гори\",\n            [PlaceTypeEnum.sea]: \"Море\",\n            [PlaceTypeEnum.lake]: \"Озеро\",\n            [PlaceTypeEnum.art_gallery]: \"Картинна галерея\",\n            [PlaceTypeEnum.tourist_attraction]: \"Туристична пам'ятка\",\n            [PlaceTypeEnum.campground]: \"Кемпінг\",\n            [PlaceTypeEnum.church]: \"Церква\",\n            [PlaceTypeEnum.theater]: \"Театр\",\n            [PlaceTypeEnum.mosque]: \"Мечеть\",\n            [PlaceTypeEnum.museum]: \"Музей\",\n            [PlaceTypeEnum.park]: \"Парк\",\n            [PlaceTypeEnum.restaurant]: \"Ресторан\",\n            [PlaceTypeEnum.place_of_view]: \"Красивый вид\",\n        }\n\n        return typeObj[type] || `ERROR ${type}`\n    }\n\n    static getTranslateForFoursquareType( type ) {\n        const typeObj = {\n            [FoursquarePlaceTypeEnum.place_of_view]: \"Красивое место\",\n            [FoursquarePlaceTypeEnum.reserve]: \"Природный заповедник\",\n            [FoursquarePlaceTypeEnum.botanical_garden]: \"Батонический сад\",\n            [FoursquarePlaceTypeEnum.mountain]: \"Гора\",\n            [FoursquarePlaceTypeEnum.lake]: \"Озеро\",\n            [FoursquarePlaceTypeEnum.restaurant]: \"Ресторан\",\n            [FoursquarePlaceTypeEnum.art_gallery]: \"Арт галлерея\",\n            [FoursquarePlaceTypeEnum.building]: \"Здание и сооружение\",\n            [FoursquarePlaceTypeEnum.castle]: \"Замок\",\n            [FoursquarePlaceTypeEnum.garden]: \"Сад\",\n            [FoursquarePlaceTypeEnum.historical_and_protected_object]: \"Исторический объект и защещеные объекты\",\n            [FoursquarePlaceTypeEnum.monument]: \"Памятник\",\n            [FoursquarePlaceTypeEnum.palace]: \"Дворец\",\n            [FoursquarePlaceTypeEnum.square]: \"Площадь\",\n            [FoursquarePlaceTypeEnum.art_museum]: \"Музей искуств\",\n            [FoursquarePlaceTypeEnum.historical_museum]: \"Исторческий музей\",\n            [FoursquarePlaceTypeEnum.science_museum]: \"Музей наук\",\n            [FoursquarePlaceTypeEnum.theater]: \"Теарт\",\n            [FoursquarePlaceTypeEnum.opera_theatre]: \"Оперный театр\",\n            [FoursquarePlaceTypeEnum.forest]: \"Лес\",\n            [FoursquarePlaceTypeEnum.national_park]: \"Национальный парк\",\n            [FoursquarePlaceTypeEnum.natural_park]: \"Природный парк\",\n        }\n\n        return typeObj[type] || `ERROR ${type}`\n    }\n}\n","import PlaceTypeEnum from \"./PlaceType\";\n\nexport default class FoursquarePlaceTypeEnum {\n    static get place_of_view(){return \"place_of_view\"}\n    static get reserve(){return \"reserve\"}\n    static get botanical_garden(){return \"botanical_garden\"}\n    static get mountain(){return \"mountain\"}\n    static get lake(){return \"lake\"}\n    static get restaurant(){return \"restaurant\"}\n    static get art_gallery(){return \"art_gallery\"}\n    static get building(){return \"building\"}\n    static get castle(){return \"castle\"}\n    static get garden(){return \"garden\"}\n    static get historical_and_protected_object(){return \"historical_and_protected_object\"}\n    static get monument(){return \"monument\"}\n    static get palace(){return \"palace\"}\n    static get square(){return \"square\"}\n    static get art_museum(){return \"art_museum\"}\n    static get historical_museum(){return \"historical_museum\"}\n    static get science_museum(){return \"science_museum\"}\n    static get theater(){return \"theater\"}\n    static get opera_theatre(){return \"opera_theatre\"}\n    static get forest(){return \"forest\"}\n    static get national_park(){return \"national_park\"}\n    static get natural_park(){return \"natural_park\"}\n\n    static get typeOriginIds() {\n        return {\n            [PlaceTypeEnum.reserve]: [16028],\n            [PlaceTypeEnum.botanical_garden]: [16005],\n            [PlaceTypeEnum.mountains]: [16027],\n            [PlaceTypeEnum.lake]: [16023],\n            [PlaceTypeEnum.restaurant]: [13065],\n            [PlaceTypeEnum.art_gallery]: [10004],\n            [PlaceTypeEnum.tourist_attraction]: [16007, 16011, 16017, 16020, 16026, 16031, 16041],\n            [PlaceTypeEnum.museum]: [10028, 10030, 10031],\n            [PlaceTypeEnum.theater]: [10043, 10042],\n            [PlaceTypeEnum.park]: [16015, 16034, 16035],\n            [PlaceTypeEnum.place_of_view]: [16046],\n        }\n    }\n\n    static get typeIds() {\n        return {\n            [FoursquarePlaceTypeEnum.place_of_view]: 16046,\n            [FoursquarePlaceTypeEnum.reserve]: 16028,\n            [FoursquarePlaceTypeEnum.botanical_garden]: 16005,\n            [FoursquarePlaceTypeEnum.mountain]: 16027,\n            [FoursquarePlaceTypeEnum.lake]: 16023,\n            [FoursquarePlaceTypeEnum.restaurant]: 13065,\n            [FoursquarePlaceTypeEnum.art_gallery]: 10004,\n            [FoursquarePlaceTypeEnum.building]: 16007,\n            [FoursquarePlaceTypeEnum.castle]: 16011,\n            [FoursquarePlaceTypeEnum.garden]: 16017,\n            [FoursquarePlaceTypeEnum.historical_and_protected_object]: 16020,\n            [FoursquarePlaceTypeEnum.monument]: 16026,\n            [FoursquarePlaceTypeEnum.palace]: 16031,\n            [FoursquarePlaceTypeEnum.square]: 16041,\n            [FoursquarePlaceTypeEnum.art_museum]: 10028,\n            [FoursquarePlaceTypeEnum.historical_museum]: 10030,\n            [FoursquarePlaceTypeEnum.science_museum]: 10031,\n            [FoursquarePlaceTypeEnum.theater]: 10043,\n            [FoursquarePlaceTypeEnum.opera_theatre]: 10042,\n            [FoursquarePlaceTypeEnum.forest]: 16015,\n            [FoursquarePlaceTypeEnum.national_park]: 16034,\n            [FoursquarePlaceTypeEnum.natural_park]: 16035,\n        }\n    }\n}\n"],"sourceRoot":""}