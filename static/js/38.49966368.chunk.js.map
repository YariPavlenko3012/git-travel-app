{"version":3,"sources":["utils/FoursquareClient.js","pages/admin/pages/Generate/Place/components/PlaceTypes/index.module.scss","enums/GenerationType.js","pages/admin/pages/Generate/Place/components/ManualContent/index.jsx","pages/admin/pages/Generate/Place/components/PlaceTypes/index.jsx","pages/admin/pages/Generate/Place/components/CustomContent/index.jsx","pages/admin/pages/Generate/Place/components/RadioGenerationType/index.jsx","pages/admin/pages/Generate/Place/index.jsx","model/language.model.js","model/City/cabs.model.js","model/City/language.model.js","model/City/city.model.js","model/media.model.js","enums/PlaceType.js","model/Sight/language.model.js","model/Sight/sight.model.js","services/admin/sight.service.js","enums/ExcursionRouteType.js","services/admin/city.service.js","services/admin/generationPlace.service.js","utils/GoogleClient.js","model/currency.model.js","utils/PlaceTypeTranslate.js","model/Country/language.model.js","model/Country/country.model.js","enums/FoursquarePlaceType.js","services/admin/country.service.js"],"names":["i","FoursquareClient","searchParams","fetch","QueryString","stringify","headers","Authorization","this","key","accept","json","results","foursquarePlaceId","fields","join","placeDetails","console","log","opening_hours","parseOpeningHours","hours","regular","photoUrl","Promise","resolve","setTimeout","GenerationPlaceService","downloadImage","file","id","photosList","photos","status","filesIds","shortPhotosList","filter","_","index","length","photo","prefix","suffix","getPhotoFile","openingHours","days","formatOpeningHours","reduce","result","openHour","openTimeSplit","open","split","closeTimeSplit","openTimeFormat","closeTimeFormat","openTime","closeTime","day","slice","close","process","module","exports","GenerationTypeEnums","ManualContent","generatePlacesByCity","countryId","setLoading","mapRef","useState","countOfLimitSearch","setCountOfLimitSearch","cityList","setCityList","city","setCity","types","setTypes","type","setType","getCity","useContext","DictionaryContext","dictionary","cityId","CityService","show","getType","getCityList","cityWhiteList","country_id","manual","per_page","data","map","value","label","name","startManualGenerate","failed","generatedSquare","geometry","eq","Object","keys","FoursquarePlaceTypeEnum","typeIds","accum","isGeneratedTypes","uniqTypesId","includes","PlaceTypeTranslate","getTranslateForFoursquareType","useEffect","GoogleClient","getRectangle","current","north","south","east","west","style","display","gap","alignItems","marginBottom","onClick","disabled","width","margin","size","placeholder","options","showSearch","minWidth","filterOption","text","textLowerCase","trim","toLowerCase","labelLowerCase","valueLowerCase","toString","onChange","marginTop","e","target","Park","setPlaceTypes","placeTypes","places","className","styles","typeWrapper","typeWrapper__type","active","getTranslateForType","typeColor","PlaceTypeEnum","amusement_park","aquarium","tourist_attraction","zoo","restaurant","AutomaticContent","setGeometry","rectangle","useRef","timeOutId","allGeneratedSquare","generateSquareByGeometry","drawSquareByPlaceType","forEach","square","setMap","center","getCenter","squareSize","lat","maxHorizontalDif","lng","maxVerticalDif","draggable","editable","addListener","clearTimeout","bounds","getBounds","centerHorizontalLat","centerVerticalLng","newGeometry","parseBounds","errorDifHorizontal","errorDifVertical","setOptions","place_types","list","flexDirection","height","backgroundColor","RadioGenerationType","generationType","setGenerationType","Group","defaultValue","custom","GeneratePlace","useParams","country","setCountry","loading","mapBlockRef","squareRef","mapInit","opt","zoom","restriction","latLngBounds","strictBounds","window","google","maps","Map","limit","currentI","currentJ","forLoop","currentType","countStep","placeHeightCoordinate","placeWidthCoordinate","stepHorizontal","stepVertical","message","city_id","indexI","indexJ","getPlaces","foursquareType","lastType","typeOriginIds","reject","placesToDB","categories","ne","sw","create","place","placeToBd","sight_name","original_name","formatted_address","location","foursquare_place_id","fsq_id","check_coordinates","place_type","latitude","geocodes","main","longitude","getPhotosId","files_ids","getPlacesDetails","website","international_phone_number","tel","getMarker","SightService","createBatch","generationFinishCity","finish","getCountry","CountryService","ref","paddingTop","xmlns","version","viewBox","x","y","fill","d","attributeName","from","to","dur","repeatCount","LanguageModel","lang_code","CabModel","phone_number","CityLanguageModel","city_name","language","portraitImage","path","landscapeImage","CityModel","description","state","work_status","generation_count_of_squares","languages","images","image","MediaModel","population","landscape_image","portrait_image","cabs","cab","reserve","botanical_garden","beach","mountains","sea","lake","art_gallery","campground","church","mosque","museum","theater","park","place_of_view","customTypesList","googleTypesList","SightLanguageModel","sight_description","SightModel","number_of_views","need_review","sightId","axios","get","API_MAKE_ADMIN_SIGHT_SHOW","params","API_ADMIN_SIGHT_LIST","paramsSerializer","sightList","sight","post","API_ADMIN_SIGHT_CREATE","API_ADMIN_SIGHT_CREATE_BATCH","put","API_MAKE_ADMIN_SIGHT_UPDATE","delete","API_MAKE_ADMIN_SIGHT_DELETE","API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE","translateId","API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_SIGHT_CHANGE_STATUS","API_MAKE_ADMIN_SIGHT_NEED_REVIEW","API_MAKE_ADMIN_SIGHT_GET_CITIES","ExcursionRouteTypeEnum","API_ADMIN_CITY_LIST","API_MAKE_ADMIN_CITY_SHOW","API_ADMIN_CITY_CREATE","API_MAKE_ADMIN_CITY_DELETE","API_MAKE_ADMIN_CITY_EDIT","API_MAKE_ADMIN_CITY_TAXI_CREATE","cabId","API_MAKE_ADMIN_CITY_TAXI_EDIT","API_MAKE_ADMIN_CITY_TRANSLATE_EDIT","API_MAKE_ADMIN_CITY_CHANGE_STATUS","ADMIN_CREATE_SQUARE_GENERATE_PLACE","url","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE","then","res","viewport","northeast","southwest","photo_ref","photoReference","photo_reference","placeId","defaultFields","requestDetailPlace","catch","error","currentParams","direction","LatLngBounds","extend","LatLng","position","icon","props","Marker","color","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getNorthEast","Polyline","geodesic","pinSVGFilled","labelOriginFilled","Point","anchor","scale","labelOrigin","getSouthWest","undefined","time","CurrencyModel","currency_code","mountain","building","castle","garden","historical_and_protected_object","monument","palace","art_museum","historical_museum","science_museum","opera_theatre","forest","national_park","natural_park","CountryLanguageModel","country_description","country_name","CountryModel","country_code_in_iso_3166_1_format","official_language","capital","currency","ambulance_number","has_seas","has_mountains","happiness_rating","highest_point","country_area","safety_index","API_ADMIN_COUNTRY_LIST","countryList","API_MAKE_ADMIN_COUNTRY_SHOW","API_ADMIN_COUNTRY_CREATE","API_MAKE_ADMIN_COUNTRY_UPDATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE","API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT","API_MAKE_ADMIN_COUNTRY_DELETE"],"mappings":"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","file":"static/js/38.49966368.chunk.js","sourcesContent":["import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class FoursquareClient {\n    static key = process.env.REACT_APP_FOURSQUARE_API\n\n    static async getPlaces (searchParams = {}){\n        // categories=${foursquareType}&ne=52.3679992%2C21.2710984&sw=52.0978767%2C20.8512898&limit=${limit}\n\n        try {\n            const {results} = await (await fetch(`https://api.foursquare.com/v3/places/search?${QueryString.stringify(searchParams)}`, {\n                headers: {\n                    Authorization: this.key,\n                    accept: 'application/json'\n                }\n            })).json()\n\n            return results\n\n        } catch (e) {\n            return []\n        }\n    }\n\n    static async getPlacesDetails (foursquarePlaceId, fields = []){\n        try {\n            const placeDetails = await (await fetch(`https://api.foursquare.com/v3/places/${foursquarePlaceId}?${QueryString.stringify({fields: fields.join(\",\")})}`, {\n                headers: {\n                    Authorization: this.key,\n                    accept: 'application/json'\n                }\n            })).json()\n\n            console.log(placeDetails, \"placeDetails\")\n\n            placeDetails.opening_hours = this.parseOpeningHours(placeDetails.hours.regular)\n            delete placeDetails.hours;\n\n            return placeDetails\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotoFile (photoUrl){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(photoUrl)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( foursquarePlaceId ){\n        let photosList = [];\n        let photos =  await fetch(`https://api.foursquare.com/v3/places/${foursquarePlaceId}/photos`, {\n            headers: {\n                Authorization: this.key,\n                accept: 'application/json'\n            }\n        })\n\n        if(photos.status === 200){\n            photosList = await photos.json()\n        }else{\n            return []\n        }\n\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index < 3) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photo = shortPhotosList[i];\n            const photoUrl = `${photo.prefix}original${photo.suffix}`\n\n\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await this.getPhotoFile(photoUrl)\n\n            if (file?.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            formatOpeningHours = openingHours.reduce( (result, openHour) => {\n                const openTimeSplit = openHour.open.split('+')\n                const closeTimeSplit = openHour.open.split('+')\n                const openTimeFormat = openTimeSplit.length === 1 ? openTimeSplit[0] : openTimeSplit[1]\n                const closeTimeFormat = closeTimeSplit.length === 1 ? closeTimeSplit[0] : closeTimeSplit[1]\n                const openTime = openTimeFormat === \"2359\" ? \"0000\" : openTimeFormat\n                const closeTime = closeTimeFormat === \"2359\" ? \"0000\" : closeTimeFormat\n\n                return {\n                    ...result,\n                    [days[openHour.day - 1]]: {\n                        open: `${openTime.slice(0, 2)}:${openTime.slice(2, 4)}`,\n                        close: `${closeTime.slice(0, 2)}:${closeTime.slice(2, 4)}`,\n                    }\n                }\n            }, {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeWrapper\":\"PlaceTypes_typeWrapper__3CJs2\",\"typeWrapper__type\":\"PlaceTypes_typeWrapper__type__2qvtC\",\"active\":\"PlaceTypes_active__1sive\"};","export default class GenerationTypeEnums{\n    static get manual(){ return \"manual\" }\n    static get custom(){ return \"custom\" }\n}\n","/**\n * external libs\n */\nimport React, {useState, useEffect, useContext} from 'react';\nimport {Button, Input, Select} from 'antd';\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n/**\n * services\n */\nimport CityService from \"../../../../../../../services/admin/city.service\";\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\nimport FoursquarePlaceTypeEnum from \"../../../../../../../enums/FoursquarePlaceType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\nimport GoogleClient from \"../../../../../../../utils/GoogleClient\";\n\nexport default function ManualContent({generatePlacesByCity, countryId, setLoading, mapRef}) {\n    const [countOfLimitSearch, setCountOfLimitSearch] = useState(0)\n    const [cityList, setCityList] = useState([])\n    const [city, setCity] = useState(null)\n    const [types, setTypes] = useState([])\n    const [type, setType] = useState(null)\n    const {dictionary} = useContext(DictionaryContext)\n\n    const getCity = async (cityId) => {\n        const city = await CityService.show(cityId)\n\n        await getType(city)\n        setCity(city)\n    }\n\n    const getCityList = async () => {\n        const {data} = await GenerationPlaceService.cityWhiteList({\n            country_id: countryId,\n            type: GenerationTypeEnums.manual,\n            per_page: 1000000\n        })\n\n        setCityList(data.map(({id, name}) => ({value: id, label: name})));\n    }\n\n    const startManualGenerate = async () => {\n        if (!city) {\n            return;\n        }\n\n        if(countOfLimitSearch > 50){\n            return;\n        }\n\n        const {failed} = await generatePlacesByCity(city, [type], countOfLimitSearch)\n\n        setLoading(false)\n\n        if (failed) {\n            console.log('failed END')\n            return;\n        }\n\n        // await generationFinishCity(city.id, GenerationTypeEnums.manual, dictionary.place_types.manual.map(({value}) => value))\n\n        console.log(\"END\")\n    }\n\n    const getType = async (city) => {\n        const isGeneratedTypes = await GenerationPlaceService.generatedSquare({\n            json: {geometry: city.geometry},\n            eq: {\n                type: Object.keys(FoursquarePlaceTypeEnum.typeIds).reduce((accum, key) => ([\n                    ...accum,\n                    FoursquarePlaceTypeEnum.typeIds[key]\n                ]), [])\n            }\n        })\n\n        const uniqTypesId = isGeneratedTypes.data.map(({type}) => +type)\n\n        setTypes(Object.keys(FoursquarePlaceTypeEnum.typeIds).reduce((accum, key) => {\n            if(uniqTypesId.includes(FoursquarePlaceTypeEnum.typeIds[key])){\n                return accum\n            }\n\n            return [\n                ...accum,\n                {\n                    value: FoursquarePlaceTypeEnum.typeIds[key],\n                    label: PlaceTypeTranslate.getTranslateForFoursquareType([key])\n                }\n            ]\n        }, []))\n    }\n\n    useEffect(() => {\n        if (!city) {\n            return\n        }\n\n\n        GoogleClient.getRectangle(\n            mapRef.current,\n            {\n                north: city.geometry.north, //noth lat\n                south: city.geometry.south, //south lat\n                east: city.geometry.east, //noth lng\n                west: city.geometry.west, //south lng\n            },\n            \"#001529\"\n        )\n    }, [city])\n\n    useEffect(() => {\n        getCityList()\n    }, [])\n\n\n    if (!cityList) {\n        return null\n    }\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\", marginBottom: -10}}>\n                <Button type=\"primary\"\n                        onClick={startManualGenerate}\n                        disabled={(city === null) || !type || !countOfLimitSearch}\n                        style={{width: \"100%\"}}>Manual\n                    generation</Button>\n            </div>\n            <div style={{margin: \"20px 0\"}}>\n                <Select\n                    size=\"large\"\n                    placeholder={\"Select city\"}\n                    options={cityList}\n                    showSearch={true}\n                    style={{minWidth: \"100%\"}}\n                    filterOption={(text, {value, label}) => {\n                        const textLowerCase = text.trim().toLowerCase()\n                        const labelLowerCase = label.toLowerCase()\n                        const valueLowerCase = value.toString().toLowerCase()\n                        return labelLowerCase.includes(textLowerCase) || valueLowerCase.includes(text)\n                    }}\n                    onChange={getCity}\n                />\n                {city && (\n                    <>\n                        <Select\n                            size=\"large\"\n                            placeholder={\"Select type\"}\n                            options={types}\n                            showSearch={true}\n                            style={{minWidth: \"100%\", marginTop: 8}}\n                            filterOption={(text, {value, label}) => {\n                                const textLowerCase = text.trim().toLowerCase()\n                                const labelLowerCase = label.toLowerCase()\n                                const valueLowerCase = value.toString().toLowerCase()\n                                return labelLowerCase.includes(textLowerCase) || valueLowerCase.includes(text)\n                            }}\n                            onChange={setType}\n                        />\n                        {type && (\n                            <Input\n                                placeholder=\"Count of search (max 50)...\"\n                                value={countOfLimitSearch}\n                                onChange={e => setCountOfLimitSearch(+e.target.value)}\n                                style={{marginTop: 8, display: 'block'}}\n                            />\n                        )}\n                    </>\n                )}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useState} from 'react';\n/**\n * styles\n */\nimport styles from \"./index.module.scss\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\n\nexport default function Park({setPlaceTypes, placeTypes, places}) {\n    return (\n        <div className={styles.typeWrapper}>\n            {places.map( type => (\n                <div className={`${styles.typeWrapper__type} ${placeTypes === type && styles.active}`} onClick={() => setPlaceTypes(type)}>\n                    {PlaceTypeTranslate.getTranslateForType(type)}\n                </div>\n            ))}\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useContext, useRef, useState} from 'react';\nimport {Button, Form, Radio} from 'antd';\n/**\n * components\n */\nimport PlaceType from \"../PlaceTypes\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../../utils/PlaceTypeTranslate\";\nimport GoogleClient from \"../../../../../../../utils/GoogleClient\";\n/**\n * services\n */\nimport GenerationPlaceService from \"../../../../../../../services/admin/generationPlace.service\";\n/**\n * enums\n */\nimport PlaceTypeEnum from \"../../../../../../../enums/PlaceType\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../../context/dictionary.context\";\n\nconst typeColor = {\n    [PlaceTypeEnum.amusement_park]: \"green\",\n    [PlaceTypeEnum.aquarium]: \"red\",\n    [PlaceTypeEnum.tourist_attraction]: \"gray\",\n    [PlaceTypeEnum.zoo]: \"black\",\n    [PlaceTypeEnum.restaurant]: \"blue\",\n}\n\nexport default function AutomaticContent({ getRectangle, countryId, mapRef }){\n    const {dictionary} = useContext(DictionaryContext)\n    const [placeTypes, setPlaceTypes] = useState(null)\n    const [geometry, setGeometry] = useState(null)\n    const rectangle = useRef(null)\n    const timeOutId = useRef(null)\n    const allGeneratedSquare = useRef([])\n\n    const generateSquareByGeometry = async () => {\n        //KIYV\n        GoogleClient.getRectangle(\n            mapRef.current,\n            {\n                north: 50.590798, //noth lat\n                south: 50.213273, //south lat\n                east: 30.825941, //noth lng\n                west: 30.2394401, //south lng\n            }\n        )\n\n        // const {failed, message, type} = await getRectangle(\n        //     {\n        //         geometry,\n        //         cityId: null,\n        //         placeTypes: placeTypes\n        //     }\n        // )\n        //\n        // if (failed) {\n        //     // socket.emit('pushLog', {\n        //     //     success: false,\n        //     //     cityId: city.id,\n        //     //     geometry_square: {\n        //     //       ...geometry\n        //     //     },\n        //     //     message,\n        //     //     type,\n        //     // });\n        //\n        //     return {failed: true}\n        // }\n\n        // rectangle.current.setOptions({\n        //     editable: false,\n        //     draggable: false,\n        // })\n    }\n\n    const  drawRec = () => {\n        const center =  mapRef.current.getCenter();\n        const maxHorizontalDif  = 0.4;\n        const maxVerticalDif = 0.6;\n\n        const squareSize = {\n            north: center.lat() + maxHorizontalDif / 2, //noth lat\n            south: center.lat() - maxHorizontalDif / 2, //south lat\n            east: center.lng() + maxVerticalDif / 2, //noth lng = 0.05\n            west: center.lng() - maxVerticalDif / 2, //south lng = 0.05\n        };\n\n        rectangle.current = GoogleClient.getRectangle(\n            mapRef.current,\n            squareSize,\n            \"blue\",\n            {\n                draggable: true,\n                editable: true,\n            }\n        )\n\n        rectangle.current.addListener(\"bounds_changed\", () => {\n            clearTimeout(timeOutId.current);\n            timeOutId.current = setTimeout(() => {\n                const bounds = rectangle.current.getBounds()\n                const center = bounds.getCenter();\n                const centerHorizontalLat = center.lat();\n                const centerVerticalLng = center.lng();\n\n                let newGeometry = GoogleClient.parseBounds(bounds)\n\n                if(geometry && geometry.north === newGeometry.north && geometry.east === newGeometry.east && geometry.west === newGeometry.west && geometry.south === newGeometry.south){\n                    return;\n                }\n\n                const difHorizontal = newGeometry.north - newGeometry.south;\n                const difVertical = newGeometry.east - newGeometry.west;\n\n                const errorDifHorizontal = maxHorizontalDif < difHorizontal;\n                const errorDifVertical = maxVerticalDif < difVertical;\n\n                if(errorDifHorizontal){\n                    newGeometry = {\n                        ...newGeometry,\n                        north: centerHorizontalLat - maxHorizontalDif / 2,\n                        south: centerHorizontalLat + maxHorizontalDif / 2,\n                    }\n                }\n                if(errorDifVertical){\n                    newGeometry = {\n                        ...newGeometry,\n                        west: centerVerticalLng - maxVerticalDif / 2,\n                        east: centerVerticalLng + maxVerticalDif / 2,\n                    }\n                }\n\n                if(errorDifHorizontal || errorDifVertical){\n                    setGeometry(newGeometry)\n                    rectangle.current.setOptions({\n                        bounds: newGeometry\n                    })\n                }\n            },500);\n        });\n    }\n\n    const  close = () => {\n\n    }\n\n    const drawSquareByPlaceType = async () => {\n        if(!placeTypes){\n            return;\n        }\n\n        allGeneratedSquare.current.forEach(( square ) => {\n            square.setMap(null)\n        })\n\n        const {data} = await GenerationPlaceService.generatedSquare({\n            eq: {\n                country_id: [countryId],\n                type: [placeTypes]\n            },\n            per_page: 1000000,\n        });\n\n\n        allGeneratedSquare.current = data.map(({geometry}) => (\n            GoogleClient.getRectangle(\n                mapRef.current,\n                geometry\n            )\n        ))\n    }\n\n    useEffect(() => {\n       drawSquareByPlaceType()\n    }, [placeTypes])\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 10, alignItems: \"center\"}}>\n                <Button type=\"primary\" onClick={generateSquareByGeometry} style={{width: \"100%\"}}>Custom generation</Button>\n                <Button type=\"primary\" onClick={drawRec} style={{width: \"100%\"}}>Draw</Button>\n                <Button type=\"primary\" onClick={close} style={{width: \"100%\"}}>close</Button>\n            </div>\n            <PlaceType places={dictionary.place_types.list.map(({value}) => value)}\n                       setPlaceTypes={setPlaceTypes}\n                       placeTypes={placeTypes}\n            />\n            <div style={{display: \"flex\", flexDirection: \"column\", gap: 15, marginBottom: 10}}>\n                {Object.keys(typeColor).map(type => (\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: 10, height: 10, backgroundColor: typeColor[type]}}/>\n                        <span> :{PlaceTypeTranslate.getTranslateForType(type)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, { useState } from 'react';\nimport { Radio } from 'antd';\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../../../enums/GenerationType\";\n\nexport default function RadioGenerationType({generationType, setGenerationType}){\n    return (\n        <Radio.Group onChange={e => setGenerationType(e.target.value)} defaultValue={generationType}>\n            <Radio value={GenerationTypeEnums.manual}>Manual</Radio>\n            <Radio value={GenerationTypeEnums.custom}>Custom</Radio>\n        </Radio.Group>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useContext, useEffect, useRef, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\n/**\n * components\n */\nimport ManualContent from './components/ManualContent'\nimport CustomContent from './components/CustomContent'\nimport RadioGenerationType from './components/RadioGenerationType'\n/**\n * enums\n */\nimport GenerationTypeEnums from \"../../../../../enums/GenerationType\";\nimport FoursquarePlaceTypeEnum from \"../../../../../enums/FoursquarePlaceType\";\n/**\n * service\n */\nimport GenerationPlaceService from \"../../../../../services/admin/generationPlace.service\";\nimport SightService from \"../../../../../services/admin/sight.service\";\nimport CountryService from \"../../../../../services/admin/country.service\";\n/**\n * utils\n */\nimport GoogleClient from \"../../../../../utils/GoogleClient\";\nimport FoursquareClient from \"../../../../../utils/FoursquareClient\";\n\nexport default function GeneratePlace() {\n    const {countryId} = useParams();\n    const [generationType, setGenerationType] = useState(GenerationTypeEnums.manual)\n    const [country, setCountry] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const mapBlockRef = useRef(null);\n    const squareRef = useRef(null);\n    const mapRef = useRef(null);\n\n    console.log(country, \"country\")\n\n    const mapInit = async (geometry = {}) => {\n        const opt = {\n            center: {lat: 51.514316, lng: -0.129761},\n            zoom: 4,\n            restriction: {\n                latLngBounds: {\n                    ...geometry\n                },\n                strictBounds: true\n            },\n        }\n\n\n        mapRef.current = new window.google.maps.Map(mapBlockRef.current, opt)\n    }\n\n    const generatePlacesByCity = async (city, placeTypes = [], limit) => {\n        setLoading(true)\n        if (!city.geometry || !placeTypes.length) {\n            return {failed: false};\n        }\n\n        let currentI = 1;\n        let currentJ = 1;\n\n        const forLoop = async _ => {\n            for (let i = 0; i < placeTypes.length; i++) {\n                const currentType = placeTypes[i];\n\n                //Берем колл-во квадратов по которым ходим. Есть значения захардкодженые, а есть с базы\n                let countStep = 1;\n\n                //Ширина и Высота квадрата по которому идем (сити геометрия)\n                const placeHeightCoordinate = city.geometry.north - city.geometry.south;\n                const placeWidthCoordinate = city.geometry.east - city.geometry.west;\n\n                //Делим этот квадрат (сити геометрию) на колл-во шагов\n                const stepHorizontal = placeWidthCoordinate / countStep;\n                const stepVertical = placeHeightCoordinate / countStep;\n\n                currentI = 1;\n                for (currentI; currentI <= countStep; currentI++) {\n                    currentJ = 1;\n                    for (currentJ; currentJ <= countStep; currentJ++) {\n\n                        await new Promise(resolve => setTimeout(resolve, 500))\n\n                        //Берем один текузий квадрат\n                        const {failed, message, type} = await getRectangle(\n                            {\n                                geometry: {\n                                    north: city.geometry.south + (stepVertical * currentI),\n                                    east: city.geometry.west + (stepHorizontal * currentJ),\n                                    south: city.geometry.south + (stepVertical * (currentI - 1)),\n                                    west: city.geometry.west + (stepHorizontal * (currentJ - 1)),\n                                },\n                                city: city,\n                                type: currentType,\n                                limit,\n                            }\n                        )\n\n                        if (failed) {\n                            return {failed: true}\n                        }\n                    }\n                }\n            }\n\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            return {failed: false}\n        }\n\n        try {\n            return await forLoop()\n        } catch (e) {\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            return {\n                failed: true,\n                city_id: city.id,\n                message: e.message,\n                type: null,\n                indexI: currentI,\n                indexJ: currentJ,\n            };\n        }\n    }\n    const getRectangle = async ({geometry, city, type, limit, countStep}) => {\n        try {\n            //Получение геометрии квадрата, его отрисовка на UI\n            const {north, south, east, west} = geometry;\n            const bounds = GoogleClient.getBounds(north, south, east, west)\n\n            if (squareRef.current) {\n                squareRef.current.setMap(null)\n            }\n\n            squareRef.current = GoogleClient.getRectangle(\n                mapRef.current,\n                GoogleClient.parseBounds(bounds)\n            );\n\n            //После получения и отрисовски всех данных идем получать плейсы\n            return await getPlaces(bounds, city, type, limit)\n        } catch (e) {\n            return {\n                failed: true,\n                message: e.message,\n                type: null\n            }\n        }\n\n    }\n    const getPlaces = async (bounds, city, foursquareType, limit) => {\n        let lastType = null;\n\n        const forLoop = async () => {\n            lastType = foursquareType\n            const type = Object.keys(FoursquarePlaceTypeEnum.typeOriginIds).reduce((accum, type) => {\n                const foursquareIdsForType = FoursquarePlaceTypeEnum.typeOriginIds[type]\n                if (foursquareIdsForType.includes(foursquareType)) {\n                    return type\n                }\n\n                return accum\n            }, null)\n\n            const geometry = GoogleClient.parseBounds(bounds)\n\n            const isGenerate = await GenerationPlaceService.generatedSquare({\n                json: {geometry},\n                eq: {type: [foursquareType]}\n            })\n\n            if (isGenerate.data.length) {\n                return {failed: false};\n            }\n\n            await new Promise(async (resolve, reject) => {\n                let placesToDB = []\n                const places = await FoursquareClient.getPlaces({\n                    categories: foursquareType,\n                    ne: `${geometry.north},${geometry.east}`,\n                    sw: `${geometry.south},${geometry.west}`,\n                    limit: limit\n                })\n\n\n                if (!places.length) {\n                    await GenerationPlaceService.create({\n                        country_id: countryId,\n                        geometry,\n                        type: `${foursquareType}`\n                    });\n                    resolve()\n                }\n\n                for (let i = 0; i < places.length; i++) {\n                    try {\n                        const place = places[i]\n\n                        let placeToBd = {\n                            city_id: city.id,\n                            country_id: countryId,\n                            sight_name: place.name,\n                            original_name: place.name,\n                            formatted_address: place.location.formatted_address,\n                            foursquare_place_id: place.fsq_id,\n                            check_coordinates: true,\n                            place_type: [type],\n                            latitude: place.geocodes.main.latitude,\n                            longitude: place.geocodes.main.longitude,\n                        }\n\n                        await new Promise(resolve => setTimeout(resolve, 200))\n\n                        placeToBd.files_ids = await FoursquareClient.getPhotosId(placeToBd.foursquare_place_id)\n\n                        const placeDetails = await FoursquareClient.getPlacesDetails(placeToBd.foursquare_place_id, [\"tel\", \"website\", \"hours\"])\n\n                        if (placeDetails) {\n                            placeToBd.website = placeDetails?.website || null;\n                            placeToBd.international_phone_number = placeDetails?.tel || null;\n                            placeToBd.opening_hours = placeDetails?.opening_hours || null;\n                        }\n\n                        GoogleClient.getMarker(\n                            mapRef.current,\n                            {lat: placeToBd.latitude, lng: placeToBd.longitude},\n                        )\n\n                        placesToDB = [...placesToDB, placeToBd]\n                    } catch (error) {\n                        return reject({\n                            message: error.message,\n                        })\n                    }\n                }\n\n                await SightService.createBatch(placesToDB.filter(place => place.files_ids.length))\n\n                await GenerationPlaceService.create({\n                    country_id: countryId,\n                    geometry,\n                    type: `${foursquareType}`\n                })\n\n                resolve()\n            })\n        }\n\n        try {\n            return await forLoop()\n        } catch (error) {\n            return {\n                failed: true,\n                message: error.message,\n                type: lastType\n            };\n        }\n    }\n\n    const generationFinishCity = async (cityId, generationType, placeTypes) => {\n        await GenerationPlaceService.finish({\n            \"city_id\": cityId,\n            \"generation_type\": generationType,\n            \"types\": placeTypes\n        })\n    }\n\n    const getCountry = async () => {\n        const country = await CountryService.show(countryId)\n        setCountry(country)\n\n        return country\n    }\n\n    useEffect(() => {\n        getCountry()\n    }, [])\n\n    useEffect(() => {\n        if (!generationType || !country?.geometry) {\n            return;\n        }\n\n        mapInit(country.geometry)\n    }, [generationType, country?.geometry])\n\n\n    return (\n        <div>\n            <div style={{display: \"flex\", gap: 50}}>\n                <div ref={mapBlockRef} style={{width: \"70%\", height: 500}}/>\n                <div style={{width: \"30%\"}}>\n\n                    <RadioGenerationType generationType={generationType}\n                                         setGenerationType={setGenerationType}/>\n                    <div style={{paddingTop: 20}}>\n                        {generationType === GenerationTypeEnums.manual && (\n                            <ManualContent generationFinishCity={generationFinishCity}\n                                           generatePlacesByCity={generatePlacesByCity}\n                                           countryId={countryId}\n                                           setLoading={setLoading}\n                                           mapRef={mapRef}/>\n                        )}\n                        {generationType === GenerationTypeEnums.custom && (\n                            <CustomContent countryId={countryId} getRectangle={getRectangle} mapRef={mapRef}/>\n                        )}\n                    </div>\n                    {loading && (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\"\n                             version=\"1.0\" width=\"64px\" height=\"64px\"\n                             viewBox=\"0 0 128 128\" >\n                            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#f0f2f5\"/>\n                            <g>\n                                <path\n                                    d=\"M64 128A64 64 0 0 1 18.34 19.16L21.16 22a60 60 0 1 0 52.8-17.17l.62-3.95A64 64 0 0 1 64 128z\"\n                                    fill=\"#000000\"/>\n                                <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 64 64\" to=\"360 64 64\"\n                                                  dur=\"1400ms\" repeatCount=\"indefinite\"/>\n                            </g>\n                        </svg>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n","export default class LanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.lang_code = data.lang_code;\n    }\n}\n","export default class CabModel {\n    constructor(data = {}) {\n        this.id =  data.id;\n        this.name = (data.name || \"\").trim();\n        this.phone_number = (data.phone_number || \"\").trim();\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CityLanguageModel {\n    constructor(data = {}) {\n        this.city_name = data.city_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n}\n","import MediaModel from '../media.model'\nimport CabModel from \"./cabs.model\";\nimport CityLanguageModel from \"./language.model\";\n\nconst portraitImage = {\n    id: null,\n    path: \"https://images.unsplash.com/photo-1629809189194-8302d4345c8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dWtyYWluZSUyMGZsYWd8ZW58MHx8MHx8&w=1000&q=80\"\n}\n\nconst landscapeImage = {\n    id: null,\n    path: \"https://media.istockphoto.com/photos/close-up-ukranian-flag-picture-id163641275?b=1&k=20&m=163641275&s=170667a&w=0&h=CVdqTfh31VTDbr7hqcBTbyocEZLlWTC02Kip6niMXBw=\"\n}\n\nexport default class CityModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.state = data.state;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.geometry = data.geometry;\n        this.work_status = data.work_status;\n        this.generation_count_of_squares = data.generation_count_of_squares;\n        this.original_name = data.original_name;\n        this.languages = (data.languages || []).map( language => new CityLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n        this.population = data.population;\n        this.landscape_image =  new MediaModel(data.landscape_image || landscapeImage);\n        this.portrait_image =  new MediaModel(data.portrait_image || portraitImage)\n        this.cabs = (data.cabs || []).map( cab => new CabModel(cab));\n    }\n}\n","export default class MediaModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.path = data.path;\n    }\n}\n","export default class PlaceTypeEnum{\n    static get reserve(){ return \"reserve\" }\n    static get botanical_garden(){ return \"botanical_garden\" }\n    static get beach(){ return \"beach\" }\n    static get mountains(){ return \"mountains\" }\n    static get sea(){ return \"sea\" }\n    static get lake(){ return \"lake\" }\n    static get restaurant(){ return \"restaurant\" }\n    static get art_gallery(){ return \"art_gallery\" }\n    static get tourist_attraction(){ return \"tourist_attraction\" }\n    static get campground(){ return \"campground\" }\n    static get church(){ return \"church\" }\n    static get mosque(){ return \"mosque\" }\n    static get museum(){ return \"museum\" }\n    static get theater(){ return \"theater\" }\n    static get park(){ return \"park\" }\n    static get place_of_view(){ return \"place_of_view\" }\n\n    static get googleTypesListManual(){\n        return [\n        ]\n    }\n    static get googleTypesListAutomatic(){\n        return [\n        ]\n    }\n    static get googleTypesList(){\n        return [\n        ]\n    }\n\n    static get customTypesList(){\n        return [\n            PlaceTypeEnum.reserve,\n            PlaceTypeEnum.botanical_garden,\n            PlaceTypeEnum.beach,\n            PlaceTypeEnum.mountains,\n            PlaceTypeEnum.sea,\n            PlaceTypeEnum.lake,\n            PlaceTypeEnum.restaurant,\n            PlaceTypeEnum.art_gallery,\n            PlaceTypeEnum.tourist_attraction,\n            PlaceTypeEnum.campground,\n            PlaceTypeEnum.church,\n            PlaceTypeEnum.mosque,\n            PlaceTypeEnum.museum,\n            PlaceTypeEnum.theater,\n            PlaceTypeEnum.park,\n            PlaceTypeEnum.place_of_view,\n        ]\n    }\n\n    static get list(){\n        return [\n            ...PlaceTypeEnum.customTypesList,\n            ...PlaceTypeEnum.googleTypesList,\n        ]\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class SightLanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n        this.sight_description = data.sight_description;\n        this.sight_name = data.sight_name;\n    }\n};\n","import MediaModel from \"../media.model\";\nimport CityModel from \"../City/city.model\";\nimport SightLanguageModel from \"./language.model\";\n\nexport default class SightModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.number_of_views = data.number_of_views || 0;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.original_name = data.original_name;\n        this.city = data.city;\n        this.check_coordinates = data.check_coordinates;\n        this.need_review = data.need_review;\n        this.work_status = data.work_status;\n        this.place_type = data.place_type || [];\n        this.opening_hours = data.opening_hours || null;\n        this.formatted_address = data.formatted_address;\n        this.website = data.website;\n        this.international_phone_number = data.international_phone_number;\n        this.languages = (data.languages || []).map( language => new SightLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_SIGHT_CREATE, API_ADMIN_SIGHT_CREATE_BATCH,\n    API_ADMIN_SIGHT_LIST,\n    API_MAKE_ADMIN_SIGHT_CHANGE_STATUS,\n    API_MAKE_ADMIN_SIGHT_DELETE,\n    API_MAKE_ADMIN_SIGHT_GET_CITIES,\n    API_MAKE_ADMIN_SIGHT_NEED_REVIEW,\n    API_MAKE_ADMIN_SIGHT_SHOW,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_SIGHT_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport SightModel from \"../../model/Sight/sight.model\";\n\nexport default class SightService {\n    static async show(sightId) {\n        return new SightModel(await axios.get(API_MAKE_ADMIN_SIGHT_SHOW(sightId)));\n    }\n\n    static async list(params) {\n        let sightList = await axios.get(API_ADMIN_SIGHT_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n\n        sightList.data = sightList.data.map(sight => new SightModel(sight))\n\n        return sightList;\n    }\n\n    static async create(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE, data));\n    }\n\n    static async createBatch(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE_BATCH, data));\n    }\n\n    static async update(sightId, data) {\n        return new SightModel(await axios.put(API_MAKE_ADMIN_SIGHT_UPDATE(sightId), data));\n    }\n\n    static async delete(sightId) {\n        return await axios.delete(API_MAKE_ADMIN_SIGHT_DELETE(sightId));\n    }\n\n    static async createTranslate(sightId, data) {\n        return await axios.post(API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE(sightId), data);\n    }\n\n    static async updateTranslate(sightId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT(sightId, translateId), data);\n    }\n\n    static async updateWorkStatus(sightId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_CHANGE_STATUS(sightId), {work_status: workStatus});\n    }\n\n    static async needReview(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_NEED_REVIEW(sightId), data);\n    }\n\n    static async getCitiesBySight(sightId) {\n        return await axios.get(API_MAKE_ADMIN_SIGHT_GET_CITIES(sightId));\n    }\n}\n\n","export default class ExcursionRouteTypeEnum{\n    static get walking(){ return \"walking\" }\n    static get driving(){ return \"driving\" }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_CITY_CREATE,\n    API_MAKE_ADMIN_CITY_DELETE,\n    API_ADMIN_CITY_LIST,\n    API_MAKE_ADMIN_CITY_TAXI_CREATE,\n    API_MAKE_ADMIN_CITY_SHOW,\n    API_MAKE_ADMIN_CITY_EDIT,\n    API_MAKE_ADMIN_CITY_TAXI_EDIT,\n    API_MAKE_ADMIN_CITY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_CITY_CHANGE_STATUS,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class CityService {\n    static async list(params) {\n        let cityList = await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n\n    static async show(cityId) {\n        return new CityModel(await axios.get(API_MAKE_ADMIN_CITY_SHOW(cityId)));\n    }\n\n    static async create(data) {\n        return new CityModel(await axios.post(API_ADMIN_CITY_CREATE, data));\n    }\n\n    static async delete(cityId) {\n        return await axios.delete(API_MAKE_ADMIN_CITY_DELETE(cityId))\n    }\n\n    static async update(cityId, data) {\n        return new CityModel(await axios.put(API_MAKE_ADMIN_CITY_EDIT(cityId), data));\n    }\n\n    static async createTaxi(cityId, data) {\n        return await axios.post(API_MAKE_ADMIN_CITY_TAXI_CREATE(cityId), data);\n    }\n\n    static async updateTaxi(cityId, cabId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TAXI_EDIT(cityId, cabId), data);\n    }\n\n    static async updateTranslate(cityId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TRANSLATE_EDIT(cityId, translateId), data);\n    }\n\n    static async updateWorkStatus(cityId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_CITY_CHANGE_STATUS(cityId), {work_status: workStatus});\n    }\n}\n\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList(params) {\n        let cityList =  await axios.get(ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class GoogleClient {\n    static key = process.env.REACT_APP_GEOCODING_API\n\n    static getGeometryForCity(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${this.key}`)\n            .then(res => res.json())\n            .then(city => {\n                if (city.results[0]) {\n                    const {northeast, southwest} = city.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static getGeometryForCountry(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=country&key=${this.key}`)\n            .then(res => res.json())\n            .then(country => {\n                if (country.results[0]) {\n                    const {northeast, southwest} = country.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static async getPhotoFile (photo_ref){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${this.key}`)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( photosList ){\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index === 0) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photoReference = shortPhotosList[i].photo_reference;\n            const file = await this.getPhotoFile(photoReference)\n\n            if (file.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static getPlaceDetails( placeId, fields, props = {} ){\n        const defaultFields = [\n            'international_phone_number',\n            'opening_hours',\n            'website',\n            'geometry',\n            'type',\n            'photo',\n            'formatted_address',\n            'address_components',\n            'name',\n            'place_id',\n        ]\n\n        const requestDetailPlace = {\n            placeId: placeId,\n            fields: fields || defaultFields\n        };\n\n        return fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${this.key}`)\n            .then(res => res.json())\n            .then(res => {\n                if(res.status === \"OK\"){\n                    return res.result;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(res.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: res.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getDirection( params ){\n        const currentParams = {\n            key: this.key,\n            ...params,\n        }\n        const url = `https://maps.googleapis.com/maps/api/directions/json?${QueryString.stringify(currentParams)}`\n\n        return fetch(url)\n            .then(res => res.json())\n            .then(direction => {\n                if(direction.status === \"OK\"){\n                    return direction;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(direction.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: direction.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getBounds(north, south, east, west) {\n        const bounds = new window.google.maps.LatLngBounds();\n\n        bounds.extend(new window.google.maps.LatLng(north, east));\n        bounds.extend(new window.google.maps.LatLng(south, west));\n\n        return bounds;\n    }\n\n    static getMarker(map, position = {}, icon = null, props){\n        return new window.google.maps.Marker({\n            position: position,\n            icon,\n            map,\n            ...props\n        })\n    }\n\n    static getRectangle( map, bounds, color = \"blue\", props = {} ){\n        return new window.google.maps.Rectangle({\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: color,\n            fillOpacity: 0.35,\n            bounds: bounds.getNorthEast ? GoogleClient.parseBounds(bounds) : bounds,\n            map,\n            ...props,\n        });\n    }\n\n    static getPolyline( map, path, props = {} ){\n        return new window.google.maps.Polyline({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            geodesic: true,\n            path,\n            map,\n            ...props,\n        })\n    }\n\n    static generateCustomMarker(color = \"black\") {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    static parseBounds( bounds ){\n        return {\n            north: bounds.getNorthEast().lat(), //noth lat\n            south: bounds.getSouthWest().lat(), //south lat\n            east: bounds.getNorthEast().lng(), //noth lng\n            west: bounds.getSouthWest().lng() //south lng\n        }\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            if(openingHours.length === 1 && openingHours[0].close === undefined){\n                formatOpeningHours = days.reduce((result, day ) => ({\n                    ...result,\n                    [day]: {\n                        open: \"00:00\",\n                        close: \"00:00\"\n                    }\n                }), {})\n\n                return formatOpeningHours\n            }\n\n            formatOpeningHours = openingHours.reduce( (result, openHour) => ({\n                ...result,\n                [days[openHour.open.day]]: {\n                    open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                    close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                }\n            }), {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","export default class CurrencyModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.currency_code = data.currency_code;\n    }\n}\n","import PlaceTypeEnum from \"../enums/PlaceType\";\nimport FoursquarePlaceTypeEnum from \"../enums/FoursquarePlaceType\";\n\nexport default class PlaceTypeTranslate {\n    static getTranslateForType( type ) {\n        const typeObj = {\n            [PlaceTypeEnum.reserve]: \"Заповідник\",\n            [PlaceTypeEnum.botanical_garden]: \"Ботанічний сад\",\n            [PlaceTypeEnum.beach]: \"Пляж\",\n            [PlaceTypeEnum.mountains]: \"Гори\",\n            [PlaceTypeEnum.sea]: \"Море\",\n            [PlaceTypeEnum.lake]: \"Озеро\",\n            [PlaceTypeEnum.art_gallery]: \"Картинна галерея\",\n            [PlaceTypeEnum.tourist_attraction]: \"Туристична пам'ятка\",\n            [PlaceTypeEnum.campground]: \"Кемпінг\",\n            [PlaceTypeEnum.church]: \"Церква\",\n            [PlaceTypeEnum.theater]: \"Театр\",\n            [PlaceTypeEnum.mosque]: \"Мечеть\",\n            [PlaceTypeEnum.museum]: \"Музей\",\n            [PlaceTypeEnum.park]: \"Парк\",\n            [PlaceTypeEnum.restaurant]: \"Ресторан\",\n            [PlaceTypeEnum.place_of_view]: \"Красивый вид\",\n        }\n\n        return typeObj[type] || `ERROR ${type}`\n    }\n\n    static getTranslateForFoursquareType( type ) {\n        const typeObj = {\n            [FoursquarePlaceTypeEnum.place_of_view]: \"Красивое место\",\n            [FoursquarePlaceTypeEnum.reserve]: \"Природный заповедник\",\n            [FoursquarePlaceTypeEnum.botanical_garden]: \"Батонический сад\",\n            [FoursquarePlaceTypeEnum.mountain]: \"Гора\",\n            [FoursquarePlaceTypeEnum.lake]: \"Озеро\",\n            [FoursquarePlaceTypeEnum.restaurant]: \"Ресторан\",\n            [FoursquarePlaceTypeEnum.art_gallery]: \"Арт галлерея\",\n            [FoursquarePlaceTypeEnum.building]: \"Здание и сооружение\",\n            [FoursquarePlaceTypeEnum.castle]: \"Замок\",\n            [FoursquarePlaceTypeEnum.garden]: \"Сад\",\n            [FoursquarePlaceTypeEnum.historical_and_protected_object]: \"Исторический объект и защещеные объекты\",\n            [FoursquarePlaceTypeEnum.monument]: \"Памятник\",\n            [FoursquarePlaceTypeEnum.palace]: \"Дворец\",\n            [FoursquarePlaceTypeEnum.square]: \"Площадь\",\n            [FoursquarePlaceTypeEnum.art_museum]: \"Музей искуств\",\n            [FoursquarePlaceTypeEnum.historical_museum]: \"Исторческий музей\",\n            [FoursquarePlaceTypeEnum.science_museum]: \"Музей наук\",\n            [FoursquarePlaceTypeEnum.theater]: \"Теарт\",\n            [FoursquarePlaceTypeEnum.opera_theatre]: \"Оперный театр\",\n            [FoursquarePlaceTypeEnum.forest]: \"Лес\",\n            [FoursquarePlaceTypeEnum.national_park]: \"Национальный парк\",\n            [FoursquarePlaceTypeEnum.natural_park]: \"Природный парк\",\n        }\n\n        return typeObj[type] || `ERROR ${type}`\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CountryLanguageModel {\n    constructor(data = {}) {\n        this.country_description = data.country_description;\n        this.country_name = data.country_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n};\n","import CityModel from '../City/city.model'\nimport MediaModel from \"../media.model\";\nimport CurrencyModel from \"../currency.model\";\nimport LanguageModel from \"../language.model\";\nimport CountryLanguageModel from \"./language.model\";\n\n\nconst portraitImage = {\n    id: null,\n    path: \"https://images.unsplash.com/photo-1629809189194-8302d4345c8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dWtyYWluZSUyMGZsYWd8ZW58MHx8MHx8&w=1000&q=80\"\n}\n\nconst landscapeImage = {\n    id: null,\n    path: \"https://media.istockphoto.com/photos/close-up-ukranian-flag-picture-id163641275?b=1&k=20&m=163641275&s=170667a&w=0&h=CVdqTfh31VTDbr7hqcBTbyocEZLlWTC02Kip6niMXBw=\"\n}\n\nexport default class CountryModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.country_code_in_iso_3166_1_format = data.country_code_in_iso_3166_1_format;\n        this.population = data.population;\n        this.official_language = new LanguageModel(data.official_language);\n        this.capital = data.capital ? new CityModel(data.capital) : null;\n        this.currency = new CurrencyModel(data.currency);\n        this.name = data.name;\n        this.geometry = data.geometry;\n        this.languages = (data.languages || []).map( language => new CountryLanguageModel(language));\n        this.description = data.description;\n        this.ambulance_number = data.ambulance_number;\n        this.original_name = data.original_name;\n        this.has_seas = data.has_seas;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.has_mountains = data.has_mountains;\n        this.landscape_image = new MediaModel(data.landscape_image || landscapeImage);\n        this.portrait_image = new MediaModel(data.portrait_image || portraitImage);\n        this.has_mountains = data.has_mountains;\n        this.happiness_rating = data.happiness_rating;\n        this.highest_point = data.highest_point;\n        this.country_area = data.country_area;\n        this.safety_index = data.safety_index;\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","import PlaceTypeEnum from \"./PlaceType\";\n\nexport default class FoursquarePlaceTypeEnum {\n    static get place_of_view(){return \"place_of_view\"}\n    static get reserve(){return \"reserve\"}\n    static get botanical_garden(){return \"botanical_garden\"}\n    static get mountain(){return \"mountain\"}\n    static get lake(){return \"lake\"}\n    static get restaurant(){return \"restaurant\"}\n    static get art_gallery(){return \"art_gallery\"}\n    static get building(){return \"building\"}\n    static get castle(){return \"castle\"}\n    static get garden(){return \"garden\"}\n    static get historical_and_protected_object(){return \"historical_and_protected_object\"}\n    static get monument(){return \"monument\"}\n    static get palace(){return \"palace\"}\n    static get square(){return \"square\"}\n    static get art_museum(){return \"art_museum\"}\n    static get historical_museum(){return \"historical_museum\"}\n    static get science_museum(){return \"science_museum\"}\n    static get theater(){return \"theater\"}\n    static get opera_theatre(){return \"opera_theatre\"}\n    static get forest(){return \"forest\"}\n    static get national_park(){return \"national_park\"}\n    static get natural_park(){return \"natural_park\"}\n\n    static get typeOriginIds() {\n        return {\n            [PlaceTypeEnum.reserve]: [16028],\n            [PlaceTypeEnum.botanical_garden]: [16005],\n            [PlaceTypeEnum.mountains]: [16027],\n            [PlaceTypeEnum.lake]: [16023],\n            [PlaceTypeEnum.restaurant]: [13065],\n            [PlaceTypeEnum.art_gallery]: [10004],\n            [PlaceTypeEnum.tourist_attraction]: [16007, 16011, 16017, 16020, 16026, 16031, 16041],\n            [PlaceTypeEnum.museum]: [10028, 10030, 10031],\n            [PlaceTypeEnum.theater]: [10043, 10042],\n            [PlaceTypeEnum.park]: [16015, 16034, 16035],\n            [PlaceTypeEnum.place_of_view]: [16046],\n        }\n    }\n\n    static get typeIds() {\n        return {\n            [FoursquarePlaceTypeEnum.place_of_view]: 16046,\n            [FoursquarePlaceTypeEnum.reserve]: 16028,\n            [FoursquarePlaceTypeEnum.botanical_garden]: 16005,\n            [FoursquarePlaceTypeEnum.mountain]: 16027,\n            [FoursquarePlaceTypeEnum.lake]: 16023,\n            [FoursquarePlaceTypeEnum.restaurant]: 13065,\n            [FoursquarePlaceTypeEnum.art_gallery]: 10004,\n            [FoursquarePlaceTypeEnum.building]: 16007,\n            [FoursquarePlaceTypeEnum.castle]: 16011,\n            [FoursquarePlaceTypeEnum.garden]: 16017,\n            [FoursquarePlaceTypeEnum.historical_and_protected_object]: 16020,\n            [FoursquarePlaceTypeEnum.monument]: 16026,\n            [FoursquarePlaceTypeEnum.palace]: 16031,\n            [FoursquarePlaceTypeEnum.square]: 16041,\n            [FoursquarePlaceTypeEnum.art_museum]: 10028,\n            [FoursquarePlaceTypeEnum.historical_museum]: 10030,\n            [FoursquarePlaceTypeEnum.science_museum]: 10031,\n            [FoursquarePlaceTypeEnum.theater]: 10043,\n            [FoursquarePlaceTypeEnum.opera_theatre]: 10042,\n            [FoursquarePlaceTypeEnum.forest]: 16015,\n            [FoursquarePlaceTypeEnum.national_park]: 16034,\n            [FoursquarePlaceTypeEnum.natural_park]: 16035,\n        }\n    }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_COUNTRY_CREATE,\n    API_ADMIN_COUNTRY_LIST,\n    API_MAKE_ADMIN_COUNTRY_DELETE,\n    API_MAKE_ADMIN_COUNTRY_SHOW,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_COUNTRY_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CountryModel from \"../../model/Country/country.model\";\n\nexport default class CountryService {\n    static async list(params) {\n        let countryList = await axios.get(API_ADMIN_COUNTRY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n        countryList.data = countryList.data.map( country => new CountryModel(country));\n\n        return countryList;\n    }\n\n    static async show(countryId) {\n        return new CountryModel(await axios.get(API_MAKE_ADMIN_COUNTRY_SHOW(countryId)));\n    }\n\n    static async create(data) {\n        return new CountryModel(await axios.post(API_ADMIN_COUNTRY_CREATE, data));\n    }\n\n    static async update(countryId, data) {\n        return new CountryModel(await axios.put(API_MAKE_ADMIN_COUNTRY_UPDATE(countryId), data));\n    }\n\n    static async createTranslate(countryId, data) {\n        return await axios.post(API_MAKE_ADMIN_COUNTRY_TRANSLATE_CREATE(countryId), data);\n    }\n\n    static async updateTranslate(countryId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_COUNTRY_TRANSLATE_EDIT(countryId, translateId), data);\n    }\n\n    static async delete(countryId) {\n        return await axios.delete(API_MAKE_ADMIN_COUNTRY_DELETE(countryId));\n    }\n}\n\n"],"sourceRoot":""}