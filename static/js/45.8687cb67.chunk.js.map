{"version":3,"sources":["pages/admin/pages/Route/components/Types/index.module.scss","pages/admin/pages/Route/components/Types/index.jsx","pages/admin/pages/Route/index.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","model/Sight/language.model.js","model/Sight/sight.model.js","services/admin/sight.service.js","enums/PlaceType.js","utils/PlaceTypeTranslate.js"],"names":["module","exports","GoogleTypes","setPlaceTypes","placeTypes","dictionary","useContext","DictionaryContext","className","styles","typeWrapper","place_types","google_list","map","type","typeWrapper__type","includes","active","onClick","PlaceTypeTranslate","getTranslateForType","Route","useState","mapBlockRef","useRef","mapRef","useEffect","current","window","google","maps","Map","center","lat","lng","zoom","restriction","latLngBounds","north","east","south","west","strictBounds","GoogleClient","getMarker","SightService","list","city_id","ref","style","width","height","filter","placeType","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","SightLanguageModel","data","this","id","language","LanguageModel","sight_description","sight_name","SightModel","name","description","number_of_views","latitude","longitude","original_name","city","check_coordinates","need_review","work_status","place_type","opening_hours","formatted_address","website","international_phone_number","languages","images","image","MediaModel","sightId","axios","get","API_MAKE_ADMIN_SIGHT_SHOW","params","API_ADMIN_SIGHT_LIST","paramsSerializer","QueryString","stringify","sightList","sight","post","API_ADMIN_SIGHT_CREATE","API_ADMIN_SIGHT_CREATE_BATCH","put","API_MAKE_ADMIN_SIGHT_UPDATE","delete","API_MAKE_ADMIN_SIGHT_DELETE","API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE","translateId","API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_SIGHT_CHANGE_STATUS","API_MAKE_ADMIN_SIGHT_NEED_REVIEW","API_MAKE_ADMIN_SIGHT_GET_CITIES","PlaceTypeEnum","amusement_park","aquarium","tourist_attraction","zoo","restaurant","campground","embassy","art_gallery","museum","googleTypesListManual","googleTypesListAutomatic","park","reserve","botanical_garden","beach","mountains","sea","church","mosque","theater","lake","customTypesList","googleTypesList"],"mappings":"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","file":"static/js/45.8687cb67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeWrapper\":\"Types_typeWrapper__dhpk5\",\"typeWrapper__type\":\"Types_typeWrapper__type__bmoD8\",\"active\":\"Types_active__itp0w\"};","/**\n * external libs\n */\nimport React, {useContext} from 'react';\n/**\n * styles\n */\nimport styles from \"./index.module.scss\";\n/**\n * utils\n */\nimport PlaceTypeTranslate from \"../../../../../../utils/PlaceTypeTranslate\";\n/**\n * context\n */\nimport {DictionaryContext} from \"../../../../../context/dictionary.context\";\n\nexport default function GoogleTypes({setPlaceTypes, placeTypes}) {\n    const {dictionary} = useContext(DictionaryContext)\n\n    return (\n        <div className={styles.typeWrapper}>\n            {dictionary.place_types.google_list.map( type => (\n                <div className={`${styles.typeWrapper__type} ${placeTypes.includes(type) && styles.active}`} onClick={() => setPlaceTypes(type)}>\n                    {PlaceTypeTranslate.getTranslateForType(type)}\n                </div>\n            ))}\n        </div>\n    )\n}\n","/**\n * external libs\n */\nimport React, {useEffect, useRef, useState} from 'react';\n/**\n * components\n */\nimport PlaceType from './components/Types'\n/**\n * services\n */\nimport SightService from \"../../../../services/admin/sight.service\";\nimport GoogleClient from \"../../../../utils/GoogleClient\";\n\nexport default function Route() {\n    const [placeTypes, setPlaceTypes] = useState([])\n    const mapBlockRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const mapInit = () => {\n        const opt = {\n            center: {lat: 51.514316, lng: -0.129761},\n            zoom: 4,\n            restriction: {\n                latLngBounds: {\n                    north: 50.590798, //noth lat up\n                    east: 30.825941, //noth lng right\n                    south: 50.213273, //south lat down\n                    west: 30.2394401, //south lng left\n                },\n                strictBounds: true\n            },\n        }\n\n        mapRef.current = new window.google.maps.Map(mapBlockRef.current, opt)\n\n        GoogleClient.getMarker(\n            mapRef.current,\n            {\n                lat: 50.4662711,\n                lng: 30.5134968\n            }\n        )\n    }\n\n    const selectPlaceTypes = ( type ) => {\n        if(placeTypes.includes(type)){\n            return setPlaceTypes(placeTypes.filter( placeType => placeType !== type))\n        }\n\n        setPlaceTypes([...placeTypes, type])\n    }\n\n    const getPlace = () => {\n        SightService.list({\n            city_id: 264\n        })\n    }\n\n\n    useEffect(() => {\n        // getGeometryForCity()\n\n        mapInit()\n        getPlace()\n    }, [])\n\n    return (\n        <div>\n            <div>\n                Get place\n            </div>\n            <div ref={mapBlockRef} style={{width: \"100%\", height: 500}} />\n            <PlaceType setPlaceTypes={selectPlaceTypes} placeTypes={placeTypes}/>\n        </div>\n    )\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import LanguageModel from \"../language.model\";\n\nexport default class SightLanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n        this.sight_description = data.sight_description;\n        this.sight_name = data.sight_name;\n    }\n};\n","import MediaModel from \"../media.model\";\nimport CityModel from \"../City/city.model\";\nimport SightLanguageModel from \"./language.model\";\n\nexport default class SightModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.number_of_views = data.number_of_views || 0;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.original_name = data.original_name;\n        this.city = data.city;\n        this.check_coordinates = data.check_coordinates;\n        this.need_review = data.need_review;\n        this.work_status = data.work_status;\n        this.place_type = data.place_type || [];\n        this.opening_hours = data.opening_hours || null;\n        this.formatted_address = data.formatted_address;\n        this.website = data.website;\n        this.international_phone_number = data.international_phone_number;\n        this.languages = (data.languages || []).map( language => new SightLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n    }\n};\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_SIGHT_CREATE, API_ADMIN_SIGHT_CREATE_BATCH,\n    API_ADMIN_SIGHT_LIST,\n    API_MAKE_ADMIN_SIGHT_CHANGE_STATUS,\n    API_MAKE_ADMIN_SIGHT_DELETE,\n    API_MAKE_ADMIN_SIGHT_GET_CITIES,\n    API_MAKE_ADMIN_SIGHT_NEED_REVIEW,\n    API_MAKE_ADMIN_SIGHT_SHOW,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_SIGHT_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport SightModel from \"../../model/Sight/sight.model\";\n\nexport default class SightService {\n    static async show(sightId) {\n        return new SightModel(await axios.get(API_MAKE_ADMIN_SIGHT_SHOW(sightId)));\n    }\n\n    static async list(params) {\n        let sightList = await axios.get(API_ADMIN_SIGHT_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        });\n\n\n        sightList.data = sightList.data.map(sight => new SightModel(sight))\n\n        return sightList;\n    }\n\n    static async create(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE, data));\n    }\n\n    static async createBatch(data) {\n        return new SightModel(await axios.post(API_ADMIN_SIGHT_CREATE_BATCH, data));\n    }\n\n    static async update(sightId, data) {\n        return new SightModel(await axios.put(API_MAKE_ADMIN_SIGHT_UPDATE(sightId), data));\n    }\n\n    static async delete(sightId) {\n        return await axios.delete(API_MAKE_ADMIN_SIGHT_DELETE(sightId));\n    }\n\n    static async createTranslate(sightId, data) {\n        return await axios.post(API_MAKE_ADMIN_SIGHT_TRANSLATE_CREATE(sightId), data);\n    }\n\n    static async updateTranslate(sightId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_TRANSLATE_EDIT(sightId, translateId), data);\n    }\n\n    static async updateWorkStatus(sightId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_CHANGE_STATUS(sightId), {work_status: workStatus});\n    }\n\n    static async needReview(sightId, data) {\n        return await axios.put(API_MAKE_ADMIN_SIGHT_NEED_REVIEW(sightId), data);\n    }\n\n    static async getCitiesBySight(sightId) {\n        return await axios.get(API_MAKE_ADMIN_SIGHT_GET_CITIES(sightId));\n    }\n}\n\n","export default class PlaceTypeEnum{\n    static get reserve(){ return \"reserve\" }\n    static get botanical_garden(){ return \"botanical_garden\" } // 1.5ч\n    static get beach(){ return \"beach\" }  // 30мин\n    static get mountains(){ return \"mountains\" }\n    static get sea(){ return \"sea\" } // 30мин\n    static get lake(){ return \"lake\" } // 2ч\n    static get amusement_park(){ return \"amusement_park\" } // 2ч\n    static get aquarium(){ return \"aquarium\" } // 2ч\n    static get restaurant(){ return \"restaurant\" } // 2ч\n    static get art_gallery(){ return \"art_gallery\" } // 2ч\n    static get tourist_attraction(){ return \"tourist_attraction\" }\n    static get campground(){ return \"campground\" }\n    static get church(){ return \"church\" }\n    static get mosque(){ return \"mosque\" }\n    static get embassy(){ return \"embassy\" }\n    static get museum(){ return \"museum\" }\n    static get theater(){ return \"theater\" }\n    static get park(){ return \"park\" }\n    static get zoo(){ return \"zoo\" }\n\n    static get googleTypesListManual(){\n        return [\n            PlaceTypeEnum.amusement_park,\n            PlaceTypeEnum.aquarium,\n            PlaceTypeEnum.tourist_attraction,\n            PlaceTypeEnum.zoo,\n            PlaceTypeEnum.restaurant,\n        ]\n    }\n    static get googleTypesListAutomatic(){\n        return [\n            PlaceTypeEnum.campground,\n            PlaceTypeEnum.embassy,\n            PlaceTypeEnum.art_gallery,\n            PlaceTypeEnum.museum,\n        ]\n    }\n    static get googleTypesList(){\n        return [\n            ...PlaceTypeEnum.googleTypesListManual,\n            ...PlaceTypeEnum.googleTypesListAutomatic,\n        ]\n    }\n    static get customTypesList(){\n        return [\n            PlaceTypeEnum.park,\n            PlaceTypeEnum.reserve,\n            PlaceTypeEnum.botanical_garden,\n            PlaceTypeEnum.beach,\n            PlaceTypeEnum.mountains,\n            PlaceTypeEnum.sea,\n            PlaceTypeEnum.church,\n            PlaceTypeEnum.mosque,\n            PlaceTypeEnum.theater,\n            PlaceTypeEnum.lake,\n        ]\n    }\n\n    static get list(){\n        return [\n            ...PlaceTypeEnum.customTypesList,\n            ...PlaceTypeEnum.googleTypesList,\n        ]\n    }\n}\n","import PlaceTypeEnum from \"../enums/PlaceType\";\n\nexport default class PlaceTypeTranslate {\n    static getTranslateForType( type ) {\n        const typeObj = {\n            [PlaceTypeEnum.reserve]: \"Заповідник\",\n            [PlaceTypeEnum.botanical_garden]: \"Ботанічний сад\",\n            [PlaceTypeEnum.beach]: \"Пляж\",\n            [PlaceTypeEnum.mountains]: \"Гори\",\n            [PlaceTypeEnum.sea]: \"Море\",\n            [PlaceTypeEnum.lake]: \"Озеро\",\n            [PlaceTypeEnum.amusement_park]: \"Парк розваг\",\n            [PlaceTypeEnum.aquarium]: \"Акваріум\",\n            [PlaceTypeEnum.art_gallery]: \"Картинна галерея\",\n            [PlaceTypeEnum.zoo]: \"Зоопарк\",\n            [PlaceTypeEnum.tourist_attraction]: \"Туристична пам'ятка\",\n            [PlaceTypeEnum.campground]: \"Кемпінг\",\n            [PlaceTypeEnum.church]: \"Церква\",\n            [PlaceTypeEnum.theater]: \"Театр\",\n            [PlaceTypeEnum.mosque]: \"Мечеть\",\n            [PlaceTypeEnum.embassy]: \"Посольство\",\n            [PlaceTypeEnum.museum]: \"Музей\",\n            [PlaceTypeEnum.park]: \"Парк\",\n            [PlaceTypeEnum.restaurant]: \"Ресторан\",\n        }\n\n        return typeObj[type]\n    }\n}\n"],"sourceRoot":""}