{"version":3,"sources":["pages/admin/pages/Generate/City/index.jsx","enums/ExcursionRouteType.js","services/admin/city.service.js","services/admin/generationPlace.service.js","utils/GoogleClient.js","services/admin/state.service.js"],"names":["GenerateCity","useState","cities","setCities","equalGeometryCity","setEqualGeometryCity","countryId","useParams","generate","countryCode","minPopulation","url","isDemo","LIMIT_RATE","headers","states","i","fetch","json","resultState","data","metadata","totalCount","length","stateIso","isoCode","j","resultCity","filter","city","type","includes","name","map","latitude","longitude","split","console","log","newEqualGeometryCity","cityData","id","Promise","resolve","setTimeout","GoogleClient","getGeometryForCity","geometry","north","east","south","west","geometryKey","Object","keys","reduce","accum","key","createCity","StateService","create","country_id","state_name","stateId","cityRequest","state_id","city_name","original_name","generation_count_of_squares","CityService","cityId","style","fontSize","fontWeight","marginBottom","onClick","size","border","header","bordered","dataSource","renderItem","item","Item","title","copyEqualGeometryCity","JSON","parse","stringify","deleteCity","marginLeft","icon","ExcursionRouteTypeEnum","params","axios","get","API_ADMIN_CITY_LIST","paramsSerializer","QueryString","include","translation","portraitImage","landscapeImage","state","country","cityList","CityModel","API_MAKE_ADMIN_CITY_SHOW","post","API_ADMIN_CITY_CREATE","delete","API_MAKE_ADMIN_CITY_DELETE","put","API_MAKE_ADMIN_CITY_EDIT","API_MAKE_ADMIN_CITY_TRANSLATE_EDIT","workStatus","API_MAKE_ADMIN_CITY_CHANGE_STATUS","work_status","GenerationPlaceService","ADMIN_CREATE_SQUARE_GENERATE_PLACE","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","relation","eq","noRelation","generatedTypes","generation_type","this","then","res","results","viewport","northeast","southwest","lat","lng","photo_ref","downloadImage","file","photosList","filesIds","shortPhotosList","_","index","photoReference","photo_reference","getPhotoFile","placeId","fields","defaultFields","requestDetailPlace","join","status","result","failed","message","catch","error","currentParams","direction","bounds","window","google","maps","LatLngBounds","extend","LatLng","position","props","Marker","color","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getNorthEast","parseBounds","path","Polyline","geodesic","pinSVGFilled","labelOriginFilled","Point","anchor","scale","labelOrigin","getSouthWest","openingHours","days","formatOpeningHours","undefined","close","day","open","openHour","time","slice","process","API_ADMIN_STATE_LIST","stateList","StateModel","API_MAKE_ADMIN_STATE_SHOW","API_ADMIN_STATE_CREATE","API_MAKE_ADMIN_STATE_UPDATE","translateId","API_MAKE_ADMIN_STATE_TRANSLATE_EDIT","API_MAKE_ADMIN_STATE_DELETE"],"mappings":"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","file":"static/js/47.25ebb3f6.chunk.js","sourcesContent":["/**\n * external libs\n */\nimport React, {useState} from 'react'\nimport {useParams} from \"react-router-dom\";\nimport {Button, List, Tooltip} from 'antd'\nimport {DeleteOutlined} from \"@ant-design/icons\";\n/**\n * services\n */\nimport StateService from \"../../../../../services/admin/state.service\";\nimport CityService from \"../../../../../services/admin/city.service\";\n/**\n * utils\n */\nimport GoogleClient from \"../../../../../utils/GoogleClient\";\n\nexport default function GenerateCity() {\n    const [cities, setCities] = useState(null);\n    const [equalGeometryCity, setEqualGeometryCity] = useState(null);\n    const {countryId} = useParams();\n\n    const generate = async (countryCode, minPopulation = 100000) => {\n        if(!countryCode){\n            return;\n        }\n\n        const isDemo = false;\n        const url = isDemo ? \"http://geodb-free-service.wirefreethought.com\" : \"https://wft-geo-db.p.rapidapi.com\"\n        const LIMIT_RATE = isDemo ? 10 : 100;\n\n        const headers = {\n            'X-RapidAPI-Key': '9b6599ddebmsh70080c0c4b276c4p172c5ajsn58e3d1228228',\n            'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n        }\n        let states = [];\n\n        for (let i = 0; ; i++) {\n            const resultState = await ((await fetch(`${url}/v1/geo/countries/${countryCode}/regions?limit=${LIMIT_RATE}&offset=${LIMIT_RATE * i}`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...headers\n                }\n            })).json())\n            states = [...states, ...resultState.data]\n\n            const totalUploadState = LIMIT_RATE * (i + 1);\n            if (totalUploadState >= resultState.metadata.totalCount) {\n                break;\n            }\n        }\n\n        let cities = []\n\n        for (let i = 0; i < states.length; i++) {\n            const stateIso = states[i].isoCode;\n            for (let j = 0; ; j++) {\n                const resultCity = await ((await fetch(`${url}/v1/geo/countries/${countryCode}/regions/${stateIso}/cities?minPopulation=${minPopulation}&hateoasMode=false&limit=${LIMIT_RATE}&offset=${LIMIT_RATE * j}`, {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        ...headers\n                    }\n                })).json())\n                cities = [...cities, ...resultCity.data\n                    .filter(city => city.type === \"CITY\")\n                    .filter(city => ![\"Białołęka\", \"Bemowo\", \"Żoliborz\", \"Włochy\", \"Ochota\", \"Ursus\", \"Wawer\", \"Mokotów\", \"Ursynów\", \"Wilanów\"].includes(city.name))\n                    .map(city => ({\n                        ...city,\n                        latitude: city.latitude,\n                        longitude: city.longitude,\n                        name: city.name.split(\" County\")[0],\n                    }))]\n\n                const totalUploadState = LIMIT_RATE * (j + 1);\n                if (totalUploadState >= resultCity.metadata.totalCount) {\n                    break;\n                }\n            }\n        }\n\n        console.log(\"Cities: \", cities)\n\n        let newEqualGeometryCity = {}\n\n        for (let i = 0; i < cities.length; i++) {\n            const city = cities[i];\n\n            const cityData = {\n                id: city.id,\n                name: city.name,\n            }\n\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const geometry = await GoogleClient.getGeometryForCity(city.latitude, city.longitude)\n            if (geometry) {\n                cityData.geometry = geometry;\n                cityData.latitude = city.latitude;\n                cityData.longitude = city.longitude;\n\n\n                const {north, east, south, west} = geometry;\n\n                const geometryKey = `${north}x${east}:${south}x${west}`\n                if (!newEqualGeometryCity[geometryKey]) {\n                    newEqualGeometryCity[geometryKey] = []\n                }\n\n                newEqualGeometryCity[geometryKey] = [\n                    ...newEqualGeometryCity[geometryKey],\n                    cityData,\n                ]\n            }\n            cities[i] = cityData\n        }\n\n        newEqualGeometryCity = Object.keys(newEqualGeometryCity).reduce((accum, key) => {\n            if (accum[key].length <= 1) {\n                delete accum[key]\n            }\n\n            return accum\n        }, newEqualGeometryCity)\n\n        setCities(cities)\n        setEqualGeometryCity(Object.keys(newEqualGeometryCity).length ? newEqualGeometryCity : null)\n    }\n\n    const deleteCity = (id, size) => {\n        let copyEqualGeometryCity = JSON.parse(JSON.stringify(equalGeometryCity))\n        copyEqualGeometryCity[size] = copyEqualGeometryCity[size].filter(city => city.id !== id)\n\n        if (copyEqualGeometryCity[size].length === 1) {\n            delete copyEqualGeometryCity[size]\n        }\n\n        if (!Object.keys(copyEqualGeometryCity).length) {\n            copyEqualGeometryCity = null;\n        }\n\n        setCities(cities.filter((city) => city.id !== id))\n\n        setEqualGeometryCity(copyEqualGeometryCity)\n    }\n\n    const createCity = async () => {\n        const {id: stateId} = await StateService.create({\n            country_id: countryId,\n            state_name: \"TEST STATE FOR DELETE\"\n        })\n\n        for (let i = 0; i < cities.length; i++) {\n            const city = cities[i];\n\n            const cityRequest = {\n                state_id: stateId,\n                city_name: city.name,\n                original_name: city.name,\n                generation_count_of_squares: 2,\n            }\n\n            await new Promise(resolve => setTimeout(resolve, 400))\n            if (city.geometry) {\n                cityRequest.geometry = city.geometry;\n                cityRequest.latitude = city.latitude;\n                cityRequest.longitude = city.longitude;\n            }\n\n            const {id: cityId} = await CityService.create({city: cityRequest})\n\n            console.log(`ID: ${cityId}. City: ${city}; ID_STAT: ${56}`)\n        }\n    }\n\n    return (\n        <div>\n            {cities && (\n                <div style={{fontSize: 20, fontWeight: 600, marginBottom: 30}}>\n                    Will be added {cities.length} cities\n                </div>\n            )}\n            {!cities && (\n                <Button type=\"primary\" onClick={() => generate(\"ES\", 150000)}>\n                    Generate cities\n                </Button>\n            )}\n            {equalGeometryCity && (\n                <div>\n                    <div style={{fontWeight: 600, marginBottom: 10}}>Equal Geometry City (U need stay only 1 city)</div>\n                    {Object.keys(equalGeometryCity).map(size => (\n                        <List\n                            key={size}\n                            style={{\n                                marginBottom: 10,\n                                border: `2px solid ${equalGeometryCity[size].length === 1 ? \"#6fda0c\" : \"red\"}`\n                            }}\n                            header={<div>{size}</div>}\n                            bordered\n                            dataSource={equalGeometryCity[size]}\n                            renderItem={(item) => (\n                                <List.Item>\n                                    {item.name}\n                                    <Tooltip title=\"Delete City\">\n                                        <Button onClick={() => deleteCity(item.id, size)} style={{marginLeft: 20}}\n                                                type=\"danger\" icon={<DeleteOutlined/>} size={\"small\"}/>\n                                    </Tooltip>\n                                </List.Item>\n                            )}\n                        />\n                    ))}\n                </div>\n            )}\n            {cities && !equalGeometryCity && (\n                <Button type=\"primary\" onClick={createCity}>\n                    Create {cities.length} cities\n                </Button>\n            )}\n        </div>\n    )\n}\n","export default class ExcursionRouteTypeEnum{\n    static get walking(){ return \"walking\" }\n    static get driving(){ return \"driving\" }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_CITY_CREATE,\n    API_MAKE_ADMIN_CITY_DELETE,\n    API_ADMIN_CITY_LIST,\n    API_MAKE_ADMIN_CITY_TAXI_CREATE,\n    API_MAKE_ADMIN_CITY_SHOW,\n    API_MAKE_ADMIN_CITY_EDIT,\n    API_MAKE_ADMIN_CITY_TAXI_EDIT,\n    API_MAKE_ADMIN_CITY_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_CITY_CHANGE_STATUS,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport CityModel from \"../../model/City/city.model\";\n\nexport default class CityService {\n    static async list(params) {\n        let cityList = await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify({\n                    ...params,\n                    include: {\n                        translation: null,\n                        portraitImage: null,\n                        landscapeImage: null,\n                        state: {\n                            include: {\n                                translation: null,\n                            }\n                        },\n                        country: {\n                            include: {\n                                translation: null,\n                            }\n                        },\n                        ...params.include\n                    }\n                })\n            }\n        });\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n\n    static async show(cityId, params = {}) {\n        return new CityModel(await axios.get(API_MAKE_ADMIN_CITY_SHOW(cityId, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify({\n                    ...params,\n                    include: {\n                        translation: null,\n                        state: {\n                            include: {\n                                translation: null,\n                            }\n                        },\n                        country: {\n                            include: {\n                                translation: null,\n                            }\n                        },\n                        ...params.include\n                    }\n                })\n            }\n        })));\n    }\n\n    static async create(data) {\n        return new CityModel(await axios.post(API_ADMIN_CITY_CREATE, data));\n    }\n\n    static async delete(cityId) {\n        return await axios.delete(API_MAKE_ADMIN_CITY_DELETE(cityId))\n    }\n\n    static async update(cityId, data) {\n        return new CityModel(await axios.put(API_MAKE_ADMIN_CITY_EDIT(cityId), data));\n    }\n\n    static async updateTranslate(cityId, data) {\n        return await axios.put(API_MAKE_ADMIN_CITY_TRANSLATE_EDIT(cityId), data);\n    }\n\n    static async updateWorkStatus(cityId, workStatus) {\n        return await axios.put(API_MAKE_ADMIN_CITY_CHANGE_STATUS(cityId), {work_status: workStatus});\n    }\n}\n\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_CITY_LIST,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList({country_id, type, ...params}) {\n        let cityList =  await axios.get(API_ADMIN_CITY_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify({\n                    ...params,\n                    relation: {\n                        state: {\n                            relation: {\n                                country: {\n                                    eq: {\n                                        id: [country_id]\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    noRelation: {\n                        generatedTypes: {\n                            eq: {\n                                generation_type: [type]\n                            }\n                        }\n                    },\n                    include: {\n                        translation: null\n                    },\n                })\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class GoogleClient {\n    static key = process.env.REACT_APP_GEOCODING_API\n\n    static getGeometryForCity(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${this.key}`)\n            .then(res => res.json())\n            .then(city => {\n                if (city.results[0]) {\n                    const {northeast, southwest} = city.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static getGeometryForCountry(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=country&key=${this.key}`)\n            .then(res => res.json())\n            .then(country => {\n                if (country.results[0]) {\n                    const {northeast, southwest} = country.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static async getPhotoFile (photo_ref){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const file = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${this.key}`)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( photosList ){\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index === 0) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photoReference = shortPhotosList[i].photo_reference;\n            const file = await this.getPhotoFile(photoReference)\n\n            if (file.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static getPlaceDetails( placeId, fields, props = {} ){\n        const defaultFields = [\n            'international_phone_number',\n            'opening_hours',\n            'website',\n            'geometry',\n            'type',\n            'photo',\n            'formatted_address',\n            'address_components',\n            'name',\n            'place_id',\n        ]\n\n        const requestDetailPlace = {\n            placeId: placeId,\n            fields: fields || defaultFields\n        };\n\n        return fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${this.key}`)\n            .then(res => res.json())\n            .then(res => {\n                if(res.status === \"OK\"){\n                    return res.result;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(res.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: res.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getDirection( params ){\n        const currentParams = {\n            key: this.key,\n            ...params,\n        }\n        const url = `https://maps.googleapis.com/maps/api/directions/json?${QueryString.stringify(currentParams)}`\n\n        return fetch(url)\n            .then(res => res.json())\n            .then(direction => {\n                if(direction.status === \"OK\"){\n                    return direction;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(direction.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: direction.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getBounds(north, south, east, west) {\n        const bounds = new window.google.maps.LatLngBounds();\n\n        bounds.extend(new window.google.maps.LatLng(north, east));\n        bounds.extend(new window.google.maps.LatLng(south, west));\n\n        return bounds;\n    }\n\n    static getMarker(map, position = {}, icon = null, props){\n        return new window.google.maps.Marker({\n            position: position,\n            icon,\n            map,\n            ...props\n        })\n    }\n\n    static getRectangle( map, bounds, color = \"blue\", props = {} ){\n        return new window.google.maps.Rectangle({\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: color,\n            fillOpacity: 0.35,\n            bounds: bounds.getNorthEast ? GoogleClient.parseBounds(bounds) : bounds,\n            map,\n            ...props,\n        });\n    }\n\n    static getPolyline( map, path, props = {} ){\n        return new window.google.maps.Polyline({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            geodesic: true,\n            path,\n            map,\n            ...props,\n        })\n    }\n\n    static generateCustomMarker(color = \"black\") {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    static parseBounds( bounds ){\n        return {\n            north: bounds.getNorthEast().lat(), //noth lat\n            south: bounds.getSouthWest().lat(), //south lat\n            east: bounds.getNorthEast().lng(), //noth lng\n            west: bounds.getSouthWest().lng() //south lng\n        }\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            if(openingHours.length === 1 && openingHours[0].close === undefined){\n                formatOpeningHours = days.reduce((result, day ) => ({\n                    ...result,\n                    [day]: {\n                        open: \"00:00\",\n                        close: \"00:00\"\n                    }\n                }), {})\n\n                return formatOpeningHours\n            }\n\n            formatOpeningHours = openingHours.reduce( (result, openHour) => ({\n                ...result,\n                [days[openHour.open.day]]: {\n                    open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                    close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                }\n            }), {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    API_ADMIN_STATE_CREATE,\n    API_ADMIN_STATE_LIST,\n    API_MAKE_ADMIN_STATE_DELETE,\n    API_MAKE_ADMIN_STATE_SHOW,\n    API_MAKE_ADMIN_STATE_TRANSLATE_CREATE,\n    API_MAKE_ADMIN_STATE_TRANSLATE_EDIT,\n    API_MAKE_ADMIN_STATE_UPDATE,\n} from \"../../constants/admin/api.constant\";\n/**\n * utils\n */\nimport {QueryString} from \"../../utils/Querystring\";\n/**\n * model\n */\nimport StateModel from \"../../model/State/state.model\";\n\nexport default class StateService {\n    static async list(params) {\n        let stateList = await axios.get(API_ADMIN_STATE_LIST, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify({\n                    ...params,\n                    include: {\n                        translation: null,\n                        country: {\n                            include: {\n                                translation: null,\n                            }\n                        },\n                        ...params.include,\n                    }\n                })\n            }\n        });\n\n        stateList.data = stateList.data.map( country => new StateModel(country));\n\n        return stateList;\n    }\n\n    static async show(stateId, params = {}) {\n        return new StateModel(await axios.get(API_MAKE_ADMIN_STATE_SHOW(stateId, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify({\n                    ...params,\n                    include: {\n                        translation: null,\n                        country: {\n                            include: {\n                                translation: null,\n                            }\n                        },\n                        ...params.include,\n                    }\n                })\n            }\n        })));\n    }\n\n    static async create(data) {\n        return new StateModel(await axios.post(API_ADMIN_STATE_CREATE, data));\n    }\n\n    static async update(stateId, data) {\n        return new StateModel(await axios.put(API_MAKE_ADMIN_STATE_UPDATE(stateId), data));\n    }\n\n    static async updateTranslate(stateId, translateId, data) {\n        return await axios.put(API_MAKE_ADMIN_STATE_TRANSLATE_EDIT(stateId, translateId), data);\n    }\n\n    static async delete(stateId) {\n        return await axios.delete(API_MAKE_ADMIN_STATE_DELETE(stateId));\n    }\n}\n\n"],"sourceRoot":""}