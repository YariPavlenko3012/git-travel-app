{"version":3,"sources":["model/language.model.js","model/media.model.js","model/City/cabs.model.js","model/City/language.model.js","model/City/city.model.js","enums/ExcursionRouteType.js","services/admin/generationPlace.service.js","utils/GoogleClient.js"],"names":["LanguageModel","data","this","id","name","lang_code","MediaModel","path","CabModel","trim","phone_number","CityLanguageModel","city_name","language","CityModel","description","state","latitude","longitude","geometry","work_status","generation_count_of_squares","original_name","languages","map","images","image","population","landscape_image","portrait_image","cabs","cab","ExcursionRouteTypeEnum","GenerationPlaceService","axios","post","ADMIN_CREATE_SQUARE_GENERATE_PLACE","url","API_ADMIN_SIGHT_DOWNLOAD_IMAGE","ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE","params","get","ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE","paramsSerializer","QueryString","stringify","ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE","cityList","city","i","GoogleClient","fetch","key","then","res","json","console","log","results","viewport","northeast","southwest","north","lat","east","lng","south","west","country","photo_ref","Promise","resolve","setTimeout","downloadImage","file","photosList","filesIds","shortPhotosList","filter","_","index","length","photoReference","photo_reference","getPhotoFile","placeId","fields","defaultFields","requestDetailPlace","join","status","result","includes","failed","message","catch","error","currentParams","direction","bounds","window","google","maps","LatLngBounds","extend","LatLng","position","icon","props","Marker","color","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getNorthEast","parseBounds","Polyline","geodesic","pinSVGFilled","labelOriginFilled","Point","anchor","scale","labelOrigin","getSouthWest","openingHours","days","formatOpeningHours","undefined","close","reduce","day","open","openHour","time","slice","process"],"mappings":"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","file":"static/js/5.12fbe48c.chunk.js","sourcesContent":["export default class LanguageModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.lang_code = data.lang_code;\n    }\n}\n","export default class MediaModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.path = data.path;\n    }\n}\n","export default class CabModel {\n    constructor(data = {}) {\n        this.id =  data.id;\n        this.name = (data.name || \"\").trim();\n        this.phone_number = (data.phone_number || \"\").trim();\n    }\n}\n","import LanguageModel from \"../language.model\";\n\nexport default class CityLanguageModel {\n    constructor(data = {}) {\n        this.city_name = data.city_name;\n        this.id = data.id;\n        this.language = new LanguageModel(data.language);\n    }\n}\n","import MediaModel from '../media.model'\nimport CabModel from \"./cabs.model\";\nimport CityLanguageModel from \"./language.model\";\n\nexport default class CityModel {\n    constructor(data = {}) {\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.state = data.state;\n        this.latitude = data.latitude;\n        this.longitude = data.longitude;\n        this.geometry = data.geometry;\n        this.work_status = data.work_status;\n        this.generation_count_of_squares = data.generation_count_of_squares;\n        this.original_name = data.original_name;\n        this.languages = (data.languages || []).map( language => new CityLanguageModel(language));\n        this.images = (data.images || []).map( image => new MediaModel(image));\n        this.population = data.population;\n        this.landscape_image =  data.landscape_image && new MediaModel(data.landscape_image);\n        this.portrait_image =  data.portrait_image && new MediaModel(data.portrait_image);\n        this.cabs = (data.cabs || []).map( cab => new CabModel(cab));\n    }\n}\n","export default class ExcursionRouteTypeEnum{\n    static get walking(){ return \"walking\" }\n    static get driving(){ return \"driving\" }\n}\n","/**\n *service\n */\nimport axios from 'axios'\n/**\n * const\n */\nimport {\n    ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE,\n    ADMIN_CREATE_SQUARE_GENERATE_PLACE,\n    ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE,\n    ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE,\n    API_ADMIN_SIGHT_DOWNLOAD_IMAGE,\n} from \"../../constants/admin/api.constant\";\nimport {QueryString} from \"../../utils/Querystring\";\nimport CityModel from \"../../model/City/city.model\";\n\n\nexport default class GenerationPlaceService {\n    static async create(data) {\n        return await axios.post(ADMIN_CREATE_SQUARE_GENERATE_PLACE, data);\n    }\n\n    static async downloadImage(url) {\n        return await axios.post(API_ADMIN_SIGHT_DOWNLOAD_IMAGE, {url})\n    }\n\n    static async finish(data) {\n        return await axios.post(ADMIN_CREATE_FINISH_STATUS_BY_CITY_GENERATE_PLACE, data)\n    }\n\n    static async generatedSquare(params) {\n        return await axios.get(ADMIN_GET_GENERATED_SQUARE_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n    }\n\n    static async cityWhiteList(params) {\n        let cityList =  await axios.get(ADMIN_GET_CITY_WHITE_LIST_GENERATE_PLACE, {\n            params,\n            paramsSerializer: params => {\n                return QueryString.stringify(params)\n            }\n        })\n\n        cityList.data = cityList.data.map(city => new CityModel(city));\n\n        return cityList;\n    }\n}\n\n","import GenerationPlaceService from \"../services/admin/generationPlace.service\";\nimport ExcursionRouteTypeEnum from \"../enums/ExcursionRouteType\";\nimport {QueryString} from \"./Querystring\";\n\nexport default class GoogleClient {\n    static key = process.env.REACT_APP_GEOCODING_API\n\n    static getGeometryForCity(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${this.key}`)\n            .then(res => res.json())\n            .then(city => {\n                console.log(city)\n                if (city.results[0]) {\n                    const {northeast, southwest} = city.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static getGeometryForCountry(latitude, longitude) {\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=country&key=${this.key}`)\n            .then(res => res.json())\n            .then(country => {\n                console.log(country)\n                if (country.results[0]) {\n                    const {northeast, southwest} = country.results[0].geometry.viewport;\n\n                    return {\n                        north: northeast.lat, //noth lat up\n                        east: northeast.lng, //noth lng right\n                        south: southwest.lat, //south lat down\n                        west: southwest.lng, //south lng left\n                    }\n                }\n\n                return null\n            })\n    }\n\n    static async getPhotoFile (photo_ref){\n        try {\n            await new Promise(resolve => setTimeout(resolve, 400))\n            const [file] = await GenerationPlaceService.downloadImage(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&sensor=false&maxheight=800&photo_reference=${photo_ref}&key=${this.key}`)\n\n            return file?.id ? file : null;\n        } catch (e) {\n            return null\n        }\n    }\n\n    static async getPhotosId( photosList ){\n        let filesIds = [];\n        const shortPhotosList = photosList?.filter((_, index) => index < 3) || [];\n\n        if(!shortPhotosList.length) {\n            return []\n        }\n\n        for (let i = 0; i < shortPhotosList.length; i++) {\n            const photoReference = shortPhotosList[i].photo_reference;\n            const file = await this.getPhotoFile(photoReference)\n\n            if (file.id) {\n                filesIds = [...filesIds, file.id]\n            }\n        }\n\n        return filesIds\n    }\n\n    static getPlaceDetails( placeId, fields, props = {} ){\n        const defaultFields = [\n            'international_phone_number',\n            'opening_hours',\n            'website',\n            'geometry',\n            'type',\n            'photo',\n            'formatted_address',\n            'address_components',\n            'name',\n            'place_id',\n        ]\n\n        console.log(placeId, fields)\n\n        const requestDetailPlace = {\n            placeId: placeId,\n            fields: fields || defaultFields\n        };\n\n        return fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${requestDetailPlace.placeId}&fields=${requestDetailPlace.fields.join(\",\")}&key=${this.key}`)\n            .then(res => res.json())\n            .then(res => {\n                console.log(res)\n                if(res.status === \"OK\"){\n                    return res.result;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(res.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: res.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getDirection( params ){\n        const currentParams = {\n            key: this.key,\n            ...params,\n        }\n        const url = `https://maps.googleapis.com/maps/api/directions/json?${QueryString.stringify(currentParams)}`\n\n        return fetch(url)\n            .then(res => res.json())\n            .then(direction => {\n                if(direction.status === \"OK\"){\n                    return direction;\n                }\n\n                if([\"ZERO_RESULTS\", \"NOT_FOUND\"].includes(direction.status)){\n                    return null\n                }\n\n                return {\n                    failed: true,\n                    message: direction.status\n                }\n            })\n            .catch( error => ({\n                failed: true,\n                message: error\n            }))\n    }\n\n    static getBounds(north, south, east, west) {\n        const bounds = new window.google.maps.LatLngBounds();\n\n        bounds.extend(new window.google.maps.LatLng(north, east));\n        bounds.extend(new window.google.maps.LatLng(south, west));\n\n        return bounds;\n    }\n\n    static getMarker(map, position = {}, icon = null, props){\n        return new window.google.maps.Marker({\n            position: position,\n            icon,\n            map,\n            ...props\n        })\n    }\n\n    static getRectangle( map, bounds, color = \"blue\", props = {} ){\n        return new window.google.maps.Rectangle({\n            strokeColor: color,\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: color,\n            fillOpacity: 0.35,\n            bounds: bounds.getNorthEast ? GoogleClient.parseBounds(bounds) : bounds,\n            map,\n            ...props,\n        });\n    }\n\n    static getPolyline( map, path, props = {} ){\n        return new window.google.maps.Polyline({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            geodesic: true,\n            path,\n            map,\n            ...props,\n        })\n    }\n\n    static generateCustomMarker(color = \"black\") {\n        const pinSVGFilled = \"M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z\";\n        const labelOriginFilled = new window.google.maps.Point(12, 9);\n\n\n        return {\n            path: pinSVGFilled,\n            anchor: new window.google.maps.Point(12, 17),\n            fillOpacity: 1,\n            fillColor: color,\n            strokeWeight: 2,\n            strokeColor: \"white\",\n            scale: 2,\n            labelOrigin: labelOriginFilled\n        };\n    }\n\n    static parseBounds( bounds ){\n        return {\n            north: bounds.getNorthEast().lat(), //noth lat\n            south: bounds.getSouthWest().lat(), //south lat\n            east: bounds.getNorthEast().lng(), //noth lng\n            west: bounds.getSouthWest().lng() //south lng\n        }\n    }\n\n    static parseOpeningHours( openingHours ){\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        let formatOpeningHours = null\n\n        if(openingHours){\n            if(openingHours.length === 1 && openingHours[0].close === undefined){\n                formatOpeningHours = days.reduce((result, day ) => ({\n                    ...result,\n                    [day]: {\n                        open: \"00:00\",\n                        close: \"00:00\"\n                    }\n                }), {})\n\n                return formatOpeningHours\n            }\n\n            formatOpeningHours = openingHours.reduce( (result, openHour) => ({\n                ...result,\n                [days[openHour.open.day]]: {\n                    open: `${openHour.open.time.slice(0, 2)}:${openHour.open.time.slice(2, 4)}`,\n                    close: `${openHour.close.time.slice(0, 2)}:${openHour.close.time.slice(2, 4)}`,\n                }\n            }), {})\n\n            return formatOpeningHours\n        }\n\n        return formatOpeningHours\n    }\n\n}\n"],"sourceRoot":""}